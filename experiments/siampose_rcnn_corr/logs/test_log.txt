[2019-08-11 16:53:45,007-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-11 16:53:45,125-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-11 16:53:45,127-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-11 16:53:45,127-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-11 16:53:45,161-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-11 16:53:48,362-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-11 16:53:48,397-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-11 16:53:48,463-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,464-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-11 16:53:48,466-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-11 16:53:48,533-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,533-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-11 16:53:48,534-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-11 16:53:48,535-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-11 16:53:48,686-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-11 16:53:48,688-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-11 16:53:48,691-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,691-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-11 16:53:48,691-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-11 16:53:48,694-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,695-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-11 16:53:48,695-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-11 16:54:02,237-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-11 16:54:02,959-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-11 16:54:02,961-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked'}
[2019-08-11 16:54:02,962-rk0-load_helper.py# 14] missing keys:53
[2019-08-11 16:54:02,962-rk0-load_helper.py# 18] used keys:265
[2019-08-11 16:54:03,041-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-11 16:54:03,043-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-11 16:54:03,206-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-11 16:54:03,211-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-11 16:54:04,216-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-11 16:54:04,218-rk0-load_helper.py# 18] used keys:438
[2019-08-11 16:54:04,361-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-11 16:54:10,379-rk0-val_siamrcnn.py#268] Validation: [9/1899]	batch_time: 0.122605 (0.480318)	data_time: 0.000105 (0.082775)	rpn_cls_loss: 0.000299 (0.000552)	rpn_loc_loss: 0.023440 (0.064378)	kp_hp_loss: 0.826769 (1.126935)	kp_hm_hp_loss: 0.692127 (1.154266)	kp_hp_offset_loss: 0.221064 (0.238177)	kp_loss: 1.739960 (2.519377)	siammask_loss: 1.768386 (2.597183)	kp_avg_acc: 0.769231 (0.670418)
[2019-08-11 16:54:13,057-rk0-val_siamrcnn.py#268] Validation: [19/1899]	batch_time: 0.118690 (0.300129)	data_time: 0.000079 (0.041494)	rpn_cls_loss: 0.000190 (0.000431)	rpn_loc_loss: 0.202197 (0.069948)	kp_hp_loss: 0.637088 (1.134469)	kp_hm_hp_loss: 0.647889 (1.134924)	kp_hp_offset_loss: 0.236412 (0.236957)	kp_loss: 1.521389 (2.506349)	siammask_loss: 1.764215 (2.590717)	kp_avg_acc: 1.000000 (0.654243)
[2019-08-11 16:54:14,894-rk0-val_siamrcnn.py#268] Validation: [29/1899]	batch_time: 0.120921 (0.240740)	data_time: 0.000081 (0.027719)	rpn_cls_loss: 0.000150 (0.000535)	rpn_loc_loss: 0.091921 (0.068747)	kp_hp_loss: 1.067210 (0.972996)	kp_hm_hp_loss: 0.732790 (0.898239)	kp_hp_offset_loss: 0.280232 (0.234883)	kp_loss: 2.080233 (2.106119)	siammask_loss: 2.190688 (2.189150)	kp_avg_acc: 0.866667 (0.710843)
[2019-08-11 16:54:16,757-rk0-val_siamrcnn.py#268] Validation: [39/1899]	batch_time: 0.121434 (0.212219)	data_time: 0.000081 (0.020835)	rpn_cls_loss: 0.000143 (0.000696)	rpn_loc_loss: 0.040076 (0.064327)	kp_hp_loss: 0.732022 (0.949049)	kp_hm_hp_loss: 0.323760 (0.824627)	kp_hp_offset_loss: 0.214614 (0.237059)	kp_loss: 1.270395 (2.010735)	siammask_loss: 1.318629 (2.088623)	kp_avg_acc: 0.700000 (0.703349)
[2019-08-11 16:54:18,912-rk0-val_siamrcnn.py#268] Validation: [49/1899]	batch_time: 0.121749 (0.194018)	data_time: 0.000081 (0.016702)	rpn_cls_loss: 0.000185 (0.000619)	rpn_loc_loss: 0.037381 (0.063450)	kp_hp_loss: 1.470598 (0.929681)	kp_hm_hp_loss: 1.077496 (0.804330)	kp_hp_offset_loss: 0.191720 (0.237769)	kp_loss: 2.739814 (1.971780)	siammask_loss: 2.784857 (2.048538)	kp_avg_acc: 0.466667 (0.708581)
[2019-08-11 16:54:20,762-rk0-val_siamrcnn.py#268] Validation: [59/1899]	batch_time: 0.119792 (0.181858)	data_time: 0.000087 (0.013949)	rpn_cls_loss: 0.000119 (0.000579)	rpn_loc_loss: 0.093470 (0.064219)	kp_hp_loss: 0.744684 (0.996667)	kp_hm_hp_loss: 0.208839 (0.825873)	kp_hp_offset_loss: 0.186285 (0.237453)	kp_loss: 1.139809 (2.059993)	siammask_loss: 1.252092 (2.137636)	kp_avg_acc: 0.857143 (0.679865)
[2019-08-11 16:54:22,592-rk0-val_siamrcnn.py#268] Validation: [69/1899]	batch_time: 0.119731 (0.173105)	data_time: 0.000096 (0.011981)	rpn_cls_loss: 0.000159 (0.000549)	rpn_loc_loss: 0.051401 (0.061847)	kp_hp_loss: 0.430786 (0.956237)	kp_hm_hp_loss: 0.238211 (0.775393)	kp_hp_offset_loss: 0.196379 (0.233927)	kp_loss: 0.865376 (1.965557)	siammask_loss: 0.927216 (2.040322)	kp_avg_acc: 0.769231 (0.697665)
[2019-08-11 16:54:24,400-rk0-val_siamrcnn.py#268] Validation: [79/1899]	batch_time: 0.120030 (0.166639)	data_time: 0.000088 (0.010504)	rpn_cls_loss: 0.000140 (0.000508)	rpn_loc_loss: 0.020059 (0.064984)	kp_hp_loss: 0.899677 (0.963541)	kp_hm_hp_loss: 1.532452 (0.811185)	kp_hp_offset_loss: 0.180744 (0.232886)	kp_loss: 2.612873 (2.007613)	siammask_loss: 2.637084 (2.086101)	kp_avg_acc: 0.733333 (0.693702)
[2019-08-11 16:54:26,219-rk0-val_siamrcnn.py#268] Validation: [89/1899]	batch_time: 0.120263 (0.161600)	data_time: 0.000084 (0.009356)	rpn_cls_loss: 0.000116 (0.000487)	rpn_loc_loss: 0.021493 (0.067199)	kp_hp_loss: 1.454587 (0.959487)	kp_hm_hp_loss: 1.124995 (0.823628)	kp_hp_offset_loss: 0.254532 (0.233458)	kp_loss: 2.834113 (2.016572)	siammask_loss: 2.860021 (2.097697)	kp_avg_acc: 0.466667 (0.697954)
[2019-08-11 16:54:28,137-rk0-val_siamrcnn.py#268] Validation: [99/1899]	batch_time: 0.119411 (0.157540)	data_time: 0.000090 (0.008437)	rpn_cls_loss: 0.000370 (0.000465)	rpn_loc_loss: 0.140829 (0.067740)	kp_hp_loss: 0.783935 (0.950408)	kp_hm_hp_loss: 0.398002 (0.813960)	kp_hp_offset_loss: 0.276322 (0.232031)	kp_loss: 1.458259 (1.996399)	siammask_loss: 1.627625 (2.078152)	kp_avg_acc: 0.692308 (0.707418)
[2019-08-12 13:36:46,628-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:36:46,643-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:36:46,647-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:36:46,647-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:36:46,685-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:36:50,071-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:36:50,109-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:36:50,184-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,185-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:36:50,191-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:36:50,280-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,280-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:36:50,281-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:36:50,282-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:36:50,386-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:36:50,388-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:36:50,391-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,392-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:36:50,392-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:36:50,395-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,395-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:36:50,395-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:36:56,434-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:36:56,722-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:36:56,724-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked'}
[2019-08-12 13:36:56,724-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:36:56,724-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:36:56,802-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:36:56,804-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:36:56,947-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:36:56,951-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:36:58,495-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:36:58,497-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:36:58,667-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:40:04,400-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:40:04,402-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:40:04,406-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:40:04,407-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:40:04,412-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:40:07,472-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:40:07,511-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:40:07,580-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,581-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:40:07,587-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:40:07,656-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,657-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:40:07,657-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:40:07,659-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:40:07,755-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:40:07,757-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:40:07,760-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,761-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:40:07,761-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:40:07,764-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,764-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:40:07,765-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:40:13,137-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:40:13,450-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:40:13,452-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked'}
[2019-08-12 13:40:13,453-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:40:13,453-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:40:13,511-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:40:13,513-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:40:13,710-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:40:13,715-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:40:14,101-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:40:14,103-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:40:14,225-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:42:45,957-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:42:45,958-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:42:45,966-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:42:45,967-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:42:45,971-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:42:49,685-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:42:49,722-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:42:49,795-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,796-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:42:49,800-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:42:49,876-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,876-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:42:49,877-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:42:49,878-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:42:49,984-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:42:49,987-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:42:49,990-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,990-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:42:49,991-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:42:49,994-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,994-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:42:49,995-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:42:54,952-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:42:55,294-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:42:55,295-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked'}
[2019-08-12 13:42:55,296-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:42:55,296-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:42:55,404-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:42:55,406-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:42:55,568-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:42:55,573-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:42:56,028-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:42:56,031-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:42:56,197-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:45:23,730-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:45:23,732-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:45:23,736-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:45:23,737-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:45:23,740-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:45:27,143-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:45:27,177-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:45:27,244-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,244-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:45:27,247-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:45:27,313-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,314-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:45:27,314-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:45:27,316-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:45:27,410-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:45:27,412-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:45:27,415-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,415-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:45:27,416-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:45:27,419-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,419-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:45:27,419-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:45:32,809-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:45:33,154-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:45:33,156-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.2.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked'}
[2019-08-12 13:45:33,157-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:45:33,157-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:45:33,227-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:45:33,229-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:45:33,400-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:45:33,407-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:45:33,843-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:45:33,845-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:45:34,068-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:46:54,778-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:46:54,780-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:46:54,784-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:46:54,785-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:46:54,788-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:46:57,744-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:46:57,780-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:46:57,847-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:57,847-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:46:57,850-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:46:57,916-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:57,917-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:46:57,917-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:46:57,919-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:46:58,012-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:46:58,014-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:46:58,019-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:58,020-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:46:58,020-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:46:58,023-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:58,023-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:46:58,024-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:47:03,631-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:47:03,927-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:47:03,932-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked'}
[2019-08-12 13:47:03,933-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:47:03,933-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:47:03,993-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:47:03,995-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:47:04,134-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:47:04,138-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:47:04,490-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:47:04,493-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:47:04,618-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:48:22,771-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:48:22,773-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:48:22,778-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:48:22,779-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:48:22,784-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:48:25,840-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:48:25,877-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:48:25,942-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:25,943-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:48:25,946-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:48:26,011-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:26,012-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:48:26,012-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:48:26,014-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:48:26,111-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:48:26,113-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:48:26,116-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:26,117-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:48:26,117-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:48:26,120-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:26,121-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:48:26,121-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:48:31,141-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:48:31,414-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:48:31,416-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.2.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked'}
[2019-08-12 13:48:31,417-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:48:31,417-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:48:31,485-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:48:31,487-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:48:31,631-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:48:31,636-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:48:32,131-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:48:32,134-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:48:32,326-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:49:27,084-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:49:27,085-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:49:27,089-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:49:27,090-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:49:27,095-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:49:30,235-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:49:30,270-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:49:30,335-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,335-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:49:30,341-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:49:30,431-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,431-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:49:30,432-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:49:30,434-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:49:30,555-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:49:30,557-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:49:30,561-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,561-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:49:30,562-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:49:30,565-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,566-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:49:30,566-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:49:35,978-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:49:36,265-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:49:36,266-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked'}
[2019-08-12 13:49:36,267-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:49:36,267-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:49:36,332-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:49:36,333-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:49:36,467-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:49:36,471-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:49:36,897-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:49:36,899-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:49:37,072-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:49:42,262-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.134622 (0.411485)	data_time: 0.000142 (0.036034)	rpn_cls_loss: 0.000261 (0.000158)	rpn_loc_loss: 0.023668 (0.050986)	kp_hp_loss: 0.667292 (0.930651)	kp_hm_hp_loss: 6.815481 (6.885932)	kp_hp_offset_loss: 0.209148 (0.247384)	kp_loss: 7.691922 (8.063966)	siammask_loss: 7.720585 (8.125307)	kp_avg_acc: 0.000000 (0.016667)
[2019-08-12 13:49:44,510-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.156903 (0.281220)	data_time: 0.000526 (0.018170)	rpn_cls_loss: 0.000153 (0.000183)	rpn_loc_loss: 0.038461 (0.056939)	kp_hp_loss: 0.312371 (0.950944)	kp_hm_hp_loss: 7.301278 (6.693772)	kp_hp_offset_loss: 0.226856 (0.245220)	kp_loss: 7.840505 (7.889935)	siammask_loss: 7.886810 (7.958445)	kp_avg_acc: 0.000000 (0.017424)
[2019-08-12 13:49:46,810-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.146996 (0.238289)	data_time: 0.000158 (0.012225)	rpn_cls_loss: 0.000144 (0.000175)	rpn_loc_loss: 0.018719 (0.058711)	kp_hp_loss: 0.344952 (0.909912)	kp_hm_hp_loss: 7.565311 (6.689185)	kp_hp_offset_loss: 0.223120 (0.237305)	kp_loss: 8.133383 (7.836401)	siammask_loss: 8.155990 (7.907030)	kp_avg_acc: 0.000000 (0.027449)
[2019-08-12 13:49:49,274-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.140370 (0.219564)	data_time: 0.000275 (0.009254)	rpn_cls_loss: 0.000349 (0.000206)	rpn_loc_loss: 0.038944 (0.058510)	kp_hp_loss: 0.552428 (0.906791)	kp_hm_hp_loss: 7.089451 (6.681816)	kp_hp_offset_loss: 0.219190 (0.234277)	kp_loss: 7.861069 (7.822884)	siammask_loss: 7.908151 (7.893303)	kp_avg_acc: 0.000000 (0.027879)
[2019-08-12 13:49:51,166-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.133537 (0.201692)	data_time: 0.000185 (0.007452)	rpn_cls_loss: 0.000178 (0.000534)	rpn_loc_loss: 0.073556 (0.058274)	kp_hp_loss: 0.739448 (0.822965)	kp_hm_hp_loss: 6.855644 (6.723308)	kp_hp_offset_loss: 0.211611 (0.231962)	kp_loss: 7.806703 (7.778234)	siammask_loss: 7.895148 (7.848697)	kp_avg_acc: 0.000000 (0.022303)
[2019-08-12 13:49:53,074-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.126394 (0.189842)	data_time: 0.000113 (0.006247)	rpn_cls_loss: 0.000265 (0.000477)	rpn_loc_loss: 0.085295 (0.059199)	kp_hp_loss: 0.374828 (0.823296)	kp_hm_hp_loss: 5.820361 (6.645869)	kp_hp_offset_loss: 0.251314 (0.230562)	kp_loss: 6.446502 (7.699728)	siammask_loss: 6.549122 (7.771244)	kp_avg_acc: 0.250000 (0.032633)
[2019-08-12 13:49:54,974-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.146711 (0.180993)	data_time: 0.000118 (0.005385)	rpn_cls_loss: 0.000138 (0.000437)	rpn_loc_loss: 0.125050 (0.066049)	kp_hp_loss: 0.282809 (0.830431)	kp_hm_hp_loss: 6.382219 (6.652125)	kp_hp_offset_loss: 0.239987 (0.232348)	kp_loss: 6.905015 (7.714905)	siammask_loss: 7.055213 (7.794600)	kp_avg_acc: 0.000000 (0.032138)
[2019-08-12 13:49:56,839-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.122714 (0.174027)	data_time: 0.000117 (0.004740)	rpn_cls_loss: 0.000192 (0.000580)	rpn_loc_loss: 0.026532 (0.065329)	kp_hp_loss: 0.869308 (0.815093)	kp_hm_hp_loss: 6.661033 (6.700407)	kp_hp_offset_loss: 0.213396 (0.233614)	kp_loss: 7.743737 (7.749114)	siammask_loss: 7.775768 (7.828088)	kp_avg_acc: 0.111111 (0.029510)
[2019-08-12 13:49:59,542-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.183643 (0.172781)	data_time: 0.000211 (0.004246)	rpn_cls_loss: 0.000197 (0.000536)	rpn_loc_loss: 0.098478 (0.066921)	kp_hp_loss: 0.396269 (0.820743)	kp_hm_hp_loss: 6.528193 (6.657072)	kp_hp_offset_loss: 0.223122 (0.232856)	kp_loss: 7.147584 (7.710672)	siammask_loss: 7.265954 (7.791512)	kp_avg_acc: 0.000000 (0.029093)
[2019-08-12 13:50:01,953-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.151731 (0.171762)	data_time: 0.000236 (0.003854)	rpn_cls_loss: 0.000351 (0.000502)	rpn_loc_loss: 0.051207 (0.066812)	kp_hp_loss: 1.005280 (0.836540)	kp_hm_hp_loss: 6.491477 (6.663490)	kp_hp_offset_loss: 0.310025 (0.232481)	kp_loss: 7.806783 (7.732512)	siammask_loss: 7.868583 (7.813186)	kp_avg_acc: 0.000000 (0.029517)
[2019-08-12 14:01:01,432-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:01:01,434-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:01:01,439-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:01:01,439-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:01:01,495-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:01:04,679-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:01:04,714-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:01:04,783-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,784-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:01:04,786-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:01:04,854-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,854-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:01:04,855-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:01:04,856-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:01:04,953-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:01:04,955-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:01:04,958-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,958-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:01:04,958-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:01:04,961-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,962-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:01:04,962-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:01:11,069-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:01:11,378-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:01:11,380-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.1.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked'}
[2019-08-12 14:01:11,381-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:01:11,381-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:01:11,470-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:01:11,473-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:01:11,684-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:01:11,688-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:01:12,166-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:01:12,169-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:01:12,331-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:01:16,956-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.129150 (0.393254)	data_time: 0.000140 (0.043057)	rpn_cls_loss: 0.000215 (0.000174)	rpn_loc_loss: 0.119679 (0.066767)	kp_hp_loss: 0.507169 (0.836735)	kp_hm_hp_loss: 6.690080 (6.488668)	kp_hp_offset_loss: 0.285086 (0.257764)	kp_loss: 7.482335 (7.583167)	siammask_loss: 7.626164 (7.663460)	kp_avg_acc: 0.000000 (0.022500)
[2019-08-12 14:01:19,050-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.143045 (0.267315)	data_time: 0.000134 (0.021648)	rpn_cls_loss: 0.000218 (0.000227)	rpn_loc_loss: 0.022245 (0.082000)	kp_hp_loss: 0.698293 (0.832030)	kp_hm_hp_loss: 6.910457 (6.491615)	kp_hp_offset_loss: 0.236758 (0.245226)	kp_loss: 7.845508 (7.568871)	siammask_loss: 7.872420 (7.667497)	kp_avg_acc: 0.000000 (0.025139)
[2019-08-12 14:01:21,241-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.140259 (0.227386)	data_time: 0.000223 (0.014533)	rpn_cls_loss: 0.000182 (0.000447)	rpn_loc_loss: 0.036083 (0.076528)	kp_hp_loss: 0.990100 (0.842130)	kp_hm_hp_loss: 6.510998 (6.524550)	kp_hp_offset_loss: 0.295759 (0.241805)	kp_loss: 7.796857 (7.608487)	siammask_loss: 7.840339 (7.700767)	kp_avg_acc: 0.071429 (0.036204)
[2019-08-12 14:01:23,407-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.138824 (0.207263)	data_time: 0.000146 (0.010975)	rpn_cls_loss: 0.000723 (0.000398)	rpn_loc_loss: 0.028708 (0.071600)	kp_hp_loss: 0.811888 (0.816453)	kp_hm_hp_loss: 6.555377 (6.534530)	kp_hp_offset_loss: 0.207375 (0.237057)	kp_loss: 7.574639 (7.588041)	siammask_loss: 7.609811 (7.674358)	kp_avg_acc: 0.000000 (0.033403)
[2019-08-12 14:01:25,676-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.140897 (0.196438)	data_time: 0.000119 (0.008845)	rpn_cls_loss: 0.000108 (0.000360)	rpn_loc_loss: 0.036098 (0.065630)	kp_hp_loss: 0.420471 (0.777866)	kp_hm_hp_loss: 7.155550 (6.556276)	kp_hp_offset_loss: 0.181681 (0.232681)	kp_loss: 7.757701 (7.566824)	siammask_loss: 7.801127 (7.645940)	kp_avg_acc: 0.000000 (0.030722)
[2019-08-12 14:01:28,041-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.154849 (0.190112)	data_time: 0.000145 (0.007421)	rpn_cls_loss: 0.000150 (0.000330)	rpn_loc_loss: 0.037789 (0.067372)	kp_hp_loss: 0.536426 (0.755361)	kp_hm_hp_loss: 6.299927 (6.595760)	kp_hp_offset_loss: 0.231665 (0.231207)	kp_loss: 7.068019 (7.582327)	siammask_loss: 7.113516 (7.663503)	kp_avg_acc: 0.000000 (0.030299)
[2019-08-12 14:01:30,409-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.172999 (0.185791)	data_time: 0.000247 (0.006407)	rpn_cls_loss: 0.000294 (0.000314)	rpn_loc_loss: 0.021721 (0.066454)	kp_hp_loss: 0.673020 (0.733846)	kp_hm_hp_loss: 6.584874 (6.607452)	kp_hp_offset_loss: 0.205383 (0.229411)	kp_loss: 7.463276 (7.570707)	siammask_loss: 7.489635 (7.650767)	kp_avg_acc: 0.000000 (0.031979)
[2019-08-12 14:01:32,673-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.165428 (0.181733)	data_time: 0.000213 (0.005644)	rpn_cls_loss: 0.000504 (0.000364)	rpn_loc_loss: 0.074081 (0.067171)	kp_hp_loss: 0.791627 (0.781292)	kp_hm_hp_loss: 5.679031 (6.606155)	kp_hp_offset_loss: 0.198750 (0.230612)	kp_loss: 6.669409 (7.618056)	siammask_loss: 6.758811 (7.699026)	kp_avg_acc: 0.000000 (0.027982)
[2019-08-12 14:01:35,054-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.165355 (0.179778)	data_time: 0.000138 (0.005046)	rpn_cls_loss: 0.000169 (0.000354)	rpn_loc_loss: 0.066579 (0.066392)	kp_hp_loss: 3.907241 (0.781795)	kp_hm_hp_loss: 7.027899 (6.628749)	kp_hp_offset_loss: 0.309753 (0.230050)	kp_loss: 11.244893 (7.640593)	siammask_loss: 11.324957 (7.720619)	kp_avg_acc: 0.000000 (0.029040)
[2019-08-12 14:01:37,383-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.155081 (0.177521)	data_time: 0.000143 (0.004567)	rpn_cls_loss: 0.000113 (0.000339)	rpn_loc_loss: 0.023733 (0.064379)	kp_hp_loss: 0.311062 (0.766547)	kp_hm_hp_loss: 6.625135 (6.631339)	kp_hp_offset_loss: 0.230940 (0.230436)	kp_loss: 7.167138 (7.628319)	siammask_loss: 7.195730 (7.705915)	kp_avg_acc: 0.000000 (0.029231)
[2019-08-12 14:04:25,968-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:04:25,969-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:04:25,972-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:04:25,973-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:04:25,976-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:04:29,443-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:04:29,480-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:04:29,549-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,549-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:04:29,552-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:04:29,621-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,621-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:04:29,621-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:04:29,623-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:04:29,718-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:04:29,720-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:04:29,723-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,724-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:04:29,724-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:04:29,727-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,727-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:04:29,727-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:04:35,271-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:04:35,634-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:04:35,636-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked'}
[2019-08-12 14:04:35,637-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:04:35,637-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:04:35,712-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:04:35,714-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:04:35,871-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:04:35,876-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:04:36,270-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:04:36,272-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:04:36,463-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:05:49,472-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:05:49,473-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:05:49,476-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:05:49,476-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:05:49,478-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:05:52,601-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:05:52,635-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:05:52,703-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,704-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:05:52,706-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:05:52,771-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,771-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:05:52,772-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:05:52,773-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:05:52,870-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:05:52,872-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:05:52,875-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,875-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:05:52,876-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:05:52,879-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,879-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:05:52,879-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:05:57,803-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:05:58,113-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:05:58,115-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked'}
[2019-08-12 14:05:58,115-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:05:58,115-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:05:58,182-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:05:58,184-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:05:58,318-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:05:58,322-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:05:58,706-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:05:58,708-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:05:58,862-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:07:15,040-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:07:15,041-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:07:15,044-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:07:15,045-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:07:15,049-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:07:18,794-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:07:18,833-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:07:18,910-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:18,911-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:07:18,919-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:07:19,010-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:19,011-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:07:19,012-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:07:19,014-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:07:19,140-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:07:19,142-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:07:19,145-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:19,146-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:07:19,146-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:07:19,149-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:19,149-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:07:19,150-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:07:24,318-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:07:24,603-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:07:24,604-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked'}
[2019-08-12 14:07:24,605-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:07:24,605-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:07:24,680-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:07:24,682-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:07:24,831-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:07:24,834-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:07:25,235-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:07:25,238-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:07:25,454-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:07:30,087-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.188927 (0.383345)	data_time: 0.000153 (0.024649)	rpn_cls_loss: 0.000159 (0.000206)	rpn_loc_loss: 0.055509 (0.057570)	kp_hp_loss: 1.100339 (0.839253)	kp_hm_hp_loss: 7.858043 (9.590490)	kp_hp_offset_loss: 0.242547 (0.225397)	kp_loss: 9.200930 (10.655138)	siammask_loss: 9.267699 (10.724428)	kp_avg_acc: 0.000000 (0.040000)
[2019-08-12 14:07:32,479-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.181944 (0.273831)	data_time: 0.000244 (0.012460)	rpn_cls_loss: 0.000106 (0.000192)	rpn_loc_loss: 0.015024 (0.076810)	kp_hp_loss: 0.892544 (0.833463)	kp_hm_hp_loss: 11.785314 (9.992783)	kp_hp_offset_loss: 0.273516 (0.231547)	kp_loss: 12.951373 (11.057791)	siammask_loss: 12.969507 (11.150155)	kp_avg_acc: 0.000000 (0.020000)
[2019-08-12 14:07:34,817-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.159326 (0.236180)	data_time: 0.000521 (0.008406)	rpn_cls_loss: 0.000118 (0.000238)	rpn_loc_loss: 0.024499 (0.068199)	kp_hp_loss: 0.786760 (0.851981)	kp_hm_hp_loss: 12.497476 (10.267300)	kp_hp_offset_loss: 0.227563 (0.232462)	kp_loss: 13.511798 (11.351743)	siammask_loss: 13.541315 (11.433819)	kp_avg_acc: 0.000000 (0.030000)
[2019-08-12 14:07:37,478-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.180232 (0.222912)	data_time: 0.000153 (0.006394)	rpn_cls_loss: 0.000160 (0.000225)	rpn_loc_loss: 0.019064 (0.065635)	kp_hp_loss: 0.703402 (0.812089)	kp_hm_hp_loss: 9.131620 (9.979748)	kp_hp_offset_loss: 0.206763 (0.227062)	kp_loss: 10.041785 (11.018898)	siammask_loss: 10.064821 (11.097886)	kp_avg_acc: 0.000000 (0.035625)
[2019-08-12 14:07:39,772-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.153783 (0.210339)	data_time: 0.000357 (0.005176)	rpn_cls_loss: 0.000167 (0.000221)	rpn_loc_loss: 0.041174 (0.063967)	kp_hp_loss: 1.135532 (0.777494)	kp_hm_hp_loss: 6.417710 (9.726780)	kp_hp_offset_loss: 0.212669 (0.227276)	kp_loss: 7.765912 (10.731550)	siammask_loss: 7.815488 (10.808531)	kp_avg_acc: 0.000000 (0.046833)
[2019-08-12 14:07:41,970-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.151368 (0.200594)	data_time: 0.000145 (0.004351)	rpn_cls_loss: 0.000357 (0.000355)	rpn_loc_loss: 0.056239 (0.065178)	kp_hp_loss: 0.462204 (0.788466)	kp_hm_hp_loss: 7.445250 (9.726135)	kp_hp_offset_loss: 0.221989 (0.225532)	kp_loss: 8.129443 (10.740135)	siammask_loss: 8.197288 (10.818701)	kp_avg_acc: 0.000000 (0.041409)
[2019-08-12 14:07:44,311-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.149406 (0.194996)	data_time: 0.000148 (0.003766)	rpn_cls_loss: 0.000261 (0.000354)	rpn_loc_loss: 0.026469 (0.062735)	kp_hp_loss: 0.342050 (0.768014)	kp_hm_hp_loss: 10.278155 (9.838043)	kp_hp_offset_loss: 0.203248 (0.225227)	kp_loss: 10.823453 (10.831284)	siammask_loss: 10.855477 (10.906919)	kp_avg_acc: 0.000000 (0.037534)
[2019-08-12 14:07:46,436-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.135650 (0.188910)	data_time: 0.000148 (0.003327)	rpn_cls_loss: 0.000225 (0.009067)	rpn_loc_loss: 0.029745 (0.063766)	kp_hp_loss: 1.687516 (0.798235)	kp_hm_hp_loss: 9.953407 (9.880465)	kp_hp_offset_loss: 0.221813 (0.226012)	kp_loss: 11.862737 (10.904713)	siammask_loss: 11.898656 (10.990298)	kp_avg_acc: 0.000000 (0.038467)
[2019-08-12 14:07:48,696-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.145629 (0.184914)	data_time: 0.000149 (0.002983)	rpn_cls_loss: 0.000169 (0.008091)	rpn_loc_loss: 0.132915 (0.063569)	kp_hp_loss: 0.830725 (0.799763)	kp_hm_hp_loss: 11.391438 (9.755046)	kp_hp_offset_loss: 0.226884 (0.226387)	kp_loss: 12.449046 (10.781196)	siammask_loss: 12.608714 (10.865570)	kp_avg_acc: 0.000000 (0.038391)
[2019-08-12 14:07:51,111-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.139032 (0.183023)	data_time: 0.000246 (0.002714)	rpn_cls_loss: 0.000365 (0.007302)	rpn_loc_loss: 0.049535 (0.062579)	kp_hp_loss: 4.209217 (0.866772)	kp_hm_hp_loss: 11.105695 (9.677545)	kp_hp_offset_loss: 0.306553 (0.227401)	kp_loss: 15.621464 (10.771718)	siammask_loss: 15.681271 (10.854115)	kp_avg_acc: 0.000000 (0.035802)
[2019-08-12 14:09:27,898-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:09:27,899-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:09:27,904-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:09:27,904-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:09:27,909-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:09:31,366-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:09:31,402-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:09:31,473-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,474-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:09:31,479-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:09:31,617-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,618-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:09:31,619-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:09:31,621-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:09:31,748-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:09:31,751-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:09:31,754-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,754-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:09:31,755-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:09:31,758-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,759-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:09:31,759-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:09:36,832-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:09:37,129-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:09:37,131-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked'}
[2019-08-12 14:09:37,131-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:09:37,132-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:09:37,190-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:09:37,192-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:09:37,360-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:09:37,365-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:09:37,777-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:09:37,779-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:09:37,914-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:09:42,169-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.117141 (0.360232)	data_time: 0.000100 (0.031009)	rpn_cls_loss: 0.000118 (0.000365)	rpn_loc_loss: 0.124013 (0.110965)	kp_hp_loss: 0.891969 (0.768553)	kp_hm_hp_loss: 13.070885 (8.949048)	kp_hp_offset_loss: 0.251443 (0.231424)	kp_loss: 14.214297 (9.949025)	siammask_loss: 14.363232 (10.082549)	kp_avg_acc: 0.000000 (0.010000)
[2019-08-12 14:09:44,116-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.131966 (0.246487)	data_time: 0.000130 (0.015613)	rpn_cls_loss: 0.000133 (0.000521)	rpn_loc_loss: 0.014924 (0.085656)	kp_hp_loss: 0.458021 (0.697133)	kp_hm_hp_loss: 10.677878 (9.411996)	kp_hp_offset_loss: 0.174753 (0.221697)	kp_loss: 11.310652 (10.330827)	siammask_loss: 11.328693 (10.434135)	kp_avg_acc: 0.000000 (0.005000)
[2019-08-12 14:09:46,076-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.150754 (0.209241)	data_time: 0.000180 (0.010485)	rpn_cls_loss: 0.000172 (0.000461)	rpn_loc_loss: 0.038345 (0.081204)	kp_hp_loss: 0.430448 (0.766210)	kp_hm_hp_loss: 13.482200 (9.565829)	kp_hp_offset_loss: 0.185476 (0.230167)	kp_loss: 14.098123 (10.562207)	siammask_loss: 14.144309 (10.660112)	kp_avg_acc: 0.000000 (0.013585)
[2019-08-12 14:09:48,248-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.149300 (0.194400)	data_time: 0.000190 (0.007931)	rpn_cls_loss: 0.000803 (0.000466)	rpn_loc_loss: 0.167237 (0.080078)	kp_hp_loss: 1.222521 (0.782667)	kp_hm_hp_loss: 10.070531 (9.474611)	kp_hp_offset_loss: 0.255592 (0.230542)	kp_loss: 11.548643 (10.487820)	siammask_loss: 11.750131 (10.584379)	kp_avg_acc: 0.000000 (0.010188)
[2019-08-12 14:09:50,263-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.127604 (0.183060)	data_time: 0.000185 (0.006401)	rpn_cls_loss: 0.001295 (0.000458)	rpn_loc_loss: 0.200284 (0.076812)	kp_hp_loss: 1.194516 (0.792416)	kp_hm_hp_loss: 7.095715 (9.407834)	kp_hp_offset_loss: 0.295447 (0.235435)	kp_loss: 8.585678 (10.435687)	siammask_loss: 8.827314 (10.528318)	kp_avg_acc: 0.000000 (0.012913)
[2019-08-12 14:09:52,255-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.177784 (0.175371)	data_time: 0.000148 (0.005383)	rpn_cls_loss: 0.000315 (0.000810)	rpn_loc_loss: 0.045708 (0.079684)	kp_hp_loss: 1.196329 (0.768816)	kp_hm_hp_loss: 7.191578 (9.515332)	kp_hp_offset_loss: 0.244145 (0.235002)	kp_loss: 8.632051 (10.519150)	siammask_loss: 8.687216 (10.615578)	kp_avg_acc: 0.000000 (0.012149)
[2019-08-12 14:09:54,327-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.124171 (0.170420)	data_time: 0.000115 (0.004650)	rpn_cls_loss: 0.000137 (0.000719)	rpn_loc_loss: 0.064819 (0.075139)	kp_hp_loss: 0.809833 (0.780132)	kp_hm_hp_loss: 7.587210 (9.458205)	kp_hp_offset_loss: 0.300019 (0.234852)	kp_loss: 8.697062 (10.473189)	siammask_loss: 8.774981 (10.564073)	kp_avg_acc: 0.125000 (0.015057)
[2019-08-12 14:09:56,347-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.130849 (0.166731)	data_time: 0.000119 (0.004095)	rpn_cls_loss: 0.000191 (0.000661)	rpn_loc_loss: 0.123640 (0.075746)	kp_hp_loss: 1.196373 (0.805918)	kp_hm_hp_loss: 8.064327 (9.472444)	kp_hp_offset_loss: 0.212198 (0.235043)	kp_loss: 9.472898 (10.513404)	siammask_loss: 9.621458 (10.604960)	kp_avg_acc: 0.125000 (0.016820)
[2019-08-12 14:09:58,328-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.126915 (0.163612)	data_time: 0.000125 (0.003665)	rpn_cls_loss: 0.000159 (0.000614)	rpn_loc_loss: 0.163146 (0.077954)	kp_hp_loss: 2.300967 (0.812264)	kp_hm_hp_loss: 16.376863 (9.565017)	kp_hp_offset_loss: 0.261743 (0.235896)	kp_loss: 18.939573 (10.613175)	siammask_loss: 19.135508 (10.707332)	kp_avg_acc: 0.000000 (0.016063)
[2019-08-12 14:10:00,214-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.127049 (0.160271)	data_time: 0.000121 (0.003333)	rpn_cls_loss: 0.000155 (0.000572)	rpn_loc_loss: 0.033320 (0.077245)	kp_hp_loss: 0.431506 (0.802876)	kp_hm_hp_loss: 11.240989 (9.594614)	kp_hp_offset_loss: 0.233378 (0.234933)	kp_loss: 11.905872 (10.632421)	siammask_loss: 11.946012 (10.725686)	kp_avg_acc: 0.000000 (0.015706)
[2019-08-12 14:32:22,911-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:32:22,911-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:32:22,932-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:32:22,932-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:32:22,977-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:32:26,326-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:32:26,361-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:32:26,432-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,433-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:32:26,438-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:32:26,504-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,505-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:32:26,505-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:32:26,518-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:32:26,679-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:32:26,681-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:32:26,685-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,685-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:32:26,686-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:32:26,689-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,690-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:32:26,690-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:32:35,939-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:32:36,634-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:32:36,635-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked'}
[2019-08-12 14:32:36,636-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:32:36,636-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:32:36,732-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:32:36,734-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:32:36,887-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:32:36,892-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:32:38,381-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:32:38,383-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:32:38,562-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:32:43,881-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.169114 (0.422306)	data_time: 0.000111 (0.038846)	rpn_cls_loss: 0.000319 (0.000337)	rpn_loc_loss: 0.027635 (0.070965)	kp_hp_loss: 0.625517 (0.649985)	kp_hm_hp_loss: 5.133065 (13.042642)	kp_hp_offset_loss: 0.236516 (0.232704)	kp_loss: 5.995099 (13.925331)	siammask_loss: 6.028580 (14.010826)	kp_avg_acc: 0.000000 (0.031618)
[2019-08-12 14:32:46,362-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.153467 (0.289520)	data_time: 0.000189 (0.019600)	rpn_cls_loss: 0.000151 (0.000399)	rpn_loc_loss: 0.027629 (0.066377)	kp_hp_loss: 0.539008 (0.727821)	kp_hm_hp_loss: 24.755070 (13.332822)	kp_hp_offset_loss: 0.220698 (0.235033)	kp_loss: 25.514778 (14.295676)	siammask_loss: 25.548084 (14.375726)	kp_avg_acc: 0.083333 (0.026763)
[2019-08-12 14:32:48,712-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.129028 (0.246709)	data_time: 0.000131 (0.013230)	rpn_cls_loss: 0.000122 (0.000361)	rpn_loc_loss: 0.045164 (0.063963)	kp_hp_loss: 0.461897 (0.894337)	kp_hm_hp_loss: 21.320295 (14.029061)	kp_hp_offset_loss: 0.236497 (0.235170)	kp_loss: 22.018690 (15.158569)	siammask_loss: 22.073009 (15.235685)	kp_avg_acc: 0.000000 (0.030223)
[2019-08-12 14:32:50,840-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.131775 (0.220243)	data_time: 0.000147 (0.009983)	rpn_cls_loss: 0.000339 (0.000337)	rpn_loc_loss: 0.067374 (0.062391)	kp_hp_loss: 0.466157 (0.929780)	kp_hm_hp_loss: 7.680381 (12.940039)	kp_hp_offset_loss: 0.256892 (0.236438)	kp_loss: 8.403429 (14.106259)	siammask_loss: 8.484617 (14.181463)	kp_avg_acc: 0.000000 (0.028946)
[2019-08-12 14:32:52,942-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.160609 (0.203896)	data_time: 0.000151 (0.008037)	rpn_cls_loss: 0.000153 (0.000321)	rpn_loc_loss: 0.074056 (0.058782)	kp_hp_loss: 0.421253 (0.872024)	kp_hm_hp_loss: 32.611488 (13.536644)	kp_hp_offset_loss: 0.256015 (0.232852)	kp_loss: 33.288757 (14.641522)	siammask_loss: 33.377777 (14.712379)	kp_avg_acc: 0.000000 (0.023157)
[2019-08-12 14:32:55,058-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.130535 (0.193259)	data_time: 0.000113 (0.006742)	rpn_cls_loss: 0.000676 (0.000308)	rpn_loc_loss: 0.065473 (0.063676)	kp_hp_loss: 1.093461 (0.859601)	kp_hm_hp_loss: 12.757201 (13.652008)	kp_hp_offset_loss: 0.261905 (0.233837)	kp_loss: 14.112567 (14.745449)	siammask_loss: 14.191810 (14.822167)	kp_avg_acc: 0.000000 (0.020687)
[2019-08-12 14:32:57,125-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.134247 (0.185727)	data_time: 0.000182 (0.005837)	rpn_cls_loss: 0.000145 (0.000288)	rpn_loc_loss: 0.021884 (0.059737)	kp_hp_loss: 0.353530 (0.812792)	kp_hm_hp_loss: 8.069126 (14.169268)	kp_hp_offset_loss: 0.184754 (0.233324)	kp_loss: 8.607410 (15.215384)	siammask_loss: 8.633816 (15.287356)	kp_avg_acc: 0.000000 (0.019577)
[2019-08-12 14:32:59,149-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.130190 (0.179296)	data_time: 0.000127 (0.005139)	rpn_cls_loss: 0.000135 (0.000277)	rpn_loc_loss: 0.023568 (0.059331)	kp_hp_loss: 0.601431 (0.798953)	kp_hm_hp_loss: 11.706159 (14.134956)	kp_hp_offset_loss: 0.254747 (0.233359)	kp_loss: 12.562337 (15.167270)	siammask_loss: 12.590753 (15.238744)	kp_avg_acc: 0.066667 (0.019689)
[2019-08-12 14:33:01,255-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.134490 (0.174572)	data_time: 0.000159 (0.004594)	rpn_cls_loss: 0.000117 (0.000313)	rpn_loc_loss: 0.117441 (0.062642)	kp_hp_loss: 0.331079 (0.803856)	kp_hm_hp_loss: 22.445728 (14.512008)	kp_hp_offset_loss: 0.214952 (0.231385)	kp_loss: 22.991760 (15.547249)	siammask_loss: 23.132807 (15.622733)	kp_avg_acc: 0.000000 (0.017501)
[2019-08-12 14:33:03,312-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.148305 (0.170814)	data_time: 0.000160 (0.004157)	rpn_cls_loss: 0.000146 (0.000312)	rpn_loc_loss: 0.055976 (0.063184)	kp_hp_loss: 0.464933 (0.792206)	kp_hm_hp_loss: 19.823624 (14.872546)	kp_hp_offset_loss: 0.205271 (0.231169)	kp_loss: 20.493828 (15.895920)	siammask_loss: 20.561146 (15.972053)	kp_avg_acc: 0.000000 (0.016418)
[2019-08-12 14:35:51,270-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:35:51,271-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:35:51,273-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:35:51,273-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:35:51,275-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:35:54,588-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:35:54,628-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:35:54,754-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:54,755-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:35:54,770-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:35:54,876-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:54,877-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:35:54,878-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:35:54,880-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:35:55,010-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:35:55,012-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:35:55,015-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:55,016-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:35:55,016-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:35:55,020-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:55,020-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:35:55,020-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:36:00,353-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:36:00,636-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:36:00,638-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'bn1.num_batches_tracked'}
[2019-08-12 14:36:00,638-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:36:00,638-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:36:00,705-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:36:00,706-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:36:00,860-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:36:00,865-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:36:01,256-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:36:01,258-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:36:01,396-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:36:05,604-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.125811 (0.357316)	data_time: 0.000099 (0.027036)	rpn_cls_loss: 0.000143 (0.000207)	rpn_loc_loss: 0.017091 (0.069160)	kp_hp_loss: 0.447770 (0.734637)	kp_hm_hp_loss: 61.065361 (60.978326)	kp_hp_offset_loss: 0.177164 (0.233631)	kp_loss: 61.690292 (61.946588)	siammask_loss: 61.710945 (62.029792)	kp_avg_acc: 0.083333 (0.021908)
[2019-08-12 14:36:08,024-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.166338 (0.259529)	data_time: 0.000216 (0.013656)	rpn_cls_loss: 0.000140 (0.000256)	rpn_loc_loss: 0.051800 (0.069225)	kp_hp_loss: 1.337814 (0.886072)	kp_hm_hp_loss: 81.244919 (73.327240)	kp_hp_offset_loss: 0.210810 (0.236754)	kp_loss: 82.793541 (74.450067)	siammask_loss: 82.855843 (74.533389)	kp_avg_acc: 0.000000 (0.027679)
[2019-08-12 14:36:10,662-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.171254 (0.232600)	data_time: 0.000210 (0.009216)	rpn_cls_loss: 0.000148 (0.000357)	rpn_loc_loss: 0.128946 (0.064118)	kp_hp_loss: 0.549597 (0.789230)	kp_hm_hp_loss: 62.344337 (71.769661)	kp_hp_offset_loss: 0.219354 (0.236457)	kp_loss: 63.113289 (72.795353)	siammask_loss: 63.268173 (72.872647)	kp_avg_acc: 0.000000 (0.027239)
[2019-08-12 14:36:13,161-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.151081 (0.217157)	data_time: 0.000268 (0.006992)	rpn_cls_loss: 0.005456 (0.000458)	rpn_loc_loss: 0.099699 (0.064519)	kp_hp_loss: 3.929884 (1.004964)	kp_hm_hp_loss: 50.220337 (73.369482)	kp_hp_offset_loss: 0.281520 (0.240841)	kp_loss: 54.431740 (74.615283)	siammask_loss: 54.556835 (74.693168)	kp_avg_acc: 0.000000 (0.022352)
[2019-08-12 14:36:15,386-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.147874 (0.203856)	data_time: 0.000190 (0.005658)	rpn_cls_loss: 0.000115 (0.000397)	rpn_loc_loss: 0.019988 (0.063110)	kp_hp_loss: 0.946356 (0.994215)	kp_hm_hp_loss: 35.442238 (72.459038)	kp_hp_offset_loss: 0.229704 (0.239828)	kp_loss: 36.618294 (73.693096)	siammask_loss: 36.642395 (73.769219)	kp_avg_acc: 0.062500 (0.020798)
[2019-08-12 14:36:17,472-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.155485 (0.194076)	data_time: 0.000126 (0.004774)	rpn_cls_loss: 0.000206 (0.000358)	rpn_loc_loss: 0.054761 (0.059257)	kp_hp_loss: 0.616086 (0.953775)	kp_hm_hp_loss: 57.201054 (74.422298)	kp_hp_offset_loss: 0.273374 (0.238547)	kp_loss: 58.090511 (75.614624)	siammask_loss: 58.156429 (75.686092)	kp_avg_acc: 0.100000 (0.021392)
[2019-08-12 14:36:19,590-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.169641 (0.187154)	data_time: 0.000208 (0.004132)	rpn_cls_loss: 0.000177 (0.000340)	rpn_loc_loss: 0.050702 (0.060172)	kp_hp_loss: 0.519239 (0.956152)	kp_hm_hp_loss: 52.238316 (76.894545)	kp_hp_offset_loss: 0.226098 (0.241102)	kp_loss: 52.983654 (78.091804)	siammask_loss: 53.044674 (78.164345)	kp_avg_acc: 0.000000 (0.021133)
[2019-08-12 14:36:21,771-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.185459 (0.182401)	data_time: 0.000233 (0.003657)	rpn_cls_loss: 0.000314 (0.000695)	rpn_loc_loss: 0.045747 (0.063351)	kp_hp_loss: 0.275611 (0.945044)	kp_hm_hp_loss: 70.712433 (74.774194)	kp_hp_offset_loss: 0.186637 (0.240165)	kp_loss: 71.174683 (75.959399)	siammask_loss: 71.229897 (76.036111)	kp_avg_acc: 0.000000 (0.020315)
[2019-08-12 14:36:23,888-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.148149 (0.178109)	data_time: 0.000177 (0.003287)	rpn_cls_loss: 0.000143 (0.000647)	rpn_loc_loss: 0.026389 (0.067276)	kp_hp_loss: 0.485446 (0.956812)	kp_hm_hp_loss: 149.999695 (74.325939)	kp_hp_offset_loss: 0.183817 (0.239978)	kp_loss: 150.668961 (75.522738)	siammask_loss: 150.700775 (75.604102)	kp_avg_acc: 0.000000 (0.018058)
[2019-08-12 14:36:25,917-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.124821 (0.174259)	data_time: 0.000150 (0.002984)	rpn_cls_loss: 0.000144 (0.000601)	rpn_loc_loss: 0.185899 (0.067622)	kp_hp_loss: 1.492047 (0.934715)	kp_hm_hp_loss: 95.583885 (77.185220)	kp_hp_offset_loss: 0.239256 (0.238506)	kp_loss: 97.315193 (78.358462)	siammask_loss: 97.538414 (78.440189)	kp_avg_acc: 0.000000 (0.017633)
[2019-08-12 14:39:16,126-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:39:16,127-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:39:16,130-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:39:16,130-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:39:16,133-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:39:19,600-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:39:19,640-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:39:19,714-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,714-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:39:19,718-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:39:19,791-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,791-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:39:19,792-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:39:19,793-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:39:19,902-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:39:19,905-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:39:19,908-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,908-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:39:19,909-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:39:19,912-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,912-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:39:19,912-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:39:24,836-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:39:25,133-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:39:25,135-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked'}
[2019-08-12 14:39:25,136-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:39:25,136-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:39:25,213-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:39:25,214-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:39:25,385-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:39:25,390-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:39:25,833-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:39:25,836-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:39:26,049-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:39:30,710-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.148979 (0.392712)	data_time: 0.000109 (0.029354)	rpn_cls_loss: 0.000860 (0.000267)	rpn_loc_loss: 0.028193 (0.044336)	kp_hp_loss: 0.682969 (0.928293)	kp_hm_hp_loss: 51.042809 (65.515283)	kp_hp_offset_loss: 0.221731 (0.250613)	kp_loss: 51.947510 (66.694189)	siammask_loss: 51.982201 (66.747665)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 14:39:33,151-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.142670 (0.279563)	data_time: 0.000112 (0.014814)	rpn_cls_loss: 0.000154 (0.000225)	rpn_loc_loss: 0.053840 (0.049481)	kp_hp_loss: 0.845491 (0.735652)	kp_hm_hp_loss: 102.231987 (75.929993)	kp_hp_offset_loss: 0.252890 (0.241140)	kp_loss: 103.330368 (76.906793)	siammask_loss: 103.395126 (76.966404)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 14:39:35,449-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.214779 (0.240711)	data_time: 0.000248 (0.009966)	rpn_cls_loss: 0.000160 (0.001318)	rpn_loc_loss: 0.052562 (0.069241)	kp_hp_loss: 0.641035 (0.796025)	kp_hm_hp_loss: 92.381302 (71.448120)	kp_hp_offset_loss: 0.272428 (0.246700)	kp_loss: 93.294769 (72.490853)	siammask_loss: 93.358002 (72.575262)	kp_avg_acc: 0.000000 (0.006845)
[2019-08-12 14:39:37,811-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.143431 (0.220709)	data_time: 0.000158 (0.007551)	rpn_cls_loss: 0.000218 (0.001104)	rpn_loc_loss: 0.115566 (0.071835)	kp_hp_loss: 0.585958 (0.798182)	kp_hm_hp_loss: 147.208023 (74.446759)	kp_hp_offset_loss: 0.245460 (0.242731)	kp_loss: 148.039429 (75.487683)	siammask_loss: 148.178329 (75.574983)	kp_avg_acc: 0.071429 (0.013899)
[2019-08-12 14:39:40,140-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.168773 (0.208230)	data_time: 0.000131 (0.006093)	rpn_cls_loss: 0.000130 (0.000942)	rpn_loc_loss: 0.090684 (0.075979)	kp_hp_loss: 0.560500 (0.813630)	kp_hm_hp_loss: 159.357590 (73.410005)	kp_hp_offset_loss: 0.242427 (0.240390)	kp_loss: 160.160522 (74.464033)	siammask_loss: 160.269470 (74.556143)	kp_avg_acc: 0.000000 (0.014036)
[2019-08-12 14:39:42,347-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.146800 (0.198393)	data_time: 0.000168 (0.005118)	rpn_cls_loss: 0.000174 (0.000847)	rpn_loc_loss: 0.019167 (0.072023)	kp_hp_loss: 0.796254 (0.842250)	kp_hm_hp_loss: 100.165184 (72.844539)	kp_hp_offset_loss: 0.234907 (0.239465)	kp_loss: 101.196350 (73.926253)	siammask_loss: 101.219528 (74.013526)	kp_avg_acc: 0.000000 (0.015364)
[2019-08-12 14:39:44,592-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.178159 (0.191921)	data_time: 0.000168 (0.004425)	rpn_cls_loss: 0.000151 (0.000793)	rpn_loc_loss: 0.023670 (0.068451)	kp_hp_loss: 0.920017 (0.835756)	kp_hm_hp_loss: 108.952988 (73.083573)	kp_hp_offset_loss: 0.232306 (0.236395)	kp_loss: 110.105309 (74.155727)	siammask_loss: 110.133865 (74.238660)	kp_avg_acc: 0.000000 (0.015361)
[2019-08-12 14:39:46,844-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.131888 (0.187213)	data_time: 0.000176 (0.003906)	rpn_cls_loss: 0.000204 (0.000746)	rpn_loc_loss: 0.060030 (0.069989)	kp_hp_loss: 0.843508 (0.857212)	kp_hm_hp_loss: 35.198883 (70.978027)	kp_hp_offset_loss: 0.194342 (0.234675)	kp_loss: 36.236736 (72.069928)	siammask_loss: 36.308975 (72.154658)	kp_avg_acc: 0.000000 (0.013441)
[2019-08-12 14:39:49,183-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.148181 (0.184427)	data_time: 0.000168 (0.003503)	rpn_cls_loss: 0.000215 (0.000696)	rpn_loc_loss: 0.025916 (0.069717)	kp_hp_loss: 0.348734 (0.845732)	kp_hm_hp_loss: 124.045517 (71.424691)	kp_hp_offset_loss: 0.224113 (0.232273)	kp_loss: 124.618362 (72.502702)	siammask_loss: 124.649673 (72.587062)	kp_avg_acc: 0.058824 (0.013456)
[2019-08-12 14:39:51,489-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.138464 (0.181654)	data_time: 0.000138 (0.003179)	rpn_cls_loss: 0.000145 (0.000652)	rpn_loc_loss: 0.037287 (0.070575)	kp_hp_loss: 0.549369 (0.814994)	kp_hm_hp_loss: 125.077934 (73.264907)	kp_hp_offset_loss: 0.184184 (0.231172)	kp_loss: 125.811485 (74.311079)	siammask_loss: 125.856377 (74.396429)	kp_avg_acc: 0.000000 (0.012777)
[2019-08-12 15:01:25,550-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:01:25,559-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:01:25,562-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:01:25,562-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:01:25,566-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:01:28,936-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:01:28,974-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:01:29,060-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,061-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:01:29,066-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:01:29,144-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,144-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:01:29,145-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:01:29,147-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:01:29,269-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:01:29,271-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:01:29,274-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,274-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:01:29,275-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:01:29,277-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,278-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:01:29,278-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:01:34,212-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:01:34,522-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:01:34,523-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked'}
[2019-08-12 15:01:34,524-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:01:34,524-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:01:34,627-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:01:34,629-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:01:34,768-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:01:34,772-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:01:35,657-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:01:35,660-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:01:35,850-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:02:46,349-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:02:46,351-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:02:46,355-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:02:46,356-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:02:46,360-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:02:50,217-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:02:50,253-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:02:50,321-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,322-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:02:50,325-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:02:50,392-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,392-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:02:50,393-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:02:50,394-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:02:50,504-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:02:50,507-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:02:50,511-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,511-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:02:50,512-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:02:50,515-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,515-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:02:50,516-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:02:55,967-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:02:56,297-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:02:56,299-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked'}
[2019-08-12 15:02:56,299-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:02:56,300-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:02:56,367-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:02:56,369-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:02:56,529-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:02:56,533-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:02:57,050-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:02:57,053-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:02:57,244-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:03:02,204-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.140748 (0.400230)	data_time: 0.000166 (0.033980)	rpn_cls_loss: 0.000135 (0.000414)	rpn_loc_loss: 0.036662 (0.072379)	kp_hp_loss: 1.120600 (0.727918)	kp_hm_hp_loss: 54.676426 (82.483771)	kp_hp_offset_loss: 0.244146 (0.228625)	kp_loss: 56.041172 (83.440314)	siammask_loss: 56.085300 (83.527580)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 15:03:04,552-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.195757 (0.278082)	data_time: 0.000327 (0.017119)	rpn_cls_loss: 0.000119 (0.000302)	rpn_loc_loss: 0.032399 (0.065742)	kp_hp_loss: 0.628878 (0.813165)	kp_hm_hp_loss: 47.534119 (86.463098)	kp_hp_offset_loss: 0.256188 (0.231964)	kp_loss: 48.419186 (87.508215)	siammask_loss: 48.458183 (87.587413)	kp_avg_acc: 0.000000 (0.014792)
[2019-08-12 15:03:06,790-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.145156 (0.236453)	data_time: 0.000170 (0.011513)	rpn_cls_loss: 0.000381 (0.000333)	rpn_loc_loss: 0.114128 (0.063372)	kp_hp_loss: 0.833840 (0.760005)	kp_hm_hp_loss: 49.536846 (76.465381)	kp_hp_offset_loss: 0.251942 (0.230062)	kp_loss: 50.622627 (77.455436)	siammask_loss: 50.759960 (77.531820)	kp_avg_acc: 0.000000 (0.011944)
[2019-08-12 15:03:09,228-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.203085 (0.220548)	data_time: 0.000129 (0.008710)	rpn_cls_loss: 0.000181 (0.000295)	rpn_loc_loss: 0.023021 (0.062194)	kp_hp_loss: 1.741398 (0.765822)	kp_hm_hp_loss: 55.263466 (77.426666)	kp_hp_offset_loss: 0.199686 (0.230807)	kp_loss: 57.204548 (78.423273)	siammask_loss: 57.232353 (78.498208)	kp_avg_acc: 0.000000 (0.008958)
[2019-08-12 15:03:11,601-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.190102 (0.209358)	data_time: 0.000279 (0.007029)	rpn_cls_loss: 0.000275 (0.000350)	rpn_loc_loss: 0.041609 (0.070875)	kp_hp_loss: 2.388414 (0.839615)	kp_hm_hp_loss: 9.124386 (73.074136)	kp_hp_offset_loss: 0.317616 (0.234504)	kp_loss: 11.830416 (74.148237)	siammask_loss: 11.880621 (74.233648)	kp_avg_acc: 0.000000 (0.008500)
[2019-08-12 15:03:13,885-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.158451 (0.200227)	data_time: 0.000178 (0.005907)	rpn_cls_loss: 0.000656 (0.000351)	rpn_loc_loss: 0.039425 (0.069162)	kp_hp_loss: 0.888245 (0.838594)	kp_hm_hp_loss: 99.020035 (74.251107)	kp_hp_offset_loss: 0.253529 (0.235384)	kp_loss: 100.161812 (75.325065)	siammask_loss: 100.209778 (75.408423)	kp_avg_acc: 0.142857 (0.011857)
[2019-08-12 15:03:16,187-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.207536 (0.194475)	data_time: 0.000319 (0.005119)	rpn_cls_loss: 0.000208 (0.000498)	rpn_loc_loss: 0.043102 (0.067916)	kp_hp_loss: 0.600574 (0.870211)	kp_hm_hp_loss: 95.531624 (73.551074)	kp_hp_offset_loss: 0.220351 (0.239796)	kp_loss: 96.352547 (74.661063)	siammask_loss: 96.404480 (74.743076)	kp_avg_acc: 0.000000 (0.010164)
[2019-08-12 15:03:18,580-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.147676 (0.190740)	data_time: 0.000164 (0.004510)	rpn_cls_loss: 0.000148 (0.000462)	rpn_loc_loss: 0.048467 (0.066083)	kp_hp_loss: 0.284044 (0.854711)	kp_hm_hp_loss: 77.699448 (72.035577)	kp_hp_offset_loss: 0.192702 (0.236481)	kp_loss: 78.176193 (73.126746)	siammask_loss: 78.234497 (73.206530)	kp_avg_acc: 0.000000 (0.008893)
[2019-08-12 15:03:21,105-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.196226 (0.188362)	data_time: 0.000187 (0.004044)	rpn_cls_loss: 0.000299 (0.000437)	rpn_loc_loss: 0.063851 (0.066377)	kp_hp_loss: 0.280619 (0.826641)	kp_hm_hp_loss: 92.215988 (72.427805)	kp_hp_offset_loss: 0.204205 (0.235428)	kp_loss: 92.700813 (73.489855)	siammask_loss: 92.777733 (73.569969)	kp_avg_acc: 0.066667 (0.011060)
[2019-08-12 15:03:23,315-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.184535 (0.184891)	data_time: 0.000125 (0.003671)	rpn_cls_loss: 0.000165 (0.001521)	rpn_loc_loss: 0.043864 (0.065312)	kp_hp_loss: 0.393502 (0.856777)	kp_hm_hp_loss: 51.297249 (71.732139)	kp_hp_offset_loss: 0.226748 (0.234106)	kp_loss: 51.917500 (72.823003)	siammask_loss: 51.970303 (72.902923)	kp_avg_acc: 0.066667 (0.010620)
[2019-08-12 15:08:00,128-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:08:00,129-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:08:00,132-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:08:00,133-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:08:00,135-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:08:03,335-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:08:03,372-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:08:03,441-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,442-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:08:03,445-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:08:03,517-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,517-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:08:03,518-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:08:03,519-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:08:03,616-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:08:03,618-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:08:03,621-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,622-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:08:03,622-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:08:03,625-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,626-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:08:03,626-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:08:08,675-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:08:08,968-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:08:08,969-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked'}
[2019-08-12 15:08:08,970-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:08:08,970-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:08:09,038-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:08:09,040-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:08:09,175-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:08:09,179-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:08:09,515-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:08:09,519-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:08:09,714-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:08:14,539-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.170939 (0.400629)	data_time: 0.000144 (0.032960)	rpn_cls_loss: 0.000138 (0.002093)	rpn_loc_loss: 0.114451 (0.080689)	kp_hp_loss: 0.602804 (0.692243)	kp_hm_hp_loss: 37.737934 (84.371509)	kp_hp_offset_loss: 0.197565 (0.228222)	kp_loss: 38.538303 (85.291974)	siammask_loss: 38.675781 (85.390891)	kp_avg_acc: 0.000000 (0.006250)
[2019-08-12 15:08:17,278-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.161916 (0.294274)	data_time: 0.000300 (0.016659)	rpn_cls_loss: 0.000226 (0.001218)	rpn_loc_loss: 0.099335 (0.065501)	kp_hp_loss: 0.395643 (0.714342)	kp_hm_hp_loss: 47.036896 (74.971045)	kp_hp_offset_loss: 0.196698 (0.229372)	kp_loss: 47.629234 (75.914764)	siammask_loss: 47.748661 (75.994587)	kp_avg_acc: 0.076923 (0.031159)
[2019-08-12 15:08:19,740-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.167890 (0.251950)	data_time: 0.000138 (0.011211)	rpn_cls_loss: 0.000126 (0.000958)	rpn_loc_loss: 0.103054 (0.075180)	kp_hp_loss: 0.611658 (0.775913)	kp_hm_hp_loss: 28.417427 (78.601571)	kp_hp_offset_loss: 0.207917 (0.227449)	kp_loss: 29.237001 (79.604940)	siammask_loss: 29.360792 (79.696114)	kp_avg_acc: 0.000000 (0.022734)
[2019-08-12 15:08:22,471-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.200694 (0.236111)	data_time: 0.000214 (0.008495)	rpn_cls_loss: 0.000196 (0.000971)	rpn_loc_loss: 0.037147 (0.073552)	kp_hp_loss: 0.585749 (0.762823)	kp_hm_hp_loss: 64.429489 (82.798016)	kp_hp_offset_loss: 0.255297 (0.229845)	kp_loss: 65.270531 (83.790686)	siammask_loss: 65.315300 (83.879927)	kp_avg_acc: 0.000000 (0.022426)
[2019-08-12 15:08:25,069-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.169225 (0.224446)	data_time: 0.000249 (0.006870)	rpn_cls_loss: 0.013958 (0.001458)	rpn_loc_loss: 0.107788 (0.086745)	kp_hp_loss: 0.410050 (0.802919)	kp_hm_hp_loss: 59.156910 (77.596875)	kp_hp_offset_loss: 0.184358 (0.229888)	kp_loss: 59.751316 (78.629678)	siammask_loss: 59.894619 (78.735234)	kp_avg_acc: 0.076923 (0.020729)
[2019-08-12 15:08:27,446-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.181938 (0.214769)	data_time: 0.000214 (0.005770)	rpn_cls_loss: 0.000142 (0.001260)	rpn_loc_loss: 0.025086 (0.084627)	kp_hp_loss: 0.856028 (0.786112)	kp_hm_hp_loss: 80.952202 (81.318270)	kp_hp_offset_loss: 0.144654 (0.227905)	kp_loss: 81.952881 (82.332292)	siammask_loss: 81.983124 (82.435096)	kp_avg_acc: 0.000000 (0.019980)
[2019-08-12 15:08:29,886-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.168771 (0.208098)	data_time: 0.000163 (0.004982)	rpn_cls_loss: 0.000108 (0.001103)	rpn_loc_loss: 0.091770 (0.081300)	kp_hp_loss: 0.677464 (0.775696)	kp_hm_hp_loss: 54.161659 (81.343129)	kp_hp_offset_loss: 0.269445 (0.227280)	kp_loss: 55.108570 (82.346108)	siammask_loss: 55.218800 (82.444760)	kp_avg_acc: 0.000000 (0.018911)
[2019-08-12 15:08:32,213-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.138283 (0.202227)	data_time: 0.000134 (0.004400)	rpn_cls_loss: 0.000156 (0.000990)	rpn_loc_loss: 0.066921 (0.078249)	kp_hp_loss: 0.310825 (0.776900)	kp_hm_hp_loss: 79.874130 (80.066376)	kp_hp_offset_loss: 0.210273 (0.226052)	kp_loss: 80.395226 (81.069336)	siammask_loss: 80.475685 (81.164216)	kp_avg_acc: 0.000000 (0.017684)
[2019-08-12 15:08:34,165-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.131681 (0.194661)	data_time: 0.000143 (0.003949)	rpn_cls_loss: 0.000165 (0.000910)	rpn_loc_loss: 0.061836 (0.080246)	kp_hp_loss: 0.508553 (0.766435)	kp_hm_hp_loss: 60.162086 (78.192768)	kp_hp_offset_loss: 0.215275 (0.227542)	kp_loss: 60.885914 (79.186746)	siammask_loss: 60.960281 (79.283945)	kp_avg_acc: 0.000000 (0.019305)
[2019-08-12 15:08:36,041-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.131359 (0.188100)	data_time: 0.000105 (0.003575)	rpn_cls_loss: 0.000621 (0.001065)	rpn_loc_loss: 0.171905 (0.084002)	kp_hp_loss: 1.220737 (0.786281)	kp_hm_hp_loss: 62.967522 (77.896777)	kp_hp_offset_loss: 0.256254 (0.228801)	kp_loss: 64.444511 (78.911860)	siammask_loss: 64.651421 (79.013723)	kp_avg_acc: 0.000000 (0.018208)
[2019-08-12 15:21:56,016-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:21:56,017-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:21:56,022-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:21:56,023-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:21:56,027-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:21:59,607-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:21:59,647-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:21:59,725-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,725-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:21:59,731-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:21:59,808-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,809-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:21:59,810-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:21:59,811-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:21:59,932-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:21:59,934-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:21:59,937-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,937-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:21:59,938-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:21:59,941-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,941-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:21:59,941-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:22:05,269-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:22:05,569-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:05,571-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked'}
[2019-08-12 15:22:05,572-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:22:05,572-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:22:05,670-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:22:05,672-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:22:05,814-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:22:05,818-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:22:06,304-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:06,307-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:22:06,488-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:22:39,345-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:22:39,346-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:22:39,349-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:22:39,350-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:22:39,353-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:22:42,476-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:22:42,514-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:22:42,591-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,592-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:22:42,599-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:22:42,673-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,673-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:22:42,674-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:22:42,675-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:22:42,775-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:22:42,777-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:22:42,780-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,780-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:22:42,781-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:22:42,784-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,784-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:22:42,784-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:22:47,811-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:22:48,155-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:48,157-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked'}
[2019-08-12 15:22:48,157-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:22:48,157-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:22:48,258-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:22:48,260-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:22:48,404-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:22:48,408-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:22:48,916-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:48,919-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:22:49,159-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:23:22,834-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:23:22,835-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:23:22,838-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:23:22,839-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:23:22,842-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:23:26,102-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:23:26,138-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:23:26,205-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,206-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:23:26,208-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:23:26,276-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,277-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:23:26,277-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:23:26,279-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:23:26,373-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:23:26,375-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:23:26,378-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,379-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:23:26,379-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:23:26,382-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,382-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:23:26,383-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:23:31,683-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:23:32,029-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:23:32,031-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked'}
[2019-08-12 15:23:32,031-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:23:32,032-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:23:32,096-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:23:32,097-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:23:32,240-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:23:32,244-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:23:32,773-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:23:32,776-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:23:32,914-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:24:54,723-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:24:54,724-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:24:54,729-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:24:54,729-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:24:54,732-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:24:57,792-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:24:57,827-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:24:57,893-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:57,893-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:24:57,897-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:24:57,962-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:57,962-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:24:57,962-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:24:57,965-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:24:58,058-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:24:58,060-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:24:58,063-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:58,063-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:24:58,063-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:24:58,066-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:58,067-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:24:58,067-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:25:03,378-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:25:03,690-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:25:03,692-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked'}
[2019-08-12 15:25:03,693-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:25:03,693-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:25:03,781-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:25:03,783-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:25:03,945-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:25:03,950-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:25:04,392-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:25:04,394-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:25:04,574-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:25:09,230-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.121947 (0.394677)	data_time: 0.000093 (0.045129)	rpn_cls_loss: 0.000097 (0.001773)	rpn_loc_loss: 0.016023 (0.104702)	kp_hp_loss: 1.545159 (0.900409)	kp_hm_hp_loss: 8.402755 (10.659587)	kp_hp_offset_loss: 0.252228 (0.241730)	kp_loss: 10.200142 (11.801727)	siammask_loss: 10.219466 (11.929143)	kp_avg_acc: 0.000000 (0.005882)
[2019-08-12 15:25:11,351-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.153216 (0.270405)	data_time: 0.000215 (0.022683)	rpn_cls_loss: 0.000187 (0.000976)	rpn_loc_loss: 0.015274 (0.089393)	kp_hp_loss: 0.709229 (0.843649)	kp_hm_hp_loss: 11.115392 (11.227892)	kp_hp_offset_loss: 0.222155 (0.231842)	kp_loss: 12.046775 (12.303384)	siammask_loss: 12.065291 (12.411630)	kp_avg_acc: 0.000000 (0.006513)
[2019-08-12 15:25:13,557-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.158599 (0.231021)	data_time: 0.000259 (0.015224)	rpn_cls_loss: 0.000147 (0.000742)	rpn_loc_loss: 0.055960 (0.085319)	kp_hp_loss: 2.042840 (0.900450)	kp_hm_hp_loss: 9.028353 (11.443478)	kp_hp_offset_loss: 0.256560 (0.228324)	kp_loss: 11.327751 (12.572253)	siammask_loss: 11.395050 (12.675379)	kp_avg_acc: 0.000000 (0.006564)
[2019-08-12 15:25:15,713-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.163761 (0.210437)	data_time: 0.000136 (0.011491)	rpn_cls_loss: 0.000487 (0.000649)	rpn_loc_loss: 0.089464 (0.084901)	kp_hp_loss: 0.747005 (0.958973)	kp_hm_hp_loss: 16.499548 (11.737118)	kp_hp_offset_loss: 0.238866 (0.233254)	kp_loss: 17.485418 (12.929346)	siammask_loss: 17.593262 (13.031875)	kp_avg_acc: 0.000000 (0.012196)
[2019-08-12 15:25:17,884-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.171017 (0.198351)	data_time: 0.000167 (0.009243)	rpn_cls_loss: 0.000154 (0.000597)	rpn_loc_loss: 0.030194 (0.079283)	kp_hp_loss: 0.720440 (0.927783)	kp_hm_hp_loss: 13.423498 (11.681866)	kp_hp_offset_loss: 0.243821 (0.232588)	kp_loss: 14.387759 (12.842235)	siammask_loss: 14.424146 (12.937973)	kp_avg_acc: 0.000000 (0.011185)
[2019-08-12 15:25:19,996-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.126632 (0.189152)	data_time: 0.000127 (0.007754)	rpn_cls_loss: 0.002080 (0.000556)	rpn_loc_loss: 0.061759 (0.076226)	kp_hp_loss: 1.085974 (0.898151)	kp_hm_hp_loss: 8.162753 (11.799210)	kp_hp_offset_loss: 0.245059 (0.233758)	kp_loss: 9.493787 (12.931116)	siammask_loss: 9.569978 (13.023145)	kp_avg_acc: 0.000000 (0.010836)
[2019-08-12 15:25:22,130-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.141999 (0.183274)	data_time: 0.000133 (0.006685)	rpn_cls_loss: 0.000188 (0.000528)	rpn_loc_loss: 0.118341 (0.078330)	kp_hp_loss: 0.557124 (0.896884)	kp_hm_hp_loss: 11.726764 (11.939983)	kp_hp_offset_loss: 0.217857 (0.234115)	kp_loss: 12.501745 (13.070979)	siammask_loss: 12.643942 (13.165505)	kp_avg_acc: 0.000000 (0.009288)
[2019-08-12 15:25:24,391-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.140330 (0.179673)	data_time: 0.000113 (0.005889)	rpn_cls_loss: 0.000156 (0.000554)	rpn_loc_loss: 0.041330 (0.080180)	kp_hp_loss: 0.423752 (0.912232)	kp_hm_hp_loss: 12.467154 (11.740289)	kp_hp_offset_loss: 0.226278 (0.235163)	kp_loss: 13.117184 (12.887682)	siammask_loss: 13.166936 (12.984454)	kp_avg_acc: 0.000000 (0.009089)
[2019-08-12 15:25:26,660-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.143534 (0.177116)	data_time: 0.000140 (0.005289)	rpn_cls_loss: 0.000181 (0.000524)	rpn_loc_loss: 0.024455 (0.077730)	kp_hp_loss: 0.526730 (0.895965)	kp_hm_hp_loss: 17.129875 (11.943647)	kp_hp_offset_loss: 0.256643 (0.234397)	kp_loss: 17.913248 (13.074004)	siammask_loss: 17.942774 (13.167809)	kp_avg_acc: 0.000000 (0.011597)
[2019-08-12 15:25:29,105-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.195187 (0.176120)	data_time: 0.000345 (0.004795)	rpn_cls_loss: 0.000086 (0.000496)	rpn_loc_loss: 0.106074 (0.076584)	kp_hp_loss: 1.020174 (0.884013)	kp_hm_hp_loss: 11.593436 (11.909957)	kp_hp_offset_loss: 0.260519 (0.236057)	kp_loss: 12.874129 (13.030022)	siammask_loss: 13.001504 (13.122424)	kp_avg_acc: 0.000000 (0.011729)
[2019-08-12 15:46:02,337-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:46:02,338-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:46:02,356-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:46:02,357-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:46:02,442-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:46:06,597-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:46:06,640-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:46:06,727-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:06,727-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:06,741-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:46:06,824-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:06,825-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:06,826-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:46:06,855-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:46:07,027-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:46:07,029-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:46:07,032-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:07,033-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:07,033-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:46:07,036-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:07,037-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:07,037-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:46:13,283-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:46:13,937-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:46:13,938-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked'}
[2019-08-12 15:46:13,939-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:46:13,939-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:46:14,011-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:46:14,013-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:46:14,148-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:46:14,151-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:46:15,076-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:46:15,079-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:46:15,201-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:46:35,270-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:46:35,271-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:46:35,275-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:46:35,276-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:46:35,280-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:46:38,348-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:46:38,384-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:46:38,451-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,451-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:38,454-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:46:38,522-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,522-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:38,523-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:46:38,524-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:46:38,618-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:46:38,620-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:46:38,624-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,624-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:38,624-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:46:38,627-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,628-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:38,628-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:46:56,708-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:46:56,709-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:46:56,712-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:46:56,712-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:46:56,717-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:46:59,879-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:46:59,914-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:46:59,981-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:59,982-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:59,984-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:47:00,050-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:00,051-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:47:00,051-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:47:00,053-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:47:00,165-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:47:00,168-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:47:00,173-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:00,173-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:00,174-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:47:00,178-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:00,178-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:00,178-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:47:05,341-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:47:05,652-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:05,654-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked'}
[2019-08-12 15:47:05,654-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:47:05,655-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:47:05,714-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:47:05,716-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:47:05,858-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:47:05,862-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:47:06,261-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:06,264-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:47:06,398-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:47:38,391-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:47:38,392-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:47:38,396-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:47:38,397-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:47:38,402-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:47:41,905-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:47:41,953-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:47:42,041-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,042-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:47:42,047-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:47:42,142-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,142-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:47:42,143-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:47:42,145-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:47:42,275-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:47:42,277-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:47:42,280-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,281-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:42,281-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:47:42,285-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,285-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:42,285-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:47:47,551-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:47:47,892-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:47,894-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked'}
[2019-08-12 15:47:47,894-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:47:47,895-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:47:47,975-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:47:47,977-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:47:48,120-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:47:48,124-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:47:48,628-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:48,633-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:47:48,867-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:49:12,714-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:49:12,715-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:49:12,718-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:49:12,718-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:49:12,720-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:49:16,258-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:49:16,319-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:49:16,419-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,440-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:49:16,447-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:49:16,533-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,537-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:49:16,542-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:49:16,550-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:49:16,665-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:49:16,668-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:49:16,671-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,671-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:49:16,671-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:49:16,675-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,675-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:49:16,675-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:49:23,646-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:49:23,988-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:49:23,990-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.2.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked'}
[2019-08-12 15:49:23,990-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:49:23,991-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:49:24,092-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:49:24,094-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:49:24,234-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:49:24,297-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:49:26,537-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:49:26,540-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:49:26,782-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:55:39,563-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:55:39,564-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:55:39,566-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:55:39,567-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:55:39,569-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:55:42,430-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:55:42,465-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:55:42,532-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,533-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:55:42,535-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:55:42,601-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,601-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:55:42,602-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:55:42,616-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:55:42,709-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:55:42,711-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:55:42,714-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,715-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:55:42,715-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:55:42,718-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,718-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:55:42,719-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:55:48,134-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:55:48,489-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:55:48,491-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'bn1.num_batches_tracked'}
[2019-08-12 15:55:48,491-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:55:48,492-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:55:48,566-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:55:48,568-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:55:48,723-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:55:48,727-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:55:49,126-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:55:49,129-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:55:49,267-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:56:52,010-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:56:52,011-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:56:52,013-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:56:52,014-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:56:52,015-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:56:54,857-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:56:54,892-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:56:54,958-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:54,959-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:56:54,961-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:56:55,028-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:55,028-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:56:55,028-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:56:55,030-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:56:55,123-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:56:55,125-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:56:55,128-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:55,128-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:56:55,129-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:56:55,132-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:55,133-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:56:55,133-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:57:00,025-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:57:00,330-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:00,331-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked'}
[2019-08-12 15:57:00,332-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:57:00,332-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:57:00,404-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:57:00,405-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:57:00,560-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:57:00,565-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:57:00,971-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:00,973-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:57:01,112-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:57:49,333-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:57:49,334-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:57:49,336-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:57:49,337-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:57:49,339-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:57:52,172-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:57:52,207-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:57:52,274-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,274-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:57:52,277-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:57:52,343-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,344-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:57:52,344-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:57:52,346-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:57:52,439-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:57:52,441-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:57:52,446-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,447-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:57:52,447-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:57:52,450-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,450-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:57:52,451-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:57:57,406-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:57:57,749-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:57,751-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 15:57:57,751-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:57:57,752-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:57:57,821-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:57:57,822-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:57:57,976-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:57:57,980-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:57:58,375-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:58,378-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:57:58,514-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:59:16,043-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:59:16,044-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:59:16,046-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:59:16,046-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:59:16,048-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:59:18,894-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:59:18,928-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:59:18,993-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:18,994-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:59:18,996-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:59:19,061-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:19,061-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:59:19,061-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:59:19,063-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:59:19,155-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:59:19,157-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:59:19,160-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:19,161-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:59:19,161-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:59:19,164-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:19,164-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:59:19,164-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:59:24,226-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:59:24,575-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:59:24,576-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked'}
[2019-08-12 15:59:24,577-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:59:24,577-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:59:24,648-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:59:24,650-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:59:24,805-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:59:24,809-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:59:25,195-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:59:25,197-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:59:25,336-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:00:29,181-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:00:29,182-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:00:29,185-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:00:29,185-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:00:29,187-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:00:32,059-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:00:32,094-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:00:32,160-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,161-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:00:32,163-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:00:32,230-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,230-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:00:32,231-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:00:32,232-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:00:32,325-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:00:32,327-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:00:32,330-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,331-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:00:32,331-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:00:32,334-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,334-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:00:32,334-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:00:37,085-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:00:37,427-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:00:37,429-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 16:00:37,429-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:00:37,429-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:00:37,501-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:00:37,502-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:00:37,657-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:00:37,662-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:00:38,047-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:00:38,049-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:00:38,188-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:01:19,266-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:01:19,267-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:01:19,270-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:01:19,270-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:01:19,272-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:01:22,119-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:01:22,153-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:01:22,219-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,219-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:01:22,221-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:01:22,286-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,286-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:01:22,287-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:01:22,288-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:01:22,382-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:01:22,384-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:01:22,392-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,392-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:01:22,393-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:01:22,395-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,396-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:01:22,396-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:01:27,099-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:01:27,432-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:01:27,434-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked'}
[2019-08-12 16:01:27,435-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:01:27,435-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:01:27,505-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:01:27,506-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:01:27,661-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:01:27,666-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:01:28,059-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:01:28,061-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:01:28,199-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:03:29,870-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:03:29,871-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:03:29,873-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:03:29,874-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:03:29,875-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:03:32,723-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:03:32,758-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:03:32,822-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,823-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:03:32,825-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:03:32,890-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,890-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:03:32,891-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:03:32,892-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:03:32,985-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:03:32,987-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:03:32,990-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,991-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:03:32,991-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:03:32,994-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,994-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:03:32,995-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:03:37,771-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:03:38,114-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:03:38,116-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked'}
[2019-08-12 16:03:38,116-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:03:38,117-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:03:38,187-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:03:38,189-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:03:38,343-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:03:38,348-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:03:38,740-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:03:38,742-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:03:38,883-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:04:39,051-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:04:39,052-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:04:39,055-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:04:39,055-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:04:39,057-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:04:41,926-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:04:41,960-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:04:42,025-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,025-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:04:42,028-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:04:42,092-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,092-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:04:42,093-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:04:42,094-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:04:42,186-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:04:42,188-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:04:42,191-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,192-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:04:42,192-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:04:42,195-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,195-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:04:42,196-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:04:47,574-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:04:47,890-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:04:47,892-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked'}
[2019-08-12 16:04:47,893-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:04:47,893-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:04:47,967-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:04:47,968-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:04:48,125-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:04:48,130-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:04:48,510-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:04:48,513-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:04:48,651-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:07:32,608-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:07:32,609-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:07:32,611-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:07:32,611-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:07:32,613-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:07:35,449-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:07:35,485-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:07:35,551-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,552-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:07:35,555-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:07:35,621-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,622-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:07:35,622-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:07:35,623-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:07:35,716-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:07:35,718-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:07:35,721-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,722-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:07:35,722-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:07:35,725-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,725-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:07:35,726-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:07:40,556-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:07:40,895-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:07:40,897-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked'}
[2019-08-12 16:07:40,897-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:07:40,898-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:07:40,978-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:07:40,980-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:07:41,140-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:07:41,144-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:07:41,548-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:07:41,550-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:07:41,699-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:09:48,235-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:09:48,236-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:09:48,238-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:09:48,239-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:09:48,240-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:09:51,096-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:09:51,131-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:09:51,198-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,198-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:09:51,201-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:09:51,267-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,268-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:09:51,268-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:09:51,269-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:09:51,363-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:09:51,365-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:09:51,371-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,372-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:09:51,372-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:09:51,375-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,376-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:09:51,376-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:09:56,019-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:09:56,307-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:09:56,309-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 16:09:56,309-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:09:56,309-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:09:56,379-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:09:56,380-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:09:56,534-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:09:56,538-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:09:56,926-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:09:56,929-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:09:57,061-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:10:56,018-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:10:56,019-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:10:56,021-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:10:56,022-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:10:56,023-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:10:58,869-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:10:58,904-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:10:58,971-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:58,971-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:10:58,974-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:10:59,040-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:59,040-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:10:59,041-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:10:59,042-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:10:59,134-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:10:59,136-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:10:59,139-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:59,139-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:10:59,140-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:10:59,143-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:59,143-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:10:59,144-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:11:03,961-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:11:04,289-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:04,291-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked'}
[2019-08-12 16:11:04,292-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:11:04,292-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:11:04,363-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:11:04,365-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:11:04,521-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:11:04,525-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:11:04,915-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:04,917-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:11:05,058-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:11:48,625-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:11:48,626-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:11:48,628-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:11:48,628-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:11:48,630-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:11:51,473-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:11:51,508-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:11:51,574-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,575-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:11:51,577-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:11:51,643-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,644-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:11:51,644-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:11:51,645-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:11:51,739-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:11:51,741-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:11:51,744-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,744-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:11:51,745-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:11:51,748-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,748-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:11:51,748-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:11:56,420-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:11:56,748-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:56,750-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked'}
[2019-08-12 16:11:56,750-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:11:56,751-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:11:56,821-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:11:56,823-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:11:56,981-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:11:56,985-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:11:57,354-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:57,356-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:11:57,495-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:14:21,634-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:14:21,635-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:14:21,638-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:14:21,638-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:14:21,668-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:14:24,628-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:14:24,663-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:14:24,730-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,730-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:14:24,733-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:14:24,799-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,800-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:14:24,800-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:14:24,801-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:14:24,895-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:14:24,897-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:14:24,900-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,900-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:14:24,900-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:14:24,904-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,904-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:14:24,905-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:14:29,406-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:14:29,691-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:14:29,692-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked'}
[2019-08-12 16:14:29,693-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:14:29,693-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:14:29,764-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:14:29,765-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:14:29,931-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:14:29,935-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:14:30,311-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:14:30,314-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:14:30,450-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:15:16,109-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:15:16,110-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:15:16,112-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:15:16,112-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:15:16,114-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:15:18,935-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:15:18,970-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:15:19,036-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,037-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:15:19,039-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:15:19,120-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,120-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:15:19,121-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:15:19,122-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:15:19,215-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:15:19,217-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:15:19,220-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,220-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:15:19,220-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:15:19,223-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,224-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:15:19,224-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:15:23,699-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:15:24,004-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:15:24,006-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 16:15:24,006-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:15:24,007-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:15:24,077-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:15:24,079-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:15:24,237-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:15:24,241-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:15:24,612-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:15:24,614-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:15:24,762-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:17:17,223-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:17:17,224-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:17:17,226-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:17:17,227-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:17:17,229-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:17:20,068-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:17:20,104-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:17:20,171-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,171-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:17:20,173-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:17:20,240-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,240-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:17:20,241-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:17:20,242-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:17:20,335-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:17:20,337-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:17:20,340-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,340-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:17:20,341-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:17:20,344-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,344-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:17:20,344-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:17:24,844-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:17:25,159-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:17:25,161-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked'}
[2019-08-12 16:17:25,161-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:17:25,162-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:17:25,233-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:17:25,235-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:17:25,390-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:17:25,395-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:17:25,792-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:17:25,794-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:17:25,935-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:18:45,978-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:18:45,978-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:18:45,981-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:18:45,981-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:18:45,983-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:18:48,831-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:18:48,867-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:18:48,934-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:48,935-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:18:48,937-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:18:49,004-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:49,004-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:18:49,004-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:18:49,006-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:18:49,098-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:18:49,100-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:18:49,103-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:49,103-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:18:49,104-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:18:49,107-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:49,108-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:18:49,108-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:18:53,706-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:18:54,038-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:18:54,039-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked'}
[2019-08-12 16:18:54,040-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:18:54,040-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:18:54,110-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:18:54,112-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:18:54,266-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:18:54,270-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:18:54,657-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:18:54,659-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:18:54,818-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:21:33,614-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:21:33,615-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:21:33,617-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:21:33,618-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:21:33,619-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:21:36,473-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:21:36,507-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:21:36,572-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,573-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:21:36,576-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:21:36,640-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,640-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:21:36,641-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:21:36,642-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:21:36,735-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:21:36,737-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:21:36,740-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,740-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:21:36,740-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:21:36,743-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,744-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:21:36,744-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:23:23,047-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:23:23,048-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:23:23,050-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:23:23,051-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:23:23,052-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:23:25,954-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:23:25,990-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:23:26,058-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,059-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:23:26,061-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:23:26,128-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,128-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:23:26,129-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:23:26,130-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:23:26,225-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:23:26,227-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:23:26,230-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,230-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:23:26,231-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:23:26,234-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,234-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:23:26,235-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:23:31,076-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:23:31,357-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:23:31,359-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.3.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked'}
[2019-08-12 16:23:31,359-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:23:31,359-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:23:31,430-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:23:31,432-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:23:31,586-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:23:31,590-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:23:32,032-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:23:32,034-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:23:32,172-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:23:37,467-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.045841 (0.342821)	data_time: 0.000313 (0.084665)	rpn_cls_loss: 0.000217 (0.000191)	rpn_loc_loss: 0.035426 (0.052584)	kp_hp_loss: 0.960834 (1.089588)	kp_hm_hp_loss: 13.866245 (12.546936)	kp_hp_offset_loss: 0.295507 (0.237282)	kp_loss: 15.122585 (13.873807)	siammask_loss: 15.165314 (13.937098)	kp_avg_acc: 0.000000 (0.004167)
[2019-08-12 16:23:39,035-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.038618 (0.191688)	data_time: 0.000096 (0.042424)	rpn_cls_loss: 0.000305 (0.000277)	rpn_loc_loss: 0.044541 (0.057875)	kp_hp_loss: 0.910426 (1.075199)	kp_hm_hp_loss: 10.194829 (12.216419)	kp_hp_offset_loss: 0.206408 (0.238275)	kp_loss: 11.311663 (13.529895)	siammask_loss: 11.365417 (13.599621)	kp_avg_acc: 0.083333 (0.015795)
[2019-08-12 16:23:40,601-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.038765 (0.141542)	data_time: 0.000103 (0.028338)	rpn_cls_loss: 0.000149 (0.000264)	rpn_loc_loss: 0.086712 (0.062121)	kp_hp_loss: 0.552977 (1.025259)	kp_hm_hp_loss: 12.308841 (12.326044)	kp_hp_offset_loss: 0.183645 (0.234851)	kp_loss: 13.045463 (13.586157)	siammask_loss: 13.149666 (13.660964)	kp_avg_acc: 0.058824 (0.023324)
[2019-08-12 16:23:41,894-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.038659 (0.116206)	data_time: 0.000103 (0.021296)	rpn_cls_loss: 0.000143 (0.000245)	rpn_loc_loss: 0.036991 (0.064067)	kp_hp_loss: 0.579290 (0.927301)	kp_hm_hp_loss: 14.941532 (12.832788)	kp_hp_offset_loss: 0.184776 (0.235225)	kp_loss: 15.705599 (13.995317)	siammask_loss: 15.750132 (14.072441)	kp_avg_acc: 0.000000 (0.020978)
[2019-08-12 16:23:43,523-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.038563 (0.101162)	data_time: 0.000081 (0.017074)	rpn_cls_loss: 0.000170 (0.000229)	rpn_loc_loss: 0.029155 (0.063505)	kp_hp_loss: 0.847469 (0.917918)	kp_hm_hp_loss: 10.810611 (12.638325)	kp_hp_offset_loss: 0.236964 (0.236463)	kp_loss: 11.895044 (13.792710)	siammask_loss: 11.930201 (13.869144)	kp_avg_acc: 0.000000 (0.019902)
[2019-08-12 16:23:45,174-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.041895 (0.091297)	data_time: 0.000080 (0.014261)	rpn_cls_loss: 0.000200 (0.000394)	rpn_loc_loss: 0.027336 (0.072173)	kp_hp_loss: 0.415967 (0.903253)	kp_hm_hp_loss: 12.816203 (12.709300)	kp_hp_offset_loss: 0.217860 (0.236692)	kp_loss: 13.450030 (13.849247)	siammask_loss: 13.483033 (13.936248)	kp_avg_acc: 0.000000 (0.018954)
[2019-08-12 16:23:46,642-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.042404 (0.084026)	data_time: 0.000080 (0.012248)	rpn_cls_loss: 0.000251 (0.000362)	rpn_loc_loss: 0.023163 (0.067451)	kp_hp_loss: 0.890947 (0.889011)	kp_hm_hp_loss: 11.622685 (12.836085)	kp_hp_offset_loss: 0.293537 (0.237478)	kp_loss: 12.807169 (13.962578)	siammask_loss: 12.835215 (14.043879)	kp_avg_acc: 0.000000 (0.020822)
[2019-08-12 16:23:48,461-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.046148 (0.078703)	data_time: 0.000095 (0.010738)	rpn_cls_loss: 0.000128 (0.000378)	rpn_loc_loss: 0.066848 (0.067847)	kp_hp_loss: 0.567369 (0.900905)	kp_hm_hp_loss: 11.720284 (12.765845)	kp_hp_offset_loss: 0.238576 (0.238705)	kp_loss: 12.526228 (13.905460)	siammask_loss: 12.606574 (13.987253)	kp_avg_acc: 0.000000 (0.019105)
[2019-08-12 16:23:49,967-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.038634 (0.074452)	data_time: 0.000088 (0.009564)	rpn_cls_loss: 0.000303 (0.000367)	rpn_loc_loss: 0.017673 (0.067168)	kp_hp_loss: 0.701123 (0.877543)	kp_hm_hp_loss: 12.308345 (12.657638)	kp_hp_offset_loss: 0.264181 (0.239191)	kp_loss: 13.273649 (13.774373)	siammask_loss: 13.295159 (13.855342)	kp_avg_acc: 0.000000 (0.019453)
[2019-08-12 16:23:52,728-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.038913 (0.071124)	data_time: 0.000116 (0.008626)	rpn_cls_loss: 0.000179 (0.000360)	rpn_loc_loss: 0.101718 (0.065936)	kp_hp_loss: 0.738353 (0.849333)	kp_hm_hp_loss: 13.685698 (12.563921)	kp_hp_offset_loss: 0.265692 (0.237377)	kp_loss: 14.689743 (13.650632)	siammask_loss: 14.811983 (13.730115)	kp_avg_acc: 0.000000 (0.018800)
[2019-08-12 16:41:56,949-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:41:56,950-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:41:56,952-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:41:56,952-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:41:57,006-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:41:59,967-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:42:00,003-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:42:00,069-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,070-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:42:00,072-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:42:00,161-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,161-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:42:00,162-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:42:00,163-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:42:00,256-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:42:00,258-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:42:00,261-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,261-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:42:00,262-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:42:00,265-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,265-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:42:00,265-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:42:06,080-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:42:06,394-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:42:06,395-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked'}
[2019-08-12 16:42:06,396-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:42:06,396-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:42:06,468-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:42:06,470-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:42:06,626-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:42:06,631-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:42:07,035-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:42:07,037-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:42:07,176-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:42:11,926-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.038357 (0.312928)	data_time: 0.000093 (0.059280)	rpn_cls_loss: 0.000199 (0.000255)	rpn_loc_loss: 0.016587 (0.062510)	kp_hp_loss: 1.572320 (2.646304)	kp_hm_hp_loss: 12.100088 (13.495801)	kp_hp_offset_loss: 0.234235 (0.263063)	kp_loss: 13.906643 (16.405167)	siammask_loss: 13.926746 (16.480433)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:13,954-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.037217 (0.181619)	data_time: 0.000087 (0.029723)	rpn_cls_loss: 0.000252 (0.000297)	rpn_loc_loss: 0.080600 (0.068906)	kp_hp_loss: 4.225136 (2.528386)	kp_hm_hp_loss: 1.688396 (11.568309)	kp_hp_offset_loss: 0.297855 (0.252539)	kp_loss: 6.211387 (14.349236)	siammask_loss: 6.308360 (14.432217)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:15,523-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.041799 (0.134026)	data_time: 0.000101 (0.019871)	rpn_cls_loss: 0.000368 (0.000258)	rpn_loc_loss: 0.041675 (0.063076)	kp_hp_loss: 4.103624 (2.608901)	kp_hm_hp_loss: 4.762013 (10.042361)	kp_hp_offset_loss: 0.309611 (0.254520)	kp_loss: 9.175248 (12.905782)	siammask_loss: 9.225627 (12.981729)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:17,133-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.042481 (0.110497)	data_time: 0.000212 (0.014946)	rpn_cls_loss: 0.001453 (0.000634)	rpn_loc_loss: 0.000000 (0.076171)	kp_hp_loss: 4.368427 (2.647400)	kp_hm_hp_loss: 33.690601 (10.652176)	kp_hp_offset_loss: 0.289060 (0.257592)	kp_loss: 38.348087 (13.557169)	siammask_loss: 38.349541 (13.649206)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:18,631-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.041957 (0.096224)	data_time: 0.000111 (0.011998)	rpn_cls_loss: 0.000148 (0.000541)	rpn_loc_loss: 0.013671 (0.074899)	kp_hp_loss: 1.519559 (2.632750)	kp_hm_hp_loss: 10.385964 (10.886084)	kp_hp_offset_loss: 0.261828 (0.257984)	kp_loss: 12.167351 (13.776818)	siammask_loss: 12.183904 (13.867238)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:20,915-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.161570 (0.088933)	data_time: 0.000126 (0.010031)	rpn_cls_loss: 0.000702 (0.000506)	rpn_loc_loss: 0.136987 (0.073284)	kp_hp_loss: 3.209130 (2.669277)	kp_hm_hp_loss: 47.504002 (11.398777)	kp_hp_offset_loss: 0.242864 (0.258057)	kp_loss: 50.955994 (14.326111)	siammask_loss: 51.121078 (14.414557)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:23,500-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.037985 (0.083489)	data_time: 0.000092 (0.008626)	rpn_cls_loss: 0.000229 (0.001036)	rpn_loc_loss: 0.052444 (0.076887)	kp_hp_loss: 5.805024 (2.724031)	kp_hm_hp_loss: 4.056291 (11.956485)	kp_hp_offset_loss: 0.265025 (0.256054)	kp_loss: 10.126340 (14.936569)	siammask_loss: 10.189502 (15.029869)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:25,141-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.038351 (0.077884)	data_time: 0.000085 (0.007568)	rpn_cls_loss: 0.000128 (0.000990)	rpn_loc_loss: 0.024057 (0.076809)	kp_hp_loss: 2.635266 (2.695992)	kp_hm_hp_loss: 20.473169 (12.628742)	kp_hp_offset_loss: 0.235012 (0.253833)	kp_loss: 23.343447 (15.578566)	siammask_loss: 23.372442 (15.671726)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:26,704-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.038125 (0.073510)	data_time: 0.000084 (0.006745)	rpn_cls_loss: 0.001602 (0.000924)	rpn_loc_loss: 0.162757 (0.079859)	kp_hp_loss: 2.219207 (2.716985)	kp_hm_hp_loss: 6.689900 (11.984539)	kp_hp_offset_loss: 0.243809 (0.253902)	kp_loss: 9.152917 (14.955425)	siammask_loss: 9.349828 (15.052180)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:28,507-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.039775 (0.070121)	data_time: 0.000082 (0.006087)	rpn_cls_loss: 0.000167 (0.000850)	rpn_loc_loss: 0.036625 (0.077114)	kp_hp_loss: 2.084182 (2.708215)	kp_hm_hp_loss: 15.231901 (12.196665)	kp_hp_offset_loss: 0.231683 (0.254729)	kp_loss: 17.547766 (15.159606)	siammask_loss: 17.591883 (15.252991)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:43:52,217-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:43:52,218-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:43:52,220-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:43:52,220-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:43:52,222-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:43:55,113-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:43:55,149-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:43:55,215-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,216-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:43:55,218-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:43:55,284-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,284-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:43:55,285-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:43:55,286-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:43:55,379-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:43:55,381-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:43:55,384-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,385-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:43:55,385-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:43:55,388-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,388-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:43:55,389-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:44:00,131-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:44:00,426-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:44:00,428-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked'}
[2019-08-12 16:44:00,428-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:44:00,428-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:44:00,500-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:44:00,502-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:44:00,639-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:44:00,643-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:44:01,033-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:44:01,035-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:44:01,168-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:44:04,577-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.038593 (0.268734)	data_time: 0.000096 (0.032381)	rpn_cls_loss: 0.000286 (0.000282)	rpn_loc_loss: 0.020254 (0.083946)	kp_hp_loss: 1.825029 (2.156980)	kp_hm_hp_loss: 3.100801 (5.143991)	kp_hp_offset_loss: 0.227217 (0.247520)	kp_loss: 5.153048 (7.548490)	siammask_loss: 5.177639 (7.649509)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:05,577-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.042124 (0.154377)	data_time: 0.000094 (0.016291)	rpn_cls_loss: 0.051104 (0.002788)	rpn_loc_loss: 0.534351 (0.091568)	kp_hp_loss: 1.541786 (2.130265)	kp_hm_hp_loss: 5.000666 (5.989731)	kp_hp_offset_loss: 0.228614 (0.241163)	kp_loss: 6.771066 (8.361159)	siammask_loss: 7.463391 (8.473829)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:06,569-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.037455 (0.116045)	data_time: 0.000085 (0.010920)	rpn_cls_loss: 0.000170 (0.002131)	rpn_loc_loss: 0.041071 (0.080991)	kp_hp_loss: 2.007964 (2.392360)	kp_hm_hp_loss: 0.680845 (6.643158)	kp_hp_offset_loss: 0.289658 (0.243053)	kp_loss: 2.978467 (9.278571)	siammask_loss: 3.027922 (9.377891)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:07,531-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.037516 (0.096586)	data_time: 0.000080 (0.008229)	rpn_cls_loss: 0.000175 (0.001700)	rpn_loc_loss: 0.050899 (0.078590)	kp_hp_loss: 3.518495 (2.418401)	kp_hm_hp_loss: 7.405460 (6.484499)	kp_hp_offset_loss: 0.178339 (0.244364)	kp_loss: 11.102294 (9.147265)	siammask_loss: 11.163548 (9.243272)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:08,491-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.038097 (0.084973)	data_time: 0.000157 (0.006614)	rpn_cls_loss: 0.000199 (0.001400)	rpn_loc_loss: 0.063911 (0.075052)	kp_hp_loss: 1.699629 (2.390616)	kp_hm_hp_loss: 5.183466 (6.461704)	kp_hp_offset_loss: 0.222737 (0.243725)	kp_loss: 7.105833 (9.096045)	siammask_loss: 7.182724 (9.187508)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:09,472-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.038266 (0.077262)	data_time: 0.000095 (0.005539)	rpn_cls_loss: 0.000224 (0.001253)	rpn_loc_loss: 0.047495 (0.077198)	kp_hp_loss: 1.814422 (2.309760)	kp_hm_hp_loss: 0.803877 (6.217119)	kp_hp_offset_loss: 0.246048 (0.245296)	kp_loss: 2.864347 (8.772175)	siammask_loss: 2.921566 (8.866066)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:10,473-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.038373 (0.071833)	data_time: 0.000091 (0.004774)	rpn_cls_loss: 0.000383 (0.001103)	rpn_loc_loss: 0.093217 (0.073015)	kp_hp_loss: 3.125312 (2.322117)	kp_hm_hp_loss: 4.292025 (6.243295)	kp_hp_offset_loss: 0.269195 (0.245349)	kp_loss: 7.686532 (8.810762)	siammask_loss: 7.798776 (8.899483)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:11,470-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.037627 (0.067755)	data_time: 0.000090 (0.004199)	rpn_cls_loss: 0.002843 (0.001020)	rpn_loc_loss: 0.048251 (0.072348)	kp_hp_loss: 1.846735 (2.310341)	kp_hm_hp_loss: 4.945458 (6.096478)	kp_hp_offset_loss: 0.214162 (0.245969)	kp_loss: 7.006355 (8.652789)	siammask_loss: 7.067099 (8.740627)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:12,448-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.037400 (0.064564)	data_time: 0.000090 (0.003751)	rpn_cls_loss: 0.000090 (0.000934)	rpn_loc_loss: 0.060754 (0.071970)	kp_hp_loss: 2.163992 (2.336227)	kp_hm_hp_loss: 19.177773 (6.085534)	kp_hp_offset_loss: 0.229111 (0.246615)	kp_loss: 21.570875 (8.668378)	siammask_loss: 21.643869 (8.755675)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:13,446-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.037658 (0.062067)	data_time: 0.000098 (0.003396)	rpn_cls_loss: 0.002068 (0.001024)	rpn_loc_loss: 0.067924 (0.069449)	kp_hp_loss: 3.522949 (2.361504)	kp_hm_hp_loss: 7.163404 (5.829415)	kp_hp_offset_loss: 0.242416 (0.246176)	kp_loss: 10.928767 (8.437097)	siammask_loss: 11.012344 (8.521460)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:52,060-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:44:52,061-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:44:52,063-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:44:52,064-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:44:52,066-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:44:54,926-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:44:54,964-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:44:55,031-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,031-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:44:55,034-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:44:55,123-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,124-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:44:55,124-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:44:55,125-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:44:55,219-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:44:55,221-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:44:55,224-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,224-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:44:55,225-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:44:55,228-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,228-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:44:55,228-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:45:00,250-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:45:00,572-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:45:00,573-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked'}
[2019-08-12 16:45:00,574-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:45:00,574-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:45:00,645-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:45:00,647-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:45:00,802-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:45:00,806-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:45:01,203-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:45:01,205-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:45:01,344-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:45:04,914-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.038648 (0.280942)	data_time: 0.000106 (0.035606)	rpn_cls_loss: 0.000129 (0.000178)	rpn_loc_loss: 0.026211 (0.063009)	kp_hp_loss: 1.939114 (1.868078)	kp_hm_hp_loss: 12.402015 (10.209191)	kp_hp_offset_loss: 0.208335 (0.251395)	kp_loss: 14.549463 (12.328663)	siammask_loss: 14.581045 (12.404453)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:05,948-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.038466 (0.160309)	data_time: 0.000104 (0.017895)	rpn_cls_loss: 0.000206 (0.000225)	rpn_loc_loss: 0.032595 (0.060288)	kp_hp_loss: 1.520609 (2.056936)	kp_hm_hp_loss: 9.298985 (8.836536)	kp_hp_offset_loss: 0.209000 (0.245142)	kp_loss: 11.028595 (11.138612)	siammask_loss: 11.067915 (11.211184)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:06,933-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.041231 (0.119775)	data_time: 0.000099 (0.012002)	rpn_cls_loss: 0.000149 (0.000226)	rpn_loc_loss: 0.047063 (0.066403)	kp_hp_loss: 1.800297 (2.014049)	kp_hm_hp_loss: 8.592783 (9.271257)	kp_hp_offset_loss: 0.263151 (0.251157)	kp_loss: 10.656230 (11.536459)	siammask_loss: 10.712855 (11.616372)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:07,913-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.038542 (0.099620)	data_time: 0.000081 (0.009042)	rpn_cls_loss: 0.000203 (0.000216)	rpn_loc_loss: 0.030823 (0.065386)	kp_hp_loss: 2.632777 (2.024886)	kp_hm_hp_loss: 7.959931 (8.939496)	kp_hp_offset_loss: 0.239265 (0.253953)	kp_loss: 10.831974 (11.218332)	siammask_loss: 10.869165 (11.297014)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:08,900-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.042074 (0.087622)	data_time: 0.000087 (0.007266)	rpn_cls_loss: 0.000339 (0.000226)	rpn_loc_loss: 0.053087 (0.063761)	kp_hp_loss: 1.930111 (2.009698)	kp_hm_hp_loss: 8.983751 (8.883228)	kp_hp_offset_loss: 0.307276 (0.255391)	kp_loss: 11.221138 (11.148313)	siammask_loss: 11.285182 (11.225054)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:09,942-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.056764 (0.079851)	data_time: 0.000139 (0.006083)	rpn_cls_loss: 0.000234 (0.000774)	rpn_loc_loss: 0.086050 (0.063779)	kp_hp_loss: 1.742515 (1.998234)	kp_hm_hp_loss: 6.460357 (8.748810)	kp_hp_offset_loss: 0.273864 (0.253320)	kp_loss: 8.476736 (11.000360)	siammask_loss: 8.580231 (11.077671)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:10,899-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.038211 (0.074029)	data_time: 0.000084 (0.005238)	rpn_cls_loss: 0.000153 (0.000699)	rpn_loc_loss: 0.083366 (0.063049)	kp_hp_loss: 1.201827 (1.991495)	kp_hm_hp_loss: 15.244018 (8.734784)	kp_hp_offset_loss: 0.209786 (0.253074)	kp_loss: 16.655630 (10.979351)	siammask_loss: 16.755823 (11.055710)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:11,904-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.038969 (0.069815)	data_time: 0.000084 (0.004608)	rpn_cls_loss: 0.000176 (0.000644)	rpn_loc_loss: 0.029622 (0.064486)	kp_hp_loss: 1.950254 (1.971025)	kp_hm_hp_loss: 7.692065 (8.723560)	kp_hp_offset_loss: 0.265974 (0.252691)	kp_loss: 9.908293 (10.947273)	siammask_loss: 9.944016 (11.025301)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:12,935-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.039254 (0.066548)	data_time: 0.000087 (0.004116)	rpn_cls_loss: 0.000131 (0.000601)	rpn_loc_loss: 0.085678 (0.065571)	kp_hp_loss: 2.088823 (1.983522)	kp_hm_hp_loss: 7.142957 (8.807599)	kp_hp_offset_loss: 0.259775 (0.249974)	kp_loss: 9.491554 (11.041092)	siammask_loss: 9.594500 (11.120380)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:13,928-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.038281 (0.063972)	data_time: 0.000081 (0.003726)	rpn_cls_loss: 0.000259 (0.000562)	rpn_loc_loss: 0.139443 (0.068122)	kp_hp_loss: 2.582417 (1.988174)	kp_hm_hp_loss: 11.306526 (8.761306)	kp_hp_offset_loss: 0.275236 (0.250139)	kp_loss: 14.164179 (10.999615)	siammask_loss: 14.331770 (11.081925)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:50:55,927-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:50:55,928-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:50:55,930-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:50:55,931-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:50:55,932-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:50:58,778-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:50:58,813-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:50:58,880-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:58,880-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:50:58,883-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:50:58,949-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:58,950-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:50:58,950-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:50:58,951-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:50:59,045-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:50:59,048-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:50:59,051-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:59,051-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:50:59,051-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:50:59,054-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:59,055-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:50:59,055-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:51:03,598-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:51:03,897-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:51:03,898-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked'}
[2019-08-12 16:51:03,899-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:51:03,899-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:51:03,968-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:51:03,969-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:51:04,123-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:51:04,127-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:51:04,519-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:51:04,521-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:51:04,655-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:51:08,077-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.039145 (0.271984)	data_time: 0.000097 (0.031041)	rpn_cls_loss: 0.000220 (0.000180)	rpn_loc_loss: 0.108612 (0.075784)	kp_hp_loss: 0.475620 (0.882458)	kp_hm_hp_loss: 12.500264 (11.388329)	kp_hp_offset_loss: 0.257121 (0.248028)	kp_loss: 13.233005 (12.518815)	siammask_loss: 13.363559 (12.609937)	kp_avg_acc: 0.083333 (0.041234)
[2019-08-12 16:51:09,073-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.038600 (0.156006)	data_time: 0.000083 (0.015606)	rpn_cls_loss: 0.000164 (0.000633)	rpn_loc_loss: 0.133484 (0.083529)	kp_hp_loss: 1.119128 (0.998913)	kp_hm_hp_loss: 12.892043 (11.456042)	kp_hp_offset_loss: 0.259272 (0.250168)	kp_loss: 14.270444 (12.705123)	siammask_loss: 14.430789 (12.805991)	kp_avg_acc: 0.071429 (0.030855)
[2019-08-12 16:51:10,062-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.038969 (0.116910)	data_time: 0.000077 (0.010458)	rpn_cls_loss: 0.000126 (0.000557)	rpn_loc_loss: 0.047047 (0.080332)	kp_hp_loss: 1.762854 (1.006903)	kp_hm_hp_loss: 8.292045 (11.362395)	kp_hp_offset_loss: 0.266628 (0.255992)	kp_loss: 10.321527 (12.625289)	siammask_loss: 10.378109 (12.722244)	kp_avg_acc: 0.000000 (0.029737)
[2019-08-12 16:51:11,042-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.040855 (0.097419)	data_time: 0.000089 (0.007883)	rpn_cls_loss: 0.000457 (0.000473)	rpn_loc_loss: 0.032891 (0.073483)	kp_hp_loss: 0.997315 (1.075029)	kp_hm_hp_loss: 9.630161 (11.164026)	kp_hp_offset_loss: 0.215859 (0.256428)	kp_loss: 10.843335 (12.495481)	siammask_loss: 10.883261 (12.584133)	kp_avg_acc: 0.062500 (0.039081)
[2019-08-12 16:51:12,029-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.040988 (0.085905)	data_time: 0.000571 (0.006349)	rpn_cls_loss: 0.000166 (0.000417)	rpn_loc_loss: 0.037626 (0.071050)	kp_hp_loss: 1.047285 (1.048783)	kp_hm_hp_loss: 15.564237 (11.325728)	kp_hp_offset_loss: 0.244941 (0.253857)	kp_loss: 16.856462 (12.628365)	siammask_loss: 16.901781 (12.714043)	kp_avg_acc: 0.000000 (0.032441)
[2019-08-12 16:51:13,018-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.040152 (0.078187)	data_time: 0.000093 (0.005317)	rpn_cls_loss: 0.000166 (0.000447)	rpn_loc_loss: 0.024918 (0.069723)	kp_hp_loss: 2.763786 (1.031455)	kp_hm_hp_loss: 7.882549 (11.373233)	kp_hp_offset_loss: 0.266345 (0.255027)	kp_loss: 10.912681 (12.659715)	siammask_loss: 10.942748 (12.743831)	kp_avg_acc: 0.000000 (0.027034)
[2019-08-12 16:51:14,002-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.038831 (0.072597)	data_time: 0.000079 (0.004580)	rpn_cls_loss: 0.000158 (0.000427)	rpn_loc_loss: 0.303112 (0.072622)	kp_hp_loss: 1.825956 (1.036541)	kp_hm_hp_loss: 9.533402 (11.464699)	kp_hp_offset_loss: 0.256289 (0.255535)	kp_loss: 11.615646 (12.756776)	siammask_loss: 11.979539 (12.844349)	kp_avg_acc: 0.000000 (0.027128)
[2019-08-12 16:51:14,997-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.042904 (0.068507)	data_time: 0.000087 (0.004028)	rpn_cls_loss: 0.000213 (0.000421)	rpn_loc_loss: 0.060708 (0.069859)	kp_hp_loss: 1.562089 (1.008999)	kp_hm_hp_loss: 8.679843 (11.648086)	kp_hp_offset_loss: 0.261486 (0.253164)	kp_loss: 10.503418 (12.910251)	siammask_loss: 10.576481 (12.994502)	kp_avg_acc: 0.000000 (0.026344)
[2019-08-12 16:51:15,991-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.041849 (0.065269)	data_time: 0.000211 (0.003600)	rpn_cls_loss: 0.000172 (0.000395)	rpn_loc_loss: 0.032306 (0.071736)	kp_hp_loss: 0.659157 (1.009302)	kp_hm_hp_loss: 13.034230 (11.674666)	kp_hp_offset_loss: 0.196967 (0.251875)	kp_loss: 13.890354 (12.935847)	siammask_loss: 13.929293 (13.022324)	kp_avg_acc: 0.000000 (0.024899)
[2019-08-12 16:51:16,985-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.045685 (0.062762)	data_time: 0.000096 (0.003259)	rpn_cls_loss: 0.000171 (0.000377)	rpn_loc_loss: 0.079990 (0.068387)	kp_hp_loss: 0.799973 (0.982744)	kp_hm_hp_loss: 11.542498 (11.616791)	kp_hp_offset_loss: 0.236873 (0.250021)	kp_loss: 12.579344 (12.849558)	siammask_loss: 12.675504 (12.932000)	kp_avg_acc: 0.000000 (0.027515)
[2019-08-12 17:41:05,307-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 17:41:05,315-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 17:41:05,360-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 17:41:05,360-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 17:41:05,362-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 17:41:09,098-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 17:41:09,142-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 17:41:09,222-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,223-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:41:09,227-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 17:41:09,334-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,335-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:41:09,336-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 17:41:09,337-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 17:41:09,531-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 17:41:09,533-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 17:41:09,537-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,537-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:41:09,538-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 17:41:09,541-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,541-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:41:09,542-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 17:41:16,613-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 17:41:17,556-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:41:17,557-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked'}
[2019-08-12 17:41:17,558-rk0-load_helper.py# 14] missing keys:43
[2019-08-12 17:41:17,558-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.bn2.running_mean', 'layer4.0.bn2.running_var', 'layer4.1.bn2.bias', 'layer4.2.bn1.weight', 'layer4.1.bn3.weight', 'layer4.0.bn1.weight', 'layer4.2.bn3.running_var', 'layer4.0.downsample.0.weight', 'layer4.2.conv1.weight', 'layer4.2.bn3.weight', 'layer4.0.downsample.1.weight', 'layer4.0.bn1.running_var', 'layer4.1.bn3.running_var', 'layer4.1.bn2.running_mean', 'layer4.0.conv1.weight', 'layer4.1.bn3.bias', 'layer4.2.bn2.running_var', 'layer4.1.conv3.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn2.weight', 'layer4.1.bn3.running_mean', 'layer4.2.bn3.bias', 'layer4.2.bn2.weight', 'layer4.0.downsample.1.bias', 'layer4.0.bn3.running_mean', 'layer4.2.bn1.running_var', 'layer4.0.downsample.1.running_mean', 'layer4.2.conv3.weight', 'layer4.0.bn3.bias', 'layer4.1.bn1.bias', 'layer4.0.conv2.weight', 'layer4.2.bn2.bias', 'layer4.2.conv2.weight', 'layer4.0.bn2.bias', 'layer4.1.conv2.weight', 'layer4.2.bn3.running_mean', 'layer4.0.bn3.weight', 'layer4.2.bn1.bias', 'layer4.0.conv3.weight', 'layer4.0.bn1.bias', 'layer4.2.bn2.running_mean', 'layer4.2.bn1.running_mean', 'layer4.1.bn2.running_var', 'layer4.1.bn1.running_var', 'layer4.1.bn1.running_mean', 'layer4.1.conv1.weight', 'layer4.1.bn1.weight', 'layer4.0.bn3.running_var', 'layer4.0.bn1.running_mean', 'layer4.0.bn2.weight'}
[2019-08-12 17:41:17,558-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-12 17:41:17,558-rk0-load_helper.py# 18] used keys:215
[2019-08-12 17:42:15,436-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 17:42:15,437-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 17:42:15,440-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 17:42:15,440-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 17:42:15,442-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 17:42:18,935-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 17:42:18,971-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 17:42:19,041-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,042-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:42:19,045-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 17:42:19,117-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,118-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:42:19,118-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 17:42:19,119-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 17:42:19,263-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 17:42:19,266-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 17:42:19,269-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,269-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:42:19,270-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 17:42:19,273-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,273-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:42:19,273-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 17:42:24,681-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 17:42:25,178-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:42:25,180-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked'}
[2019-08-12 17:42:25,180-rk0-load_helper.py# 14] missing keys:43
[2019-08-12 17:42:25,181-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn1.weight', 'layer4.2.bn1.bias', 'layer4.0.bn3.running_mean', 'layer4.0.downsample.0.weight', 'layer4.2.bn1.running_mean', 'layer4.2.bn3.weight', 'layer4.0.bn3.bias', 'layer4.0.downsample.1.running_mean', 'layer4.2.bn3.running_mean', 'layer4.1.conv1.weight', 'layer4.0.conv1.weight', 'layer4.2.bn2.running_mean', 'layer4.2.bn2.weight', 'layer4.2.bn2.running_var', 'layer4.0.downsample.1.bias', 'layer4.0.bn1.bias', 'layer4.0.bn2.weight', 'layer4.0.bn1.weight', 'layer4.1.bn3.weight', 'layer4.0.bn3.weight', 'layer4.1.bn3.running_mean', 'layer4.2.bn3.running_var', 'layer4.1.bn2.running_mean', 'layer4.0.bn1.running_var', 'layer4.1.bn2.bias', 'layer4.2.conv1.weight', 'layer4.2.conv2.weight', 'layer4.2.bn3.bias', 'layer4.0.conv3.weight', 'layer4.1.bn2.weight', 'layer4.0.bn2.bias', 'layer4.0.downsample.1.weight', 'layer4.0.bn3.running_var', 'layer4.2.bn1.weight', 'layer4.0.bn2.running_mean', 'layer4.0.bn2.running_var', 'layer4.2.conv3.weight', 'layer4.0.conv2.weight', 'layer4.2.bn2.bias', 'layer4.1.conv3.weight', 'layer4.1.bn3.running_var', 'layer4.1.bn1.bias', 'layer4.1.bn1.running_mean', 'layer4.1.bn3.bias', 'layer4.0.bn1.running_mean', 'layer4.1.conv2.weight', 'layer4.2.bn1.running_var', 'layer4.1.bn2.running_var', 'layer4.0.downsample.1.running_var', 'layer4.1.bn1.running_var'}
[2019-08-12 17:42:25,181-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-12 17:42:25,181-rk0-load_helper.py# 18] used keys:215
[2019-08-12 17:42:25,206-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 17:42:25,208-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 17:42:25,402-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 17:42:25,406-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 17:43:03,221-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 17:43:03,223-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0811/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 17:43:03,227-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 17:43:03,228-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 17:43:03,230-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 17:43:06,661-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 17:43:06,699-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 17:43:06,769-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,769-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:43:06,773-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 17:43:06,844-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,845-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:43:06,845-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 17:43:06,846-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 17:43:06,956-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 17:43:06,958-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 17:43:06,961-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,962-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:43:06,962-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 17:43:06,965-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,965-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:43:06,966-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 17:43:12,334-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 17:43:13,078-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:43:13,080-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.2.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked'}
[2019-08-12 17:43:13,080-rk0-load_helper.py# 14] missing keys:43
[2019-08-12 17:43:13,081-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn3.bias', 'layer4.0.bn3.weight', 'layer4.0.downsample.1.running_mean', 'layer4.1.bn1.weight', 'layer4.0.bn1.bias', 'layer4.0.bn2.weight', 'layer4.2.bn2.running_mean', 'layer4.2.bn1.weight', 'layer4.1.bn3.weight', 'layer4.2.bn3.running_mean', 'layer4.1.bn1.running_var', 'layer4.0.conv3.weight', 'layer4.2.bn3.bias', 'layer4.1.bn2.running_var', 'layer4.0.bn1.running_mean', 'layer4.2.conv1.weight', 'layer4.0.bn3.running_mean', 'layer4.2.conv3.weight', 'layer4.1.bn1.running_mean', 'layer4.0.downsample.1.bias', 'layer4.1.bn3.running_mean', 'layer4.1.bn3.running_var', 'layer4.0.bn2.bias', 'layer4.0.conv2.weight', 'layer4.1.conv3.weight', 'layer4.1.bn1.bias', 'layer4.2.conv2.weight', 'layer4.0.bn2.running_mean', 'layer4.2.bn2.running_var', 'layer4.1.bn2.weight', 'layer4.2.bn2.bias', 'layer4.0.bn1.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn2.bias', 'layer4.1.conv2.weight', 'layer4.2.bn3.weight', 'layer4.0.downsample.0.weight', 'layer4.2.bn3.running_var', 'layer4.0.bn2.running_var', 'layer4.2.bn1.running_var', 'layer4.1.bn2.running_mean', 'layer4.0.downsample.1.weight', 'layer4.2.bn1.bias', 'layer4.0.bn3.running_var', 'layer4.0.conv1.weight', 'layer4.0.bn1.running_var', 'layer4.1.conv1.weight', 'layer4.2.bn1.running_mean', 'layer4.0.bn3.bias', 'layer4.2.bn2.weight'}
[2019-08-12 17:43:13,081-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-12 17:43:13,081-rk0-load_helper.py# 18] used keys:215
[2019-08-12 17:43:13,108-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 17:43:13,112-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 17:43:13,252-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 17:43:13,255-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0811/checkpoint_e99.pth
[2019-08-12 17:43:16,568-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:43:16,570-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'features.features.layer4.2.bn1.bias', 'features.features.layer4.1.bn3.running_var', 'features.features.layer4.0.bn2.running_mean', 'features.features.layer4.0.conv1.weight', 'features.features.layer4.2.bn2.num_batches_tracked', 'features.features.layer4.0.bn1.bias', 'features.features.layer4.0.downsample.1.weight', 'features.features.layer4.0.bn1.weight', 'features.features.layer4.1.bn3.running_mean', 'features.downsample_p4.downsample.1.running_var', 'features.downsample_p4.downsample.1.num_batches_tracked', 'features.features.layer4.0.bn3.weight', 'features.features.layer4.1.bn2.weight', 'features.features.layer4.2.bn2.running_mean', 'features.features.layer4.0.bn2.weight', 'features.features.layer4.0.downsample.1.running_mean', 'features.features.layer4.0.bn3.running_var', 'features.downsample_p4.downsample.0.weight', 'features.features.layer4.0.bn2.running_var', 'features.features.layer4.2.bn3.running_var', 'features.features.layer4.0.bn3.running_mean', 'features.features.layer4.2.bn1.num_batches_tracked', 'features.features.layer4.0.downsample.1.num_batches_tracked', 'features.features.layer4.2.conv2.weight', 'features.downsample_p4.downsample.1.running_mean', 'features.features.layer4.1.bn2.running_var', 'features.features.layer4.2.bn1.running_mean', 'features.downsample_p4.downsample.1.bias', 'features.features.layer4.2.bn1.weight', 'features.features.layer4.2.bn3.bias', 'features.features.layer4.2.bn3.num_batches_tracked', 'features.features.layer4.2.bn3.running_mean', 'features.features.layer4.1.bn1.running_var', 'features.features.layer4.2.bn3.weight', 'features.features.layer4.1.bn2.num_batches_tracked', 'features.features.layer4.2.conv3.weight', 'features.features.layer4.1.bn3.bias', 'features.features.layer4.0.downsample.0.weight', 'features.features.layer4.0.bn1.running_mean', 'features.features.layer4.0.conv3.weight', 'features.features.layer4.0.downsample.1.bias', 'features.features.layer4.1.bn1.bias', 'features.features.layer4.1.conv3.weight', 'features.features.layer4.0.bn3.bias', 'features.features.layer4.1.bn3.weight', 'features.features.layer4.1.bn1.weight', 'features.features.layer4.1.bn3.num_batches_tracked', 'features.features.layer4.0.bn1.num_batches_tracked', 'features.downsample_p4.downsample.1.weight', 'features.features.layer4.1.conv1.weight', 'features.features.layer4.2.bn2.weight', 'features.features.layer4.2.bn2.bias', 'features.features.layer4.0.downsample.1.running_var', 'features.features.layer4.1.conv2.weight', 'features.features.layer4.2.bn2.running_var', 'features.features.layer4.2.bn1.running_var', 'features.features.layer4.0.bn1.running_var', 'features.features.layer4.0.conv2.weight', 'features.features.layer4.0.bn2.num_batches_tracked', 'features.features.layer4.2.conv1.weight', 'features.features.layer4.0.bn2.bias', 'features.features.layer4.1.bn1.num_batches_tracked', 'features.features.layer4.1.bn1.running_mean', 'features.features.layer4.1.bn2.running_mean', 'features.features.layer4.1.bn2.bias', 'features.features.layer4.0.bn3.num_batches_tracked'}
[2019-08-12 17:43:16,571-rk0-load_helper.py# 17] unused checkpoint keys:66
[2019-08-12 17:43:16,571-rk0-load_helper.py# 18] used keys:372
[2019-08-12 17:43:16,814-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 17:43:20,601-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.166659 (0.266763)	data_time: 0.000119 (0.042526)	rpn_cls_loss: 0.000252 (0.000199)	rpn_loc_loss: 0.028852 (0.058921)	kp_hp_loss: 1.218985 (0.898472)	kp_hm_hp_loss: 13.533193 (12.975972)	kp_hp_offset_loss: 0.241123 (0.235077)	kp_loss: 14.993301 (14.109521)	siammask_loss: 15.028175 (14.180427)	kp_avg_acc: 0.000000 (0.005882)
[2019-08-12 17:43:21,952-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.026447 (0.162485)	data_time: 0.000194 (0.021370)	rpn_cls_loss: 0.000168 (0.000209)	rpn_loc_loss: 0.059111 (0.057613)	kp_hp_loss: 0.437106 (0.863231)	kp_hm_hp_loss: 10.747042 (11.677890)	kp_hp_offset_loss: 0.221582 (0.227055)	kp_loss: 11.405729 (12.768176)	siammask_loss: 11.476830 (12.837521)	kp_avg_acc: 0.090909 (0.007487)
[2019-08-12 17:43:23,588-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.039674 (0.138490)	data_time: 0.000120 (0.014397)	rpn_cls_loss: 0.000181 (0.000206)	rpn_loc_loss: 0.107492 (0.063003)	kp_hp_loss: 0.904595 (0.844392)	kp_hm_hp_loss: 11.148574 (11.858203)	kp_hp_offset_loss: 0.212026 (0.223447)	kp_loss: 12.265195 (12.926045)	siammask_loss: 12.394366 (13.001854)	kp_avg_acc: 0.066667 (0.009297)
[2019-08-12 17:43:25,160-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.024521 (0.123082)	data_time: 0.000213 (0.010867)	rpn_cls_loss: 0.000194 (0.000199)	rpn_loc_loss: 0.043142 (0.062569)	kp_hp_loss: 1.164039 (0.824318)	kp_hm_hp_loss: 16.451653 (11.909670)	kp_hp_offset_loss: 0.205520 (0.224583)	kp_loss: 17.821213 (12.958574)	siammask_loss: 17.873177 (13.033854)	kp_avg_acc: 0.000000 (0.009914)
[2019-08-12 17:43:26,799-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.027072 (0.114080)	data_time: 0.000109 (0.008734)	rpn_cls_loss: 0.000146 (0.000256)	rpn_loc_loss: 0.047028 (0.066707)	kp_hp_loss: 0.874129 (0.824463)	kp_hm_hp_loss: 17.850994 (12.194917)	kp_hp_offset_loss: 0.191507 (0.228804)	kp_loss: 18.916630 (13.248185)	siammask_loss: 18.973209 (13.328488)	kp_avg_acc: 0.100000 (0.012609)
[2019-08-12 17:43:28,307-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.023068 (0.108008)	data_time: 0.000093 (0.007320)	rpn_cls_loss: 0.000126 (0.000244)	rpn_loc_loss: 0.017167 (0.065627)	kp_hp_loss: 0.861468 (0.803345)	kp_hm_hp_loss: 14.026247 (12.125487)	kp_hp_offset_loss: 0.184263 (0.228517)	kp_loss: 15.071979 (13.157349)	siammask_loss: 15.092705 (13.236344)	kp_avg_acc: 0.000000 (0.011619)
[2019-08-12 17:43:30,427-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.029630 (0.105724)	data_time: 0.000122 (0.006302)	rpn_cls_loss: 0.000196 (0.000235)	rpn_loc_loss: 0.059795 (0.070333)	kp_hp_loss: 0.978390 (0.791860)	kp_hm_hp_loss: 11.643416 (12.239126)	kp_hp_offset_loss: 0.279471 (0.230203)	kp_loss: 12.901278 (13.261191)	siammask_loss: 12.973228 (13.345824)	kp_avg_acc: 0.000000 (0.012010)
[2019-08-12 17:43:32,053-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.131943 (0.103641)	data_time: 0.000109 (0.005540)	rpn_cls_loss: 0.000160 (0.000263)	rpn_loc_loss: 0.047539 (0.074767)	kp_hp_loss: 0.759982 (0.806636)	kp_hm_hp_loss: 13.570487 (12.077972)	kp_hp_offset_loss: 0.186893 (0.229522)	kp_loss: 14.517363 (13.114131)	siammask_loss: 14.574569 (13.204113)	kp_avg_acc: 0.000000 (0.011471)
[2019-08-12 17:43:33,607-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.023650 (0.100812)	data_time: 0.000099 (0.004949)	rpn_cls_loss: 0.000108 (0.000257)	rpn_loc_loss: 0.115441 (0.078056)	kp_hp_loss: 0.384202 (0.797433)	kp_hm_hp_loss: 11.805127 (12.021050)	kp_hp_offset_loss: 0.227629 (0.229892)	kp_loss: 12.416959 (13.048376)	siammask_loss: 12.555596 (13.142299)	kp_avg_acc: 0.000000 (0.010196)
[2019-08-12 17:43:35,132-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.165104 (0.098621)	data_time: 0.000103 (0.004473)	rpn_cls_loss: 0.000226 (0.000289)	rpn_loc_loss: 0.110558 (0.077921)	kp_hp_loss: 0.337857 (0.790038)	kp_hm_hp_loss: 12.672770 (12.055612)	kp_hp_offset_loss: 0.193055 (0.229756)	kp_loss: 13.203681 (13.075405)	siammask_loss: 13.336577 (13.169199)	kp_avg_acc: 0.000000 (0.010954)
[2019-08-13 19:49:06,523-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-13 19:49:06,530-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0811/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-13 19:49:06,552-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-13 19:49:06,553-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-13 19:49:06,563-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-13 19:49:11,014-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-13 19:49:11,058-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-13 19:49:11,126-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 19:49:11,126-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-13 19:49:11,129-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-13 19:49:11,195-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 19:49:11,196-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-13 19:49:11,196-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-13 19:49:11,210-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-13 19:49:11,716-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-13 19:49:11,718-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-13 19:49:11,722-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 19:49:11,722-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-13 19:49:11,723-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-13 19:49:11,726-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 19:49:11,727-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-13 19:49:11,727-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-13 19:49:28,558-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-13 19:49:30,330-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-13 19:49:30,332-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked'}
[2019-08-13 19:49:30,333-rk0-load_helper.py# 14] missing keys:43
[2019-08-13 19:49:30,333-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn3.weight', 'layer4.0.bn2.weight', 'layer4.2.conv1.weight', 'layer4.2.bn1.running_var', 'layer4.0.downsample.1.running_var', 'layer4.1.bn1.weight', 'layer4.0.bn1.bias', 'layer4.2.conv2.weight', 'layer4.2.bn3.bias', 'layer4.2.bn2.weight', 'layer4.0.bn2.bias', 'layer4.1.bn1.running_var', 'layer4.2.bn3.weight', 'layer4.0.downsample.1.bias', 'layer4.0.bn1.weight', 'layer4.2.bn2.bias', 'layer4.0.bn3.running_mean', 'layer4.2.bn1.running_mean', 'layer4.0.bn3.bias', 'layer4.1.bn2.bias', 'layer4.0.bn3.running_var', 'layer4.2.bn2.running_var', 'layer4.0.bn1.running_mean', 'layer4.0.bn1.running_var', 'layer4.2.conv3.weight', 'layer4.1.conv3.weight', 'layer4.1.bn2.weight', 'layer4.0.bn2.running_var', 'layer4.0.bn2.running_mean', 'layer4.0.conv2.weight', 'layer4.1.bn3.bias', 'layer4.2.bn3.running_var', 'layer4.1.bn2.running_var', 'layer4.1.conv1.weight', 'layer4.0.downsample.0.weight', 'layer4.2.bn1.weight', 'layer4.1.bn3.running_mean', 'layer4.1.bn2.running_mean', 'layer4.0.bn3.weight', 'layer4.2.bn1.bias', 'layer4.2.bn3.running_mean', 'layer4.0.downsample.1.weight', 'layer4.1.bn1.bias', 'layer4.0.downsample.1.running_mean', 'layer4.0.conv3.weight', 'layer4.2.bn2.running_mean', 'layer4.1.conv2.weight', 'layer4.1.bn1.running_mean', 'layer4.1.bn3.running_var', 'layer4.0.conv1.weight'}
[2019-08-13 19:49:30,334-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-13 19:49:30,334-rk0-load_helper.py# 18] used keys:215
[2019-08-13 19:49:30,361-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-13 19:49:30,362-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-13 19:49:30,504-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-13 19:49:30,508-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0811/checkpoint_e99.pth
[2019-08-13 19:49:32,724-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-13 19:49:32,727-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'features.features.layer4.2.conv1.weight', 'features.features.layer4.0.bn3.running_mean', 'features.downsample_p4.downsample.0.weight', 'features.features.layer4.1.conv1.weight', 'features.features.layer4.2.bn1.running_var', 'features.features.layer4.2.bn2.num_batches_tracked', 'features.features.layer4.0.bn2.running_mean', 'features.features.layer4.2.bn1.weight', 'features.features.layer4.1.bn1.num_batches_tracked', 'features.features.layer4.1.bn1.bias', 'features.features.layer4.1.bn1.running_var', 'features.features.layer4.1.bn2.weight', 'features.features.layer4.0.conv2.weight', 'features.features.layer4.2.bn3.num_batches_tracked', 'features.features.layer4.0.bn2.weight', 'features.features.layer4.0.bn1.running_var', 'features.features.layer4.1.conv3.weight', 'features.features.layer4.2.bn3.weight', 'features.features.layer4.1.bn3.bias', 'features.features.layer4.1.bn3.weight', 'features.features.layer4.0.conv3.weight', 'features.features.layer4.0.downsample.1.bias', 'features.features.layer4.0.bn2.running_var', 'features.downsample_p4.downsample.1.weight', 'features.features.layer4.1.bn1.weight', 'features.features.layer4.2.bn2.running_mean', 'features.features.layer4.0.downsample.1.num_batches_tracked', 'features.features.layer4.2.bn2.running_var', 'features.features.layer4.2.bn1.num_batches_tracked', 'features.features.layer4.0.bn1.weight', 'features.features.layer4.0.downsample.1.running_mean', 'features.features.layer4.0.bn3.weight', 'features.features.layer4.2.bn1.bias', 'features.downsample_p4.downsample.1.num_batches_tracked', 'features.features.layer4.1.bn2.bias', 'features.features.layer4.2.bn3.running_mean', 'features.features.layer4.1.bn3.num_batches_tracked', 'features.features.layer4.1.conv2.weight', 'features.downsample_p4.downsample.1.bias', 'features.features.layer4.2.bn3.running_var', 'features.features.layer4.0.bn1.num_batches_tracked', 'features.downsample_p4.downsample.1.running_mean', 'features.features.layer4.0.conv1.weight', 'features.features.layer4.2.bn2.weight', 'features.features.layer4.2.conv3.weight', 'features.features.layer4.0.bn2.num_batches_tracked', 'features.features.layer4.1.bn1.running_mean', 'features.features.layer4.2.bn3.bias', 'features.features.layer4.0.bn2.bias', 'features.features.layer4.0.bn3.running_var', 'features.features.layer4.0.bn1.running_mean', 'features.downsample_p4.downsample.1.running_var', 'features.features.layer4.0.bn3.bias', 'features.features.layer4.0.bn3.num_batches_tracked', 'features.features.layer4.2.bn2.bias', 'features.features.layer4.0.downsample.1.weight', 'features.features.layer4.1.bn2.running_mean', 'features.features.layer4.1.bn2.num_batches_tracked', 'features.features.layer4.2.conv2.weight', 'features.features.layer4.1.bn3.running_var', 'features.features.layer4.0.downsample.1.running_var', 'features.features.layer4.1.bn3.running_mean', 'features.features.layer4.0.downsample.0.weight', 'features.features.layer4.1.bn2.running_var', 'features.features.layer4.2.bn1.running_mean', 'features.features.layer4.0.bn1.bias'}
[2019-08-13 19:49:32,727-rk0-load_helper.py# 17] unused checkpoint keys:66
[2019-08-13 19:49:32,728-rk0-load_helper.py# 18] used keys:372
[2019-08-13 19:49:32,802-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-13 19:49:36,512-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.176660 (0.239266)	data_time: 0.000218 (0.041552)	rpn_cls_loss: 0.000120 (0.000680)	rpn_loc_loss: 0.037753 (0.044611)	kp_hp_loss: 0.756585 (0.607483)	kp_hm_hp_loss: 11.020744 (11.378760)	kp_hp_offset_loss: 0.222585 (0.211587)	kp_loss: 11.999914 (12.197829)	siammask_loss: 12.045338 (12.252043)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-13 19:49:38,042-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.047676 (0.148795)	data_time: 0.000296 (0.020920)	rpn_cls_loss: 0.000112 (0.000444)	rpn_loc_loss: 0.013741 (0.058559)	kp_hp_loss: 0.827167 (0.753258)	kp_hm_hp_loss: 14.230338 (11.204513)	kp_hp_offset_loss: 0.222759 (0.220897)	kp_loss: 15.280265 (12.178667)	siammask_loss: 15.296866 (12.249384)	kp_avg_acc: 0.000000 (0.007179)
[2019-08-13 19:49:39,637-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.148562 (0.126484)	data_time: 0.000104 (0.014047)	rpn_cls_loss: 0.000153 (0.000350)	rpn_loc_loss: 0.105577 (0.061981)	kp_hp_loss: 0.513197 (0.739779)	kp_hm_hp_loss: 13.102989 (11.120586)	kp_hp_offset_loss: 0.173397 (0.220237)	kp_loss: 13.789583 (12.080600)	siammask_loss: 13.916430 (12.155329)	kp_avg_acc: 0.000000 (0.008953)
[2019-08-13 19:49:41,210-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.023700 (0.110643)	data_time: 0.000094 (0.010589)	rpn_cls_loss: 0.000160 (0.000309)	rpn_loc_loss: 0.106098 (0.058983)	kp_hp_loss: 0.514179 (0.702560)	kp_hm_hp_loss: 9.731991 (11.001547)	kp_hp_offset_loss: 0.196592 (0.218766)	kp_loss: 10.442761 (11.922871)	siammask_loss: 10.570239 (11.993961)	kp_avg_acc: 0.000000 (0.010200)
[2019-08-13 19:49:44,084-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.026445 (0.105597)	data_time: 0.000097 (0.008704)	rpn_cls_loss: 0.000168 (0.000284)	rpn_loc_loss: 0.080751 (0.056244)	kp_hp_loss: 0.787370 (0.715915)	kp_hm_hp_loss: 6.873666 (10.932029)	kp_hp_offset_loss: 0.299732 (0.220523)	kp_loss: 7.960768 (11.868464)	siammask_loss: 8.057837 (11.936241)	kp_avg_acc: 0.000000 (0.010744)
[2019-08-13 19:49:46,023-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.038023 (0.100389)	data_time: 0.000102 (0.007317)	rpn_cls_loss: 0.001135 (0.000332)	rpn_loc_loss: 0.100372 (0.057029)	kp_hp_loss: 1.449068 (0.714367)	kp_hm_hp_loss: 6.872692 (11.041694)	kp_hp_offset_loss: 0.215164 (0.223001)	kp_loss: 8.536924 (11.979060)	siammask_loss: 8.658506 (12.047827)	kp_avg_acc: 0.000000 (0.011106)
[2019-08-13 19:49:49,113-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.139966 (0.095254)	data_time: 0.000171 (0.006318)	rpn_cls_loss: 0.000114 (0.000314)	rpn_loc_loss: 0.063160 (0.060257)	kp_hp_loss: 0.834721 (0.701444)	kp_hm_hp_loss: 7.939382 (10.946922)	kp_hp_offset_loss: 0.181349 (0.222626)	kp_loss: 8.955452 (11.870989)	siammask_loss: 9.031357 (11.943613)	kp_avg_acc: 0.000000 (0.010412)
[2019-08-13 19:49:50,554-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.027620 (0.090912)	data_time: 0.000104 (0.005555)	rpn_cls_loss: 0.000118 (0.000389)	rpn_loc_loss: 0.019646 (0.061316)	kp_hp_loss: 0.568797 (0.711138)	kp_hm_hp_loss: 11.586316 (10.970863)	kp_hp_offset_loss: 0.220751 (0.222986)	kp_loss: 12.375864 (11.904985)	siammask_loss: 12.399557 (11.978954)	kp_avg_acc: 0.000000 (0.010361)
[2019-08-13 19:49:52,156-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.165491 (0.089728)	data_time: 0.000112 (0.004959)	rpn_cls_loss: 0.000471 (0.000370)	rpn_loc_loss: 0.043980 (0.062081)	kp_hp_loss: 1.707625 (0.738569)	kp_hm_hp_loss: 7.024628 (10.932128)	kp_hp_offset_loss: 0.213655 (0.225202)	kp_loss: 8.945908 (11.895894)	siammask_loss: 8.999155 (11.970763)	kp_avg_acc: 0.000000 (0.009950)
[2019-08-13 19:49:53,555-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.104364 (0.086701)	data_time: 0.000169 (0.004483)	rpn_cls_loss: 0.000237 (0.002672)	rpn_loc_loss: 0.025674 (0.064989)	kp_hp_loss: 0.665401 (0.791002)	kp_hm_hp_loss: 10.265181 (10.914196)	kp_hp_offset_loss: 0.233529 (0.226134)	kp_loss: 11.164110 (11.931331)	siammask_loss: 11.195156 (12.011991)	kp_avg_acc: 0.000000 (0.009788)
[2019-08-13 20:03:44,923-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-13 20:03:44,924-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0811/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-13 20:03:44,947-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-13 20:03:44,948-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-13 20:03:44,958-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-13 20:03:49,096-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-13 20:03:49,161-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-13 20:03:49,238-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 20:03:49,238-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-13 20:03:49,242-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-13 20:03:49,360-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 20:03:49,361-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-13 20:03:49,362-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-13 20:03:49,371-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-13 20:03:49,581-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-13 20:03:49,584-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-13 20:03:49,588-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 20:03:49,588-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-13 20:03:49,589-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-13 20:03:49,592-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-13 20:03:49,592-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-13 20:03:49,593-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-13 20:04:04,215-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-13 20:04:05,315-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-13 20:04:05,317-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked'}
[2019-08-13 20:04:05,317-rk0-load_helper.py# 14] missing keys:43
[2019-08-13 20:04:05,318-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn1.bias', 'layer4.1.bn1.running_var', 'layer4.1.bn1.running_mean', 'layer4.2.bn2.running_var', 'layer4.2.bn3.running_mean', 'layer4.0.bn1.running_mean', 'layer4.2.conv1.weight', 'layer4.2.bn1.bias', 'layer4.0.conv2.weight', 'layer4.0.downsample.1.running_mean', 'layer4.0.bn3.running_var', 'layer4.0.bn1.weight', 'layer4.0.downsample.1.bias', 'layer4.1.bn2.running_mean', 'layer4.0.bn2.running_var', 'layer4.0.downsample.1.running_var', 'layer4.2.conv3.weight', 'layer4.1.bn3.running_var', 'layer4.2.bn3.running_var', 'layer4.0.downsample.1.weight', 'layer4.1.bn3.bias', 'layer4.0.downsample.0.weight', 'layer4.1.conv1.weight', 'layer4.1.bn2.running_var', 'layer4.1.conv2.weight', 'layer4.1.bn2.weight', 'layer4.2.bn3.bias', 'layer4.0.bn3.bias', 'layer4.1.bn2.bias', 'layer4.2.bn2.weight', 'layer4.0.bn2.running_mean', 'layer4.2.bn1.running_var', 'layer4.2.bn2.running_mean', 'layer4.0.bn1.bias', 'layer4.1.conv3.weight', 'layer4.2.bn3.weight', 'layer4.0.bn2.bias', 'layer4.0.bn3.weight', 'layer4.0.bn2.weight', 'layer4.2.bn1.weight', 'layer4.2.conv2.weight', 'layer4.0.conv3.weight', 'layer4.1.bn3.running_mean', 'layer4.0.bn1.running_var', 'layer4.0.conv1.weight', 'layer4.1.bn1.weight', 'layer4.1.bn3.weight', 'layer4.2.bn2.bias', 'layer4.2.bn1.running_mean', 'layer4.0.bn3.running_mean'}
[2019-08-13 20:04:05,318-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-13 20:04:05,318-rk0-load_helper.py# 18] used keys:215
[2019-08-13 20:04:05,341-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-13 20:04:05,343-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-13 20:04:05,518-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-13 20:04:05,522-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0811/checkpoint_e99.pth
[2019-08-13 20:04:06,957-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-13 20:04:06,959-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'features.features.layer4.1.bn3.running_mean', 'features.features.layer4.1.bn2.bias', 'features.features.layer4.0.bn2.num_batches_tracked', 'features.features.layer4.2.conv2.weight', 'features.features.layer4.1.bn1.running_mean', 'features.features.layer4.1.bn3.running_var', 'features.features.layer4.0.downsample.0.weight', 'features.features.layer4.2.bn3.bias', 'features.downsample_p4.downsample.1.num_batches_tracked', 'features.features.layer4.0.downsample.1.running_var', 'features.features.layer4.2.bn2.bias', 'features.features.layer4.0.bn3.num_batches_tracked', 'features.features.layer4.2.conv1.weight', 'features.features.layer4.2.bn1.num_batches_tracked', 'features.features.layer4.0.downsample.1.running_mean', 'features.features.layer4.0.conv1.weight', 'features.features.layer4.1.bn2.running_var', 'features.features.layer4.1.bn2.num_batches_tracked', 'features.downsample_p4.downsample.1.running_mean', 'features.features.layer4.0.bn3.running_var', 'features.features.layer4.1.bn3.weight', 'features.features.layer4.0.bn2.bias', 'features.downsample_p4.downsample.1.weight', 'features.features.layer4.2.bn3.num_batches_tracked', 'features.downsample_p4.downsample.1.bias', 'features.features.layer4.1.bn2.running_mean', 'features.features.layer4.0.bn1.num_batches_tracked', 'features.features.layer4.2.bn1.bias', 'features.features.layer4.2.bn3.running_mean', 'features.features.layer4.0.downsample.1.weight', 'features.features.layer4.0.downsample.1.bias', 'features.features.layer4.2.bn2.num_batches_tracked', 'features.features.layer4.1.bn1.num_batches_tracked', 'features.features.layer4.1.conv3.weight', 'features.features.layer4.2.bn1.weight', 'features.features.layer4.2.conv3.weight', 'features.features.layer4.2.bn3.running_var', 'features.features.layer4.2.bn2.weight', 'features.features.layer4.0.conv2.weight', 'features.features.layer4.2.bn2.running_mean', 'features.features.layer4.2.bn3.weight', 'features.features.layer4.1.bn3.bias', 'features.features.layer4.0.bn1.bias', 'features.features.layer4.0.bn2.running_var', 'features.features.layer4.1.conv1.weight', 'features.features.layer4.1.bn1.running_var', 'features.features.layer4.0.bn3.bias', 'features.features.layer4.0.downsample.1.num_batches_tracked', 'features.features.layer4.0.bn2.weight', 'features.features.layer4.0.bn3.running_mean', 'features.features.layer4.0.bn3.weight', 'features.downsample_p4.downsample.0.weight', 'features.features.layer4.1.bn1.weight', 'features.features.layer4.0.bn1.running_mean', 'features.features.layer4.2.bn1.running_mean', 'features.features.layer4.1.conv2.weight', 'features.features.layer4.0.bn1.running_var', 'features.features.layer4.0.bn2.running_mean', 'features.downsample_p4.downsample.1.running_var', 'features.features.layer4.1.bn2.weight', 'features.features.layer4.2.bn1.running_var', 'features.features.layer4.0.conv3.weight', 'features.features.layer4.2.bn2.running_var', 'features.features.layer4.1.bn3.num_batches_tracked', 'features.features.layer4.1.bn1.bias', 'features.features.layer4.0.bn1.weight'}
[2019-08-13 20:04:06,959-rk0-load_helper.py# 17] unused checkpoint keys:66
[2019-08-13 20:04:06,960-rk0-load_helper.py# 18] used keys:372
[2019-08-13 20:04:07,041-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-13 20:04:10,506-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.024320 (0.232002)	data_time: 0.000121 (0.036371)	rpn_cls_loss: 0.000147 (0.000287)	rpn_loc_loss: 0.012534 (0.054897)	kp_hp_loss: 0.665740 (0.765235)	kp_hm_hp_loss: 13.263677 (11.624216)	kp_hp_offset_loss: 0.253637 (0.223981)	kp_loss: 14.183053 (12.613434)	siammask_loss: 14.198241 (12.679596)	kp_avg_acc: 0.000000 (0.006250)
[2019-08-13 20:04:12,040-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.170355 (0.152480)	data_time: 0.000150 (0.018328)	rpn_cls_loss: 0.000210 (0.000274)	rpn_loc_loss: 0.026824 (0.054204)	kp_hp_loss: 0.919564 (0.833151)	kp_hm_hp_loss: 12.783164 (12.137298)	kp_hp_offset_loss: 0.206359 (0.220700)	kp_loss: 13.909086 (13.191150)	siammask_loss: 13.941484 (13.256468)	kp_avg_acc: 0.000000 (0.008681)
[2019-08-13 20:04:13,430-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.024522 (0.121361)	data_time: 0.000122 (0.012298)	rpn_cls_loss: 0.000307 (0.000278)	rpn_loc_loss: 0.196148 (0.056407)	kp_hp_loss: 0.512337 (0.860994)	kp_hm_hp_loss: 9.336997 (12.169831)	kp_hp_offset_loss: 0.203304 (0.221911)	kp_loss: 10.052639 (13.252737)	siammask_loss: 10.288324 (13.320702)	kp_avg_acc: 0.000000 (0.005787)
[2019-08-13 20:04:14,860-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.023619 (0.106890)	data_time: 0.000122 (0.009277)	rpn_cls_loss: 0.000108 (0.001959)	rpn_loc_loss: 0.016338 (0.063708)	kp_hp_loss: 0.607247 (0.817454)	kp_hm_hp_loss: 14.534506 (12.256611)	kp_hp_offset_loss: 0.297192 (0.226631)	kp_loss: 15.438946 (13.300699)	siammask_loss: 15.458660 (13.379105)	kp_avg_acc: 0.000000 (0.006263)
[2019-08-13 20:04:16,262-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.024110 (0.097776)	data_time: 0.000174 (0.007465)	rpn_cls_loss: 0.000172 (0.001603)	rpn_loc_loss: 0.024629 (0.062069)	kp_hp_loss: 0.517063 (0.765788)	kp_hm_hp_loss: 15.669431 (12.401964)	kp_hp_offset_loss: 0.181403 (0.223199)	kp_loss: 16.367895 (13.390951)	siammask_loss: 16.397621 (13.467034)	kp_avg_acc: 0.000000 (0.006344)
[2019-08-13 20:04:17,598-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.023553 (0.091513)	data_time: 0.000113 (0.006276)	rpn_cls_loss: 0.000105 (0.001364)	rpn_loc_loss: 0.032418 (0.064616)	kp_hp_loss: 0.927572 (0.750166)	kp_hm_hp_loss: 14.408101 (12.490158)	kp_hp_offset_loss: 0.219466 (0.224554)	kp_loss: 15.555139 (13.464876)	siammask_loss: 15.594145 (13.543779)	kp_avg_acc: 0.000000 (0.007934)
[2019-08-13 20:04:18,912-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.024148 (0.086071)	data_time: 0.000212 (0.005413)	rpn_cls_loss: 0.000218 (0.001244)	rpn_loc_loss: 0.039302 (0.070519)	kp_hp_loss: 0.980625 (0.750463)	kp_hm_hp_loss: 11.988038 (12.559387)	kp_hp_offset_loss: 0.281322 (0.226328)	kp_loss: 13.249986 (13.536177)	siammask_loss: 13.297367 (13.622043)	kp_avg_acc: 0.000000 (0.009419)
[2019-08-13 20:04:20,291-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.024893 (0.083125)	data_time: 0.000117 (0.004761)	rpn_cls_loss: 0.000178 (0.001121)	rpn_loc_loss: 0.058884 (0.068696)	kp_hp_loss: 0.354881 (0.754561)	kp_hm_hp_loss: 13.249527 (12.483987)	kp_hp_offset_loss: 0.183976 (0.224731)	kp_loss: 13.788384 (13.463280)	siammask_loss: 13.859223 (13.546835)	kp_avg_acc: 0.000000 (0.008242)
[2019-08-13 20:04:21,692-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.031404 (0.081349)	data_time: 0.000148 (0.004260)	rpn_cls_loss: 0.000146 (0.001018)	rpn_loc_loss: 0.059321 (0.067328)	kp_hp_loss: 0.451655 (0.777990)	kp_hm_hp_loss: 9.544337 (12.420260)	kp_hp_offset_loss: 0.250427 (0.229023)	kp_loss: 10.246420 (13.427273)	siammask_loss: 10.317751 (13.509083)	kp_avg_acc: 0.000000 (0.007326)
[2019-08-13 20:04:23,267-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.146359 (0.080961)	data_time: 0.000142 (0.003880)	rpn_cls_loss: 0.005577 (0.001027)	rpn_loc_loss: 0.166697 (0.069091)	kp_hp_loss: 0.934257 (0.773029)	kp_hm_hp_loss: 9.739605 (12.318633)	kp_hp_offset_loss: 0.254012 (0.228977)	kp_loss: 10.927875 (13.320640)	siammask_loss: 11.133488 (13.404574)	kp_avg_acc: 0.000000 (0.007988)
[2019-08-14 00:24:52,326-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 00:24:52,340-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0813/checkpoint_e104.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 00:24:52,367-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 00:24:52,368-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 00:24:52,378-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 00:24:56,281-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 00:24:56,322-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 00:24:56,435-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 00:24:56,436-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 00:24:56,440-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 00:24:56,540-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 00:24:56,540-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 00:24:56,541-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 00:24:56,551-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 00:24:56,742-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 00:24:56,745-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 00:24:56,749-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 00:24:56,749-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 00:24:56,750-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 00:24:56,753-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 00:24:56,753-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 00:24:56,754-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 00:25:09,522-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 00:25:11,508-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 00:25:11,509-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked'}
[2019-08-14 00:25:11,510-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 00:25:11,510-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.downsample.1.running_var', 'layer4.2.bn3.bias', 'layer4.2.bn2.running_var', 'layer4.0.conv1.weight', 'layer4.1.conv2.weight', 'layer4.0.bn3.running_var', 'layer4.2.bn3.running_var', 'layer4.2.conv1.weight', 'layer4.2.conv3.weight', 'layer4.1.bn2.running_mean', 'layer4.1.bn3.weight', 'layer4.1.bn3.running_mean', 'layer4.1.bn1.weight', 'layer4.2.conv2.weight', 'layer4.0.bn3.running_mean', 'layer4.1.conv3.weight', 'layer4.0.bn2.running_var', 'layer4.0.conv2.weight', 'layer4.2.bn2.bias', 'layer4.1.conv1.weight', 'layer4.0.bn1.bias', 'layer4.1.bn3.running_var', 'layer4.0.conv3.weight', 'layer4.2.bn1.running_mean', 'layer4.0.downsample.0.weight', 'layer4.2.bn1.running_var', 'layer4.0.bn1.running_mean', 'layer4.0.bn1.weight', 'layer4.1.bn2.bias', 'layer4.0.bn3.weight', 'layer4.1.bn3.bias', 'layer4.2.bn1.bias', 'layer4.2.bn2.running_mean', 'layer4.1.bn2.running_var', 'layer4.0.bn2.bias', 'layer4.0.bn1.running_var', 'layer4.2.bn3.running_mean', 'layer4.0.bn2.running_mean', 'layer4.0.downsample.1.bias', 'layer4.0.downsample.1.weight', 'layer4.0.downsample.1.running_mean', 'layer4.1.bn2.weight', 'layer4.1.bn1.bias', 'layer4.1.bn1.running_var', 'layer4.0.bn2.weight', 'layer4.2.bn3.weight', 'layer4.2.bn2.weight', 'layer4.2.bn1.weight', 'layer4.1.bn1.running_mean', 'layer4.0.bn3.bias'}
[2019-08-14 00:25:11,511-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 00:25:11,511-rk0-load_helper.py# 18] used keys:215
[2019-08-14 00:25:11,532-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 00:25:11,533-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 00:25:11,671-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 00:25:11,675-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0813/checkpoint_e104.pth
[2019-08-14 00:25:13,065-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 00:25:13,067-rk0-load_helper.py# 18] used keys:372
[2019-08-14 00:25:13,299-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 00:25:19,435-rk0-val_siamrcnn.py#272] Validation: [9/1899]	batch_time: 0.140793 (0.251584)	data_time: 0.000127 (0.042401)	rpn_cls_loss: 0.000334 (0.004467)	rpn_loc_loss: 0.033731 (0.054430)	kp_hp_loss: 0.445253 (0.571713)	kp_hm_hp_loss: 0.909595 (1.612792)	kp_hp_offset_loss: 0.186291 (0.211537)	kp_loss: 1.541139 (2.396042)	siammask_loss: 1.581951 (2.465825)	kp_avg_acc: 0.500000 (0.424977)
[2019-08-14 00:25:24,550-rk0-val_siamrcnn.py#272] Validation: [19/1899]	batch_time: 0.108899 (0.180430)	data_time: 0.000133 (0.021434)	rpn_cls_loss: 0.001663 (0.004579)	rpn_loc_loss: 0.033010 (0.067698)	kp_hp_loss: 0.564004 (0.577616)	kp_hm_hp_loss: 3.495624 (1.516430)	kp_hp_offset_loss: 0.274957 (0.213097)	kp_loss: 4.334584 (2.307143)	siammask_loss: 4.375859 (2.392959)	kp_avg_acc: 0.538462 (0.476127)
[2019-08-14 00:25:28,077-rk0-val_siamrcnn.py#272] Validation: [29/1899]	batch_time: 0.129151 (0.147628)	data_time: 0.000120 (0.014435)	rpn_cls_loss: 0.000486 (0.003301)	rpn_loc_loss: 0.035111 (0.072634)	kp_hp_loss: 0.885357 (0.711439)	kp_hm_hp_loss: 4.574136 (2.035226)	kp_hp_offset_loss: 0.270694 (0.221465)	kp_loss: 5.730187 (2.968129)	siammask_loss: 5.772807 (3.058592)	kp_avg_acc: 0.000000 (0.426184)
[2019-08-14 00:25:31,643-rk0-val_siamrcnn.py#272] Validation: [39/1899]	batch_time: 0.102378 (0.133897)	data_time: 0.000106 (0.010917)	rpn_cls_loss: 0.000739 (0.002609)	rpn_loc_loss: 0.348766 (0.078022)	kp_hp_loss: 0.965773 (0.726721)	kp_hm_hp_loss: 0.934765 (2.112462)	kp_hp_offset_loss: 0.219478 (0.225199)	kp_loss: 2.120015 (3.064382)	siammask_loss: 2.539273 (3.160618)	kp_avg_acc: 0.444444 (0.411583)
[2019-08-14 00:25:35,217-rk0-val_siamrcnn.py#272] Validation: [49/1899]	batch_time: 0.146312 (0.123742)	data_time: 0.000643 (0.008800)	rpn_cls_loss: 0.001459 (0.003126)	rpn_loc_loss: 0.043063 (0.082426)	kp_hp_loss: 2.649545 (0.754928)	kp_hm_hp_loss: 8.153205 (2.098578)	kp_hp_offset_loss: 0.277795 (0.229300)	kp_loss: 11.080545 (3.082807)	siammask_loss: 11.133680 (3.184844)	kp_avg_acc: 0.000000 (0.409935)
[2019-08-14 00:25:38,464-rk0-val_siamrcnn.py#272] Validation: [59/1899]	batch_time: 0.139877 (0.111947)	data_time: 0.000144 (0.007369)	rpn_cls_loss: 0.002400 (0.002740)	rpn_loc_loss: 0.076155 (0.082037)	kp_hp_loss: 0.845071 (0.779969)	kp_hm_hp_loss: 5.769410 (2.148765)	kp_hp_offset_loss: 0.174401 (0.227781)	kp_loss: 6.788883 (3.156515)	siammask_loss: 6.882669 (3.257700)	kp_avg_acc: 0.200000 (0.411253)
[2019-08-14 00:25:41,726-rk0-val_siamrcnn.py#272] Validation: [69/1899]	batch_time: 0.024997 (0.105305)	data_time: 0.000113 (0.006361)	rpn_cls_loss: 0.001639 (0.002578)	rpn_loc_loss: 0.059539 (0.080184)	kp_hp_loss: 0.331080 (0.752789)	kp_hm_hp_loss: 1.638752 (2.090651)	kp_hp_offset_loss: 0.186671 (0.226788)	kp_loss: 2.156504 (3.070227)	siammask_loss: 2.229589 (3.169025)	kp_avg_acc: 0.166667 (0.405066)
[2019-08-14 00:25:45,038-rk0-val_siamrcnn.py#272] Validation: [79/1899]	batch_time: 0.024358 (0.102267)	data_time: 0.000103 (0.005609)	rpn_cls_loss: 0.001638 (0.002426)	rpn_loc_loss: 0.078274 (0.078904)	kp_hp_loss: 1.186543 (0.724660)	kp_hm_hp_loss: 1.566580 (2.014495)	kp_hp_offset_loss: 0.230860 (0.226436)	kp_loss: 2.983983 (2.965590)	siammask_loss: 3.079550 (3.062702)	kp_avg_acc: 0.384615 (0.417975)
[2019-08-14 00:25:48,522-rk0-val_siamrcnn.py#272] Validation: [89/1899]	batch_time: 0.025004 (0.100593)	data_time: 0.000126 (0.005017)	rpn_cls_loss: 0.000934 (0.002424)	rpn_loc_loss: 0.057591 (0.077473)	kp_hp_loss: 0.573940 (0.739837)	kp_hm_hp_loss: 1.761458 (2.025517)	kp_hp_offset_loss: 0.239069 (0.227787)	kp_loss: 2.574468 (2.993141)	siammask_loss: 2.644511 (3.088533)	kp_avg_acc: 0.230769 (0.405756)
[2019-08-14 00:25:51,676-rk0-val_siamrcnn.py#272] Validation: [99/1899]	batch_time: 0.025687 (0.097265)	data_time: 0.000213 (0.004545)	rpn_cls_loss: 0.001229 (0.002309)	rpn_loc_loss: 0.108700 (0.079207)	kp_hp_loss: 0.740531 (0.744930)	kp_hm_hp_loss: 1.877335 (2.034153)	kp_hp_offset_loss: 0.243093 (0.227853)	kp_loss: 2.860959 (3.006935)	siammask_loss: 2.992627 (3.104293)	kp_avg_acc: 0.090909 (0.392694)
[2019-08-14 15:36:31,446-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 15:36:31,466-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snaphot/checkpoint_e199.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 15:36:31,481-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 15:36:31,481-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 15:36:31,617-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 15:36:35,441-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 15:36:35,476-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 15:36:35,557-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:36:35,558-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 15:36:35,562-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 15:36:35,641-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:36:35,642-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 15:36:35,642-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 15:36:35,644-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 15:36:35,838-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 15:36:35,841-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 15:36:35,844-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:36:35,845-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 15:36:35,845-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 15:36:35,849-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:36:35,849-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 15:36:35,849-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 15:36:54,338-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 15:36:56,065-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 15:36:56,066-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked'}
[2019-08-14 15:36:56,066-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 15:36:56,067-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn1.bias', 'layer4.2.bn3.running_var', 'layer4.0.bn3.bias', 'layer4.1.conv3.weight', 'layer4.1.bn1.running_var', 'layer4.0.downsample.1.bias', 'layer4.1.bn1.running_mean', 'layer4.1.bn2.running_var', 'layer4.1.bn1.weight', 'layer4.2.bn2.weight', 'layer4.0.conv2.weight', 'layer4.0.bn2.running_var', 'layer4.0.bn2.weight', 'layer4.1.conv1.weight', 'layer4.0.downsample.0.weight', 'layer4.0.bn3.weight', 'layer4.0.downsample.1.running_mean', 'layer4.0.bn3.running_mean', 'layer4.1.bn3.bias', 'layer4.0.conv1.weight', 'layer4.1.bn2.weight', 'layer4.0.conv3.weight', 'layer4.2.bn2.running_mean', 'layer4.2.conv2.weight', 'layer4.2.bn1.weight', 'layer4.2.bn3.weight', 'layer4.1.bn2.running_mean', 'layer4.0.bn3.running_var', 'layer4.0.bn2.running_mean', 'layer4.2.bn1.running_var', 'layer4.2.bn1.running_mean', 'layer4.0.downsample.1.weight', 'layer4.0.bn2.bias', 'layer4.2.conv1.weight', 'layer4.2.bn2.running_var', 'layer4.2.conv3.weight', 'layer4.2.bn3.bias', 'layer4.0.bn1.running_mean', 'layer4.1.bn3.weight', 'layer4.1.bn3.running_var', 'layer4.0.bn1.running_var', 'layer4.0.bn1.weight', 'layer4.1.conv2.weight', 'layer4.1.bn2.bias', 'layer4.0.bn1.bias', 'layer4.0.downsample.1.running_var', 'layer4.1.bn3.running_mean', 'layer4.2.bn2.bias', 'layer4.2.bn3.running_mean', 'layer4.2.bn1.bias'}
[2019-08-14 15:36:56,067-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 15:36:56,067-rk0-load_helper.py# 18] used keys:215
[2019-08-14 15:36:56,105-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 15:36:56,106-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 15:36:56,263-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 15:36:56,267-rk0-load_helper.py# 40] load pretrained model from ./snaphot/checkpoint_e199.pth
[2019-08-14 15:36:57,620-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 15:36:57,622-rk0-load_helper.py# 18] used keys:372
[2019-08-14 15:36:57,715-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 15:41:28,462-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 15:41:28,463-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snaphot/checkpoint_e199.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 15:41:28,464-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 15:41:28,465-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 15:41:28,467-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 15:41:31,649-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 15:41:31,709-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 15:41:31,775-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:41:31,788-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 15:41:31,791-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 15:41:31,857-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:41:31,933-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 15:41:31,933-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 15:41:31,934-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 15:41:32,108-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 15:41:32,669-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 15:41:32,672-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:41:32,707-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 15:41:32,708-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 15:41:32,711-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:41:32,782-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 15:41:32,783-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 15:41:43,626-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 15:41:44,977-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 15:41:44,979-rk0-load_helper.py# 13] [Warning] missing keys: {'bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked'}
[2019-08-14 15:41:44,979-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 15:41:44,980-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn2.bias', 'layer4.1.bn1.bias', 'layer4.0.bn2.weight', 'layer4.1.conv2.weight', 'layer4.2.bn3.bias', 'layer4.0.downsample.1.running_var', 'layer4.1.bn1.running_var', 'layer4.1.conv1.weight', 'layer4.1.bn3.running_mean', 'layer4.2.bn1.weight', 'layer4.0.bn2.running_var', 'layer4.0.bn3.running_mean', 'layer4.1.conv3.weight', 'layer4.0.downsample.0.weight', 'layer4.1.bn3.bias', 'layer4.1.bn2.weight', 'layer4.1.bn3.weight', 'layer4.0.bn1.running_var', 'layer4.2.bn3.running_mean', 'layer4.0.conv1.weight', 'layer4.0.downsample.1.running_mean', 'layer4.2.bn2.running_mean', 'layer4.2.conv2.weight', 'layer4.1.bn1.running_mean', 'layer4.2.bn2.bias', 'layer4.1.bn1.weight', 'layer4.0.bn3.bias', 'layer4.0.bn1.running_mean', 'layer4.2.bn2.running_var', 'layer4.1.bn2.running_mean', 'layer4.2.bn3.running_var', 'layer4.2.conv3.weight', 'layer4.2.bn3.weight', 'layer4.0.downsample.1.bias', 'layer4.0.bn1.weight', 'layer4.0.bn3.weight', 'layer4.0.bn1.bias', 'layer4.2.bn2.weight', 'layer4.1.bn3.running_var', 'layer4.0.bn2.bias', 'layer4.2.bn1.running_mean', 'layer4.0.conv2.weight', 'layer4.1.bn2.running_var', 'layer4.2.bn1.running_var', 'layer4.0.bn3.running_var', 'layer4.2.bn1.bias', 'layer4.2.conv1.weight', 'layer4.0.downsample.1.weight', 'layer4.0.bn2.running_mean', 'layer4.0.conv3.weight'}
[2019-08-14 15:41:44,980-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 15:41:44,981-rk0-load_helper.py# 18] used keys:215
[2019-08-14 15:41:45,014-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 15:41:45,016-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 15:41:45,202-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 15:41:45,206-rk0-load_helper.py# 40] load pretrained model from ./snaphot/checkpoint_e199.pth
[2019-08-14 15:41:46,040-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 15:41:46,043-rk0-load_helper.py# 18] used keys:372
[2019-08-14 15:41:46,130-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 15:41:52,839-rk0-val_siamrcnn.py#272] Validation: [9/1899]	batch_time: 0.028087 (0.305912)	data_time: 0.000097 (0.110045)	rpn_cls_loss: 0.000486 (0.000407)	rpn_loc_loss: 0.042198 (0.042317)	kp_hp_loss: 0.968922 (0.984739)	kp_hm_hp_loss: 3.760632 (3.166349)	kp_hp_offset_loss: 0.296877 (0.283292)	kp_loss: 5.026431 (4.434381)	siammask_loss: 5.077554 (4.485568)	kp_avg_acc: 0.100000 (0.142917)
[2019-08-14 15:41:55,273-rk0-val_siamrcnn.py#272] Validation: [19/1899]	batch_time: 0.023596 (0.164683)	data_time: 0.000081 (0.055109)	rpn_cls_loss: 0.000493 (0.000486)	rpn_loc_loss: 0.116657 (0.058706)	kp_hp_loss: 0.651175 (0.863877)	kp_hm_hp_loss: 2.980798 (3.003430)	kp_hp_offset_loss: 0.217690 (0.259851)	kp_loss: 3.849663 (4.127159)	siammask_loss: 3.990145 (4.198093)	kp_avg_acc: 0.071429 (0.144950)
[2019-08-14 15:41:57,692-rk0-val_siamrcnn.py#272] Validation: [29/1899]	batch_time: 0.022822 (0.117415)	data_time: 0.000106 (0.036795)	rpn_cls_loss: 0.000344 (0.001588)	rpn_loc_loss: 0.031216 (0.063874)	kp_hp_loss: 1.069777 (0.966283)	kp_hm_hp_loss: 4.482002 (3.193398)	kp_hp_offset_loss: 0.291722 (0.261270)	kp_loss: 5.843502 (4.420950)	siammask_loss: 5.881305 (4.499188)	kp_avg_acc: 0.272727 (0.146293)
[2019-08-14 15:42:00,415-rk0-val_siamrcnn.py#272] Validation: [39/1899]	batch_time: 0.024059 (0.094060)	data_time: 0.000114 (0.027647)	rpn_cls_loss: 0.000312 (0.001471)	rpn_loc_loss: 0.047429 (0.060654)	kp_hp_loss: 0.924563 (1.039551)	kp_hm_hp_loss: 3.052381 (3.452040)	kp_hp_offset_loss: 0.197635 (0.263230)	kp_loss: 4.174578 (4.754820)	siammask_loss: 4.231805 (4.829077)	kp_avg_acc: 0.000000 (0.150116)
[2019-08-14 15:42:06,874-rk0-val_siamrcnn.py#272] Validation: [49/1899]	batch_time: 0.022624 (0.079895)	data_time: 0.000088 (0.022157)	rpn_cls_loss: 0.000963 (0.001315)	rpn_loc_loss: 0.039666 (0.062217)	kp_hp_loss: 0.845668 (1.062728)	kp_hm_hp_loss: 2.247761 (3.520319)	kp_hp_offset_loss: 0.314404 (0.260907)	kp_loss: 3.407834 (4.843953)	siammask_loss: 3.456397 (4.919929)	kp_avg_acc: 0.000000 (0.154514)
[2019-08-14 15:42:09,604-rk0-val_siamrcnn.py#272] Validation: [59/1899]	batch_time: 0.022776 (0.071309)	data_time: 0.000103 (0.019251)	rpn_cls_loss: 0.000379 (0.001178)	rpn_loc_loss: 0.018521 (0.063798)	kp_hp_loss: 1.496842 (1.034698)	kp_hm_hp_loss: 3.279369 (3.432014)	kp_hp_offset_loss: 0.252907 (0.259381)	kp_loss: 5.029118 (4.726092)	siammask_loss: 5.051722 (4.803828)	kp_avg_acc: 0.181818 (0.156458)
[2019-08-14 15:42:12,149-rk0-val_siamrcnn.py#272] Validation: [69/1899]	batch_time: 0.022609 (0.064422)	data_time: 0.000108 (0.016527)	rpn_cls_loss: 0.000254 (0.001225)	rpn_loc_loss: 0.029331 (0.062654)	kp_hp_loss: 0.764125 (1.052706)	kp_hm_hp_loss: 1.136757 (3.436617)	kp_hp_offset_loss: 0.213478 (0.257764)	kp_loss: 2.114360 (4.747086)	siammask_loss: 2.149812 (4.823496)	kp_avg_acc: 0.400000 (0.149762)
[2019-08-14 15:42:14,508-rk0-val_siamrcnn.py#272] Validation: [79/1899]	batch_time: 0.022671 (0.059240)	data_time: 0.000109 (0.014485)	rpn_cls_loss: 0.000298 (0.001113)	rpn_loc_loss: 0.047125 (0.060380)	kp_hp_loss: 1.777929 (1.049688)	kp_hm_hp_loss: 6.504375 (3.404190)	kp_hp_offset_loss: 0.256716 (0.259437)	kp_loss: 8.539020 (4.713314)	siammask_loss: 8.595868 (4.786885)	kp_avg_acc: 0.000000 (0.154495)
[2019-08-14 15:42:20,689-rk0-val_siamrcnn.py#272] Validation: [89/1899]	batch_time: 0.025093 (0.055417)	data_time: 0.000112 (0.012900)	rpn_cls_loss: 0.000251 (0.001078)	rpn_loc_loss: 0.059079 (0.060953)	kp_hp_loss: 0.733111 (1.058547)	kp_hm_hp_loss: 2.970341 (3.454130)	kp_hp_offset_loss: 0.254679 (0.257977)	kp_loss: 3.958130 (4.770653)	siammask_loss: 4.029275 (4.844876)	kp_avg_acc: 0.400000 (0.158625)
[2019-08-14 15:42:26,567-rk0-val_siamrcnn.py#272] Validation: [99/1899]	batch_time: 0.025068 (0.052456)	data_time: 0.000088 (0.011631)	rpn_cls_loss: 0.006779 (0.001156)	rpn_loc_loss: 0.348832 (0.063163)	kp_hp_loss: 0.758201 (1.045583)	kp_hm_hp_loss: 1.672974 (3.379064)	kp_hp_offset_loss: 0.271137 (0.259022)	kp_loss: 2.702312 (4.683667)	siammask_loss: 3.127689 (4.760620)	kp_avg_acc: 0.461538 (0.159137)
[2019-08-14 15:42:31,056-rk0-val_siamrcnn.py#272] Validation: [109/1899]	batch_time: 0.024942 (0.050045)	data_time: 0.000102 (0.010591)	rpn_cls_loss: 0.000978 (0.001288)	rpn_loc_loss: 0.061708 (0.064221)	kp_hp_loss: 1.328074 (1.056235)	kp_hm_hp_loss: 2.930261 (3.385011)	kp_hp_offset_loss: 0.259813 (0.258586)	kp_loss: 4.518148 (4.699831)	siammask_loss: 4.593176 (4.778185)	kp_avg_acc: 0.000000 (0.151851)
[2019-08-14 15:42:35,055-rk0-val_siamrcnn.py#272] Validation: [119/1899]	batch_time: 0.024956 (0.047983)	data_time: 0.000097 (0.009723)	rpn_cls_loss: 0.000396 (0.001210)	rpn_loc_loss: 0.060728 (0.062998)	kp_hp_loss: 0.653938 (1.056821)	kp_hm_hp_loss: 2.935775 (3.387397)	kp_hp_offset_loss: 0.252461 (0.259452)	kp_loss: 3.842174 (4.703669)	siammask_loss: 3.915444 (4.780476)	kp_avg_acc: 0.200000 (0.148073)
[2019-08-14 15:42:40,560-rk0-val_siamrcnn.py#272] Validation: [129/1899]	batch_time: 0.025030 (0.046294)	data_time: 0.000088 (0.008990)	rpn_cls_loss: 0.000450 (0.001276)	rpn_loc_loss: 0.025227 (0.063513)	kp_hp_loss: 0.737967 (1.069228)	kp_hm_hp_loss: 2.751295 (3.356338)	kp_hp_offset_loss: 0.261168 (0.259355)	kp_loss: 3.750430 (4.684920)	siammask_loss: 3.781153 (4.762413)	kp_avg_acc: 0.058824 (0.154301)
[2019-08-14 15:42:44,070-rk0-val_siamrcnn.py#272] Validation: [139/1899]	batch_time: 0.027428 (0.044823)	data_time: 0.000097 (0.008359)	rpn_cls_loss: 0.000453 (0.001211)	rpn_loc_loss: 0.042773 (0.064760)	kp_hp_loss: 0.904310 (1.062359)	kp_hm_hp_loss: 4.168598 (3.376995)	kp_hp_offset_loss: 0.262409 (0.258961)	kp_loss: 5.335317 (4.698314)	siammask_loss: 5.387098 (4.777237)	kp_avg_acc: 0.333333 (0.157334)
[2019-08-14 15:42:47,200-rk0-val_siamrcnn.py#272] Validation: [149/1899]	batch_time: 0.024972 (0.043514)	data_time: 0.000100 (0.007813)	rpn_cls_loss: 0.000230 (0.001188)	rpn_loc_loss: 0.067611 (0.065231)	kp_hp_loss: 1.120984 (1.064369)	kp_hm_hp_loss: 3.976293 (3.389967)	kp_hp_offset_loss: 0.306513 (0.258093)	kp_loss: 5.403790 (4.712428)	siammask_loss: 5.485153 (4.791894)	kp_avg_acc: 0.062500 (0.153861)
[2019-08-14 15:42:50,807-rk0-val_siamrcnn.py#272] Validation: [159/1899]	batch_time: 0.027057 (0.042387)	data_time: 0.000253 (0.007336)	rpn_cls_loss: 0.001279 (0.001158)	rpn_loc_loss: 0.134857 (0.066537)	kp_hp_loss: 1.208628 (1.074603)	kp_hm_hp_loss: 2.386892 (3.380855)	kp_hp_offset_loss: 0.242427 (0.258358)	kp_loss: 3.837947 (4.713814)	siammask_loss: 4.001054 (4.794817)	kp_avg_acc: 0.000000 (0.150311)
[2019-08-14 15:42:53,997-rk0-val_siamrcnn.py#272] Validation: [169/1899]	batch_time: 0.024923 (0.041372)	data_time: 0.000092 (0.006915)	rpn_cls_loss: 0.000270 (0.001111)	rpn_loc_loss: 0.051713 (0.065754)	kp_hp_loss: 0.632618 (1.057105)	kp_hm_hp_loss: 2.022879 (3.367513)	kp_hp_offset_loss: 0.304657 (0.258485)	kp_loss: 2.960154 (4.683102)	siammask_loss: 3.022481 (4.763119)	kp_avg_acc: 0.076923 (0.155667)
[2019-08-14 15:42:56,802-rk0-val_siamrcnn.py#272] Validation: [179/1899]	batch_time: 0.024972 (0.040464)	data_time: 0.000089 (0.006539)	rpn_cls_loss: 0.001714 (0.001095)	rpn_loc_loss: 0.060081 (0.064818)	kp_hp_loss: 1.597904 (1.056782)	kp_hm_hp_loss: 5.081866 (3.372773)	kp_hp_offset_loss: 0.233000 (0.258882)	kp_loss: 6.912771 (4.688434)	siammask_loss: 6.986581 (4.767312)	kp_avg_acc: 0.000000 (0.153873)
[2019-08-14 15:42:59,590-rk0-val_siamrcnn.py#272] Validation: [189/1899]	batch_time: 0.024959 (0.039650)	data_time: 0.000092 (0.006203)	rpn_cls_loss: 0.000287 (0.001081)	rpn_loc_loss: 0.032155 (0.066432)	kp_hp_loss: 0.718538 (1.051498)	kp_hm_hp_loss: 3.464498 (3.373659)	kp_hp_offset_loss: 0.299780 (0.259710)	kp_loss: 4.482816 (4.684864)	siammask_loss: 4.521688 (4.765665)	kp_avg_acc: 0.062500 (0.153310)
[2019-08-14 15:43:03,944-rk0-val_siamrcnn.py#272] Validation: [199/1899]	batch_time: 0.027202 (0.038946)	data_time: 0.000141 (0.005901)	rpn_cls_loss: 0.000335 (0.001125)	rpn_loc_loss: 0.037596 (0.067520)	kp_hp_loss: 0.799402 (1.059199)	kp_hm_hp_loss: 2.979965 (3.373575)	kp_hp_offset_loss: 0.303318 (0.259490)	kp_loss: 4.082685 (4.692262)	siammask_loss: 4.128136 (4.774411)	kp_avg_acc: 0.214286 (0.151036)
[2019-08-14 15:43:07,849-rk0-val_siamrcnn.py#272] Validation: [209/1899]	batch_time: 0.028172 (0.038461)	data_time: 0.000111 (0.005759)	rpn_cls_loss: 0.000860 (0.001091)	rpn_loc_loss: 0.027814 (0.066476)	kp_hp_loss: 1.049720 (1.062240)	kp_hm_hp_loss: 3.542276 (3.371899)	kp_hp_offset_loss: 0.226532 (0.258980)	kp_loss: 4.818528 (4.693116)	siammask_loss: 4.852765 (4.773979)	kp_avg_acc: 0.000000 (0.150233)
[2019-08-14 15:43:12,145-rk0-val_siamrcnn.py#272] Validation: [219/1899]	batch_time: 0.024934 (0.037992)	data_time: 0.000090 (0.005504)	rpn_cls_loss: 0.000344 (0.001108)	rpn_loc_loss: 0.038015 (0.065567)	kp_hp_loss: 1.981519 (1.061095)	kp_hm_hp_loss: 4.846241 (3.354828)	kp_hp_offset_loss: 0.255407 (0.259186)	kp_loss: 7.083166 (4.675107)	siammask_loss: 7.129128 (4.754896)	kp_avg_acc: 0.071429 (0.150660)
[2019-08-14 15:43:14,834-rk0-val_siamrcnn.py#272] Validation: [229/1899]	batch_time: 0.025035 (0.037429)	data_time: 0.000091 (0.005271)	rpn_cls_loss: 0.000281 (0.001184)	rpn_loc_loss: 0.020511 (0.065873)	kp_hp_loss: 1.350391 (1.056850)	kp_hm_hp_loss: 2.783584 (3.362448)	kp_hp_offset_loss: 0.242138 (0.258492)	kp_loss: 4.376113 (4.677789)	siammask_loss: 4.401008 (4.758020)	kp_avg_acc: 0.062500 (0.149287)
[2019-08-14 15:43:17,731-rk0-val_siamrcnn.py#272] Validation: [239/1899]	batch_time: 0.024888 (0.036916)	data_time: 0.000090 (0.005059)	rpn_cls_loss: 0.000482 (0.001172)	rpn_loc_loss: 0.097290 (0.065579)	kp_hp_loss: 0.767933 (1.059702)	kp_hm_hp_loss: 2.632963 (3.347515)	kp_hp_offset_loss: 0.224215 (0.257785)	kp_loss: 3.625111 (4.664999)	siammask_loss: 3.742341 (4.744866)	kp_avg_acc: 0.428571 (0.152752)
[2019-08-14 15:43:30,913-rk0-val_siamrcnn.py#272] Validation: [249/1899]	batch_time: 0.024918 (0.036562)	data_time: 0.000086 (0.004864)	rpn_cls_loss: 0.000384 (0.001212)	rpn_loc_loss: 0.188143 (0.067495)	kp_hp_loss: 0.617957 (1.079534)	kp_hm_hp_loss: 2.304061 (3.339570)	kp_hp_offset_loss: 0.283112 (0.258060)	kp_loss: 3.205130 (4.677162)	siammask_loss: 3.431285 (4.759368)	kp_avg_acc: 0.000000 (0.151290)
[2019-08-14 15:43:33,949-rk0-val_siamrcnn.py#272] Validation: [259/1899]	batch_time: 0.024779 (0.036115)	data_time: 0.000088 (0.004683)	rpn_cls_loss: 0.000417 (0.001181)	rpn_loc_loss: 0.024145 (0.067186)	kp_hp_loss: 0.644308 (1.072647)	kp_hm_hp_loss: 2.427839 (3.316217)	kp_hp_offset_loss: 0.297639 (0.257881)	kp_loss: 3.369785 (4.646743)	siammask_loss: 3.399176 (4.728548)	kp_avg_acc: 0.000000 (0.152655)
[2019-08-14 15:43:36,586-rk0-val_siamrcnn.py#272] Validation: [269/1899]	batch_time: 0.024854 (0.035703)	data_time: 0.000091 (0.004515)	rpn_cls_loss: 0.000335 (0.001190)	rpn_loc_loss: 0.077982 (0.067237)	kp_hp_loss: 1.211473 (1.082880)	kp_hm_hp_loss: 2.127543 (3.298748)	kp_hp_offset_loss: 0.282614 (0.258488)	kp_loss: 3.621630 (4.640114)	siammask_loss: 3.715543 (4.721988)	kp_avg_acc: 0.133333 (0.151423)
[2019-08-14 15:43:39,429-rk0-val_siamrcnn.py#272] Validation: [279/1899]	batch_time: 0.025105 (0.035348)	data_time: 0.000092 (0.004361)	rpn_cls_loss: 0.000335 (0.001165)	rpn_loc_loss: 0.037964 (0.067063)	kp_hp_loss: 1.040799 (1.079805)	kp_hm_hp_loss: 1.722955 (3.297703)	kp_hp_offset_loss: 0.291749 (0.258023)	kp_loss: 3.055503 (4.635531)	siammask_loss: 3.101395 (4.717171)	kp_avg_acc: 0.133333 (0.152589)
[2019-08-14 15:43:45,094-rk0-val_siamrcnn.py#272] Validation: [289/1899]	batch_time: 0.025996 (0.035002)	data_time: 0.000210 (0.004217)	rpn_cls_loss: 0.000193 (0.001139)	rpn_loc_loss: 0.024139 (0.066523)	kp_hp_loss: 0.747957 (1.072807)	kp_hm_hp_loss: 2.883114 (3.313019)	kp_hp_offset_loss: 0.300008 (0.258274)	kp_loss: 3.931080 (4.644100)	siammask_loss: 3.960239 (4.725065)	kp_avg_acc: 0.176471 (0.152622)
[2019-08-14 15:43:50,249-rk0-val_siamrcnn.py#272] Validation: [299/1899]	batch_time: 0.024945 (0.034692)	data_time: 0.000091 (0.004082)	rpn_cls_loss: 0.000233 (0.001180)	rpn_loc_loss: 0.046485 (0.066449)	kp_hp_loss: 0.666910 (1.064465)	kp_hm_hp_loss: 3.802598 (3.301715)	kp_hp_offset_loss: 0.242398 (0.258383)	kp_loss: 4.711906 (4.624563)	siammask_loss: 4.767920 (4.705480)	kp_avg_acc: 0.294118 (0.156975)
[2019-08-14 15:43:52,636-rk0-val_siamrcnn.py#272] Validation: [309/1899]	batch_time: 0.024996 (0.034381)	data_time: 0.000095 (0.003957)	rpn_cls_loss: 0.000795 (0.001154)	rpn_loc_loss: 0.097862 (0.066266)	kp_hp_loss: 0.717047 (1.056434)	kp_hm_hp_loss: 3.171412 (3.297323)	kp_hp_offset_loss: 0.288333 (0.258684)	kp_loss: 4.176792 (4.612440)	siammask_loss: 4.295022 (4.693113)	kp_avg_acc: 0.000000 (0.158955)
[2019-08-14 15:43:55,446-rk0-val_siamrcnn.py#272] Validation: [319/1899]	batch_time: 0.024845 (0.034091)	data_time: 0.000089 (0.003838)	rpn_cls_loss: 0.000305 (0.001290)	rpn_loc_loss: 0.061512 (0.066607)	kp_hp_loss: 0.983595 (1.050047)	kp_hm_hp_loss: 1.773652 (3.278131)	kp_hp_offset_loss: 0.206521 (0.258880)	kp_loss: 2.963768 (4.587059)	siammask_loss: 3.037888 (4.668276)	kp_avg_acc: 0.333333 (0.157484)
[2019-08-14 15:43:59,001-rk0-val_siamrcnn.py#272] Validation: [329/1899]	batch_time: 0.024919 (0.033826)	data_time: 0.000090 (0.003727)	rpn_cls_loss: 0.000266 (0.001268)	rpn_loc_loss: 0.054915 (0.066084)	kp_hp_loss: 0.907664 (1.051145)	kp_hm_hp_loss: 2.889156 (3.280515)	kp_hp_offset_loss: 0.219888 (0.258923)	kp_loss: 4.016708 (4.590583)	siammask_loss: 4.082873 (4.671150)	kp_avg_acc: 0.000000 (0.155815)
[2019-08-14 15:44:02,021-rk0-val_siamrcnn.py#272] Validation: [339/1899]	batch_time: 0.024860 (0.033568)	data_time: 0.000088 (0.003623)	rpn_cls_loss: 0.000307 (0.001283)	rpn_loc_loss: 0.024240 (0.065705)	kp_hp_loss: 0.784546 (1.047049)	kp_hm_hp_loss: 3.118796 (3.266368)	kp_hp_offset_loss: 0.261734 (0.259241)	kp_loss: 4.165076 (4.572658)	siammask_loss: 4.194470 (4.652787)	kp_avg_acc: 0.133333 (0.158431)
[2019-08-14 15:44:05,787-rk0-val_siamrcnn.py#272] Validation: [349/1899]	batch_time: 0.024945 (0.033361)	data_time: 0.000089 (0.003524)	rpn_cls_loss: 0.004504 (0.001279)	rpn_loc_loss: 0.184704 (0.066187)	kp_hp_loss: 1.188533 (1.052158)	kp_hm_hp_loss: 4.234633 (3.287310)	kp_hp_offset_loss: 0.216881 (0.258838)	kp_loss: 5.640048 (4.598305)	siammask_loss: 5.866197 (4.679009)	kp_avg_acc: 0.071429 (0.156600)
[2019-08-14 15:44:08,818-rk0-val_siamrcnn.py#272] Validation: [359/1899]	batch_time: 0.024860 (0.033131)	data_time: 0.000091 (0.003431)	rpn_cls_loss: 0.000199 (0.001309)	rpn_loc_loss: 0.027771 (0.066710)	kp_hp_loss: 1.004903 (1.064354)	kp_hm_hp_loss: 4.601246 (3.298352)	kp_hp_offset_loss: 0.225841 (0.258466)	kp_loss: 5.831991 (4.621171)	siammask_loss: 5.865515 (4.702531)	kp_avg_acc: 0.090909 (0.155555)
[2019-08-14 15:44:11,577-rk0-val_siamrcnn.py#272] Validation: [369/1899]	batch_time: 0.024811 (0.032914)	data_time: 0.000091 (0.003343)	rpn_cls_loss: 0.002467 (0.001293)	rpn_loc_loss: 0.068748 (0.066916)	kp_hp_loss: 1.047844 (1.068092)	kp_hm_hp_loss: 2.813904 (3.295793)	kp_hp_offset_loss: 0.222811 (0.258085)	kp_loss: 4.084558 (4.621970)	siammask_loss: 4.169523 (4.703561)	kp_avg_acc: 0.222222 (0.153614)
[2019-08-14 15:44:13,924-rk0-val_siamrcnn.py#272] Validation: [379/1899]	batch_time: 0.024922 (0.032705)	data_time: 0.000090 (0.003260)	rpn_cls_loss: 0.002113 (0.001285)	rpn_loc_loss: 0.047962 (0.067245)	kp_hp_loss: 1.163189 (1.065868)	kp_hm_hp_loss: 3.876128 (3.292312)	kp_hp_offset_loss: 0.233932 (0.257430)	kp_loss: 5.273249 (4.615610)	siammask_loss: 5.332917 (4.697588)	kp_avg_acc: 0.071429 (0.155531)
[2019-08-14 15:44:22,653-rk0-val_siamrcnn.py#272] Validation: [389/1899]	batch_time: 0.031592 (0.032530)	data_time: 0.000099 (0.003180)	rpn_cls_loss: 0.000313 (0.001261)	rpn_loc_loss: 0.091691 (0.066742)	kp_hp_loss: 1.227286 (1.063968)	kp_hm_hp_loss: 3.221854 (3.288164)	kp_hp_offset_loss: 0.225533 (0.257308)	kp_loss: 4.674674 (4.609439)	siammask_loss: 4.785016 (4.690790)	kp_avg_acc: 0.000000 (0.155587)
[2019-08-14 15:44:31,415-rk0-val_siamrcnn.py#272] Validation: [399/1899]	batch_time: 0.024789 (0.032348)	data_time: 0.000088 (0.003105)	rpn_cls_loss: 0.000368 (0.001277)	rpn_loc_loss: 0.019886 (0.066567)	kp_hp_loss: 0.862599 (1.057913)	kp_hm_hp_loss: 2.312569 (3.276317)	kp_hp_offset_loss: 0.304966 (0.257018)	kp_loss: 3.480134 (4.591247)	siammask_loss: 3.504365 (4.672404)	kp_avg_acc: 0.416667 (0.154794)
[2019-08-14 15:44:33,614-rk0-val_siamrcnn.py#272] Validation: [409/1899]	batch_time: 0.024802 (0.032167)	data_time: 0.000090 (0.003033)	rpn_cls_loss: 0.000311 (0.001263)	rpn_loc_loss: 0.054366 (0.066443)	kp_hp_loss: 2.549440 (1.058412)	kp_hm_hp_loss: 3.737714 (3.274980)	kp_hp_offset_loss: 0.284026 (0.257310)	kp_loss: 6.571180 (4.590701)	siammask_loss: 6.636731 (4.671696)	kp_avg_acc: 0.300000 (0.154676)
[2019-08-14 15:44:35,812-rk0-val_siamrcnn.py#272] Validation: [419/1899]	batch_time: 0.024789 (0.031996)	data_time: 0.000087 (0.002965)	rpn_cls_loss: 0.000309 (0.001253)	rpn_loc_loss: 0.161049 (0.066439)	kp_hp_loss: 0.773653 (1.059438)	kp_hm_hp_loss: 2.163095 (3.270085)	kp_hp_offset_loss: 0.171812 (0.256914)	kp_loss: 3.108560 (4.586436)	siammask_loss: 3.302128 (4.667416)	kp_avg_acc: 0.166667 (0.153093)
[2019-08-14 15:44:37,989-rk0-val_siamrcnn.py#272] Validation: [429/1899]	batch_time: 0.024724 (0.031833)	data_time: 0.000089 (0.002900)	rpn_cls_loss: 0.000362 (0.001243)	rpn_loc_loss: 0.186464 (0.066594)	kp_hp_loss: 0.542222 (1.053765)	kp_hm_hp_loss: 2.882610 (3.267010)	kp_hp_offset_loss: 0.293631 (0.257681)	kp_loss: 3.718463 (4.578454)	siammask_loss: 3.942581 (4.659610)	kp_avg_acc: 0.000000 (0.153724)
[2019-08-14 15:44:40,172-rk0-val_siamrcnn.py#272] Validation: [439/1899]	batch_time: 0.024880 (0.031677)	data_time: 0.000101 (0.002837)	rpn_cls_loss: 0.001064 (0.001226)	rpn_loc_loss: 0.076770 (0.066438)	kp_hp_loss: 1.272416 (1.053136)	kp_hm_hp_loss: 2.882643 (3.270978)	kp_hp_offset_loss: 0.209184 (0.257350)	kp_loss: 4.364244 (4.581463)	siammask_loss: 4.457431 (4.662414)	kp_avg_acc: 0.076923 (0.155292)
[2019-08-14 15:44:42,700-rk0-val_siamrcnn.py#272] Validation: [449/1899]	batch_time: 0.024879 (0.031529)	data_time: 0.000101 (0.002778)	rpn_cls_loss: 0.007359 (0.001226)	rpn_loc_loss: 0.034588 (0.066745)	kp_hp_loss: 0.804810 (1.050150)	kp_hm_hp_loss: 2.721969 (3.271199)	kp_hp_offset_loss: 0.259582 (0.257308)	kp_loss: 3.786361 (4.578656)	siammask_loss: 3.835225 (4.659977)	kp_avg_acc: 0.083333 (0.155558)
[2019-08-14 15:44:45,145-rk0-val_siamrcnn.py#272] Validation: [459/1899]	batch_time: 0.024798 (0.031390)	data_time: 0.000087 (0.002722)	rpn_cls_loss: 0.000296 (0.001208)	rpn_loc_loss: 0.022073 (0.066598)	kp_hp_loss: 0.981023 (1.046625)	kp_hm_hp_loss: 2.282089 (3.281628)	kp_hp_offset_loss: 0.323324 (0.257700)	kp_loss: 3.586436 (4.585952)	siammask_loss: 3.613219 (4.667078)	kp_avg_acc: 0.083333 (0.154012)
[2019-08-14 15:44:47,346-rk0-val_siamrcnn.py#272] Validation: [469/1899]	batch_time: 0.024841 (0.031252)	data_time: 0.000090 (0.002667)	rpn_cls_loss: 0.000268 (0.001201)	rpn_loc_loss: 0.014152 (0.066511)	kp_hp_loss: 0.846357 (1.043411)	kp_hm_hp_loss: 2.372745 (3.274863)	kp_hp_offset_loss: 0.243179 (0.257984)	kp_loss: 3.462282 (4.576257)	siammask_loss: 3.479532 (4.657272)	kp_avg_acc: 0.083333 (0.153844)
[2019-08-14 15:44:49,530-rk0-val_siamrcnn.py#272] Validation: [479/1899]	batch_time: 0.025031 (0.031122)	data_time: 0.000091 (0.002615)	rpn_cls_loss: 0.000269 (0.001298)	rpn_loc_loss: 0.011317 (0.066484)	kp_hp_loss: 0.903100 (1.042647)	kp_hm_hp_loss: 3.928473 (3.273935)	kp_hp_offset_loss: 0.299736 (0.258312)	kp_loss: 5.131310 (4.574893)	siammask_loss: 5.145159 (4.655972)	kp_avg_acc: 0.142857 (0.154551)
[2019-08-14 15:44:51,736-rk0-val_siamrcnn.py#272] Validation: [489/1899]	batch_time: 0.024777 (0.030996)	data_time: 0.000091 (0.002565)	rpn_cls_loss: 0.000599 (0.001280)	rpn_loc_loss: 0.024012 (0.066745)	kp_hp_loss: 0.871969 (1.039779)	kp_hm_hp_loss: 2.166533 (3.260763)	kp_hp_offset_loss: 0.257481 (0.258478)	kp_loss: 3.295983 (4.559019)	siammask_loss: 3.325397 (4.640394)	kp_avg_acc: 0.333333 (0.156422)
[2019-08-14 15:44:53,963-rk0-val_siamrcnn.py#272] Validation: [499/1899]	batch_time: 0.024846 (0.030876)	data_time: 0.000093 (0.002517)	rpn_cls_loss: 0.000882 (0.001268)	rpn_loc_loss: 0.123321 (0.066635)	kp_hp_loss: 0.679833 (1.034198)	kp_hm_hp_loss: 2.997738 (3.254282)	kp_hp_offset_loss: 0.256188 (0.258432)	kp_loss: 3.933758 (4.546912)	siammask_loss: 4.082626 (4.628142)	kp_avg_acc: 0.533333 (0.155849)
[2019-08-14 15:44:56,156-rk0-val_siamrcnn.py#272] Validation: [509/1899]	batch_time: 0.024995 (0.030769)	data_time: 0.000091 (0.002471)	rpn_cls_loss: 0.000453 (0.001252)	rpn_loc_loss: 0.185575 (0.066729)	kp_hp_loss: 0.801300 (1.031910)	kp_hm_hp_loss: 2.947787 (3.246898)	kp_hp_offset_loss: 0.308241 (0.258615)	kp_loss: 4.057327 (4.537424)	siammask_loss: 4.280470 (4.618751)	kp_avg_acc: 0.250000 (0.159026)
[2019-08-14 15:44:58,359-rk0-val_siamrcnn.py#272] Validation: [519/1899]	batch_time: 0.025024 (0.030669)	data_time: 0.000091 (0.002426)	rpn_cls_loss: 0.005951 (0.001252)	rpn_loc_loss: 0.038941 (0.066474)	kp_hp_loss: 0.831474 (1.028938)	kp_hm_hp_loss: 3.254364 (3.245199)	kp_hp_offset_loss: 0.280597 (0.258469)	kp_loss: 4.366435 (4.532607)	siammask_loss: 4.419115 (4.613626)	kp_avg_acc: 0.470588 (0.160194)
[2019-08-14 15:45:00,556-rk0-val_siamrcnn.py#272] Validation: [529/1899]	batch_time: 0.024802 (0.030571)	data_time: 0.000090 (0.002384)	rpn_cls_loss: 0.000836 (0.001249)	rpn_loc_loss: 0.077282 (0.066430)	kp_hp_loss: 0.809996 (1.026000)	kp_hm_hp_loss: 3.059451 (3.247184)	kp_hp_offset_loss: 0.241041 (0.258332)	kp_loss: 4.110488 (4.531517)	siammask_loss: 4.204062 (4.612480)	kp_avg_acc: 0.100000 (0.159806)
[2019-08-14 15:45:02,749-rk0-val_siamrcnn.py#272] Validation: [539/1899]	batch_time: 0.024992 (0.030467)	data_time: 0.000090 (0.002342)	rpn_cls_loss: 0.000347 (0.001239)	rpn_loc_loss: 0.042792 (0.066185)	kp_hp_loss: 0.959161 (1.026523)	kp_hm_hp_loss: 3.290215 (3.240501)	kp_hp_offset_loss: 0.286474 (0.258159)	kp_loss: 4.535850 (4.525184)	siammask_loss: 4.587548 (4.605842)	kp_avg_acc: 0.062500 (0.160262)
[2019-08-14 15:45:04,973-rk0-val_siamrcnn.py#272] Validation: [549/1899]	batch_time: 0.024833 (0.030379)	data_time: 0.000092 (0.002303)	rpn_cls_loss: 0.000506 (0.001224)	rpn_loc_loss: 0.016050 (0.065958)	kp_hp_loss: 0.738515 (1.023297)	kp_hm_hp_loss: 3.383999 (3.239375)	kp_hp_offset_loss: 0.192954 (0.257842)	kp_loss: 4.315468 (4.520515)	siammask_loss: 4.335235 (4.600886)	kp_avg_acc: 0.307692 (0.160859)
[2019-08-14 15:45:07,158-rk0-val_siamrcnn.py#272] Validation: [559/1899]	batch_time: 0.024869 (0.030282)	data_time: 0.000094 (0.002265)	rpn_cls_loss: 0.000380 (0.001216)	rpn_loc_loss: 0.029202 (0.066513)	kp_hp_loss: 0.722774 (1.022974)	kp_hm_hp_loss: 3.683361 (3.240617)	kp_hp_offset_loss: 0.334217 (0.257933)	kp_loss: 4.740352 (4.521526)	siammask_loss: 4.775773 (4.602555)	kp_avg_acc: 0.000000 (0.160457)
[2019-08-14 15:45:09,332-rk0-val_siamrcnn.py#272] Validation: [569/1899]	batch_time: 0.024815 (0.030189)	data_time: 0.000095 (0.002228)	rpn_cls_loss: 0.000374 (0.001227)	rpn_loc_loss: 0.046301 (0.066714)	kp_hp_loss: 1.007140 (1.023080)	kp_hm_hp_loss: 2.511039 (3.235283)	kp_hp_offset_loss: 0.218806 (0.257752)	kp_loss: 3.736985 (4.516118)	siammask_loss: 3.792921 (4.597398)	kp_avg_acc: 0.000000 (0.159864)
[2019-08-14 15:45:11,496-rk0-val_siamrcnn.py#272] Validation: [579/1899]	batch_time: 0.024790 (0.030100)	data_time: 0.000086 (0.002192)	rpn_cls_loss: 0.001335 (0.001214)	rpn_loc_loss: 0.045007 (0.066313)	kp_hp_loss: 1.471803 (1.022714)	kp_hm_hp_loss: 3.155427 (3.233228)	kp_hp_offset_loss: 0.297925 (0.257837)	kp_loss: 4.925155 (4.513782)	siammask_loss: 4.980497 (4.594568)	kp_avg_acc: 0.000000 (0.158974)
[2019-08-14 15:45:13,669-rk0-val_siamrcnn.py#272] Validation: [589/1899]	batch_time: 0.024876 (0.030014)	data_time: 0.000087 (0.002158)	rpn_cls_loss: 0.000231 (0.001203)	rpn_loc_loss: 0.025826 (0.065924)	kp_hp_loss: 0.920677 (1.020382)	kp_hm_hp_loss: 3.463491 (3.238454)	kp_hp_offset_loss: 0.269845 (0.257643)	kp_loss: 4.654014 (4.516483)	siammask_loss: 4.685237 (4.596791)	kp_avg_acc: 0.000000 (0.160092)
[2019-08-14 15:45:15,871-rk0-val_siamrcnn.py#272] Validation: [599/1899]	batch_time: 0.025008 (0.029930)	data_time: 0.000098 (0.002124)	rpn_cls_loss: 0.000412 (0.001189)	rpn_loc_loss: 0.024004 (0.065880)	kp_hp_loss: 1.552667 (1.023938)	kp_hm_hp_loss: 5.501066 (3.254261)	kp_hp_offset_loss: 0.239840 (0.257800)	kp_loss: 7.293573 (4.536003)	siammask_loss: 7.322789 (4.616244)	kp_avg_acc: 0.071429 (0.158953)
[2019-08-14 15:45:18,280-rk0-val_siamrcnn.py#272] Validation: [609/1899]	batch_time: 0.024912 (0.029849)	data_time: 0.000093 (0.002092)	rpn_cls_loss: 0.000266 (0.001179)	rpn_loc_loss: 0.069027 (0.065608)	kp_hp_loss: 0.718642 (1.021252)	kp_hm_hp_loss: 2.205928 (3.249338)	kp_hp_offset_loss: 0.295665 (0.258016)	kp_loss: 3.220235 (4.528610)	siammask_loss: 3.303333 (4.608515)	kp_avg_acc: 0.285714 (0.159098)
[2019-08-14 15:45:22,508-rk0-val_siamrcnn.py#272] Validation: [619/1899]	batch_time: 0.026780 (0.029782)	data_time: 0.000086 (0.002061)	rpn_cls_loss: 0.002576 (0.001188)	rpn_loc_loss: 0.278091 (0.065498)	kp_hp_loss: 2.203257 (1.026579)	kp_hm_hp_loss: 5.640914 (3.261784)	kp_hp_offset_loss: 0.310108 (0.257766)	kp_loss: 8.154280 (4.546132)	siammask_loss: 8.490564 (4.625915)	kp_avg_acc: 0.000000 (0.158356)
[2019-08-14 15:45:25,673-rk0-val_siamrcnn.py#272] Validation: [629/1899]	batch_time: 0.024859 (0.029707)	data_time: 0.000076 (0.002031)	rpn_cls_loss: 0.000249 (0.001174)	rpn_loc_loss: 0.043171 (0.065268)	kp_hp_loss: 2.565669 (1.028004)	kp_hm_hp_loss: 7.905937 (3.270797)	kp_hp_offset_loss: 0.223587 (0.257724)	kp_loss: 10.695192 (4.556527)	siammask_loss: 10.747246 (4.636018)	kp_avg_acc: 0.000000 (0.158503)
[2019-08-14 15:45:28,349-rk0-val_siamrcnn.py#272] Validation: [639/1899]	batch_time: 0.024869 (0.029634)	data_time: 0.000081 (0.002002)	rpn_cls_loss: 0.000307 (0.001163)	rpn_loc_loss: 0.079360 (0.065450)	kp_hp_loss: 0.706118 (1.027498)	kp_hm_hp_loss: 2.755448 (3.275308)	kp_hp_offset_loss: 0.189771 (0.257624)	kp_loss: 3.651337 (4.560434)	siammask_loss: 3.746877 (4.640134)	kp_avg_acc: 0.083333 (0.158196)
[2019-08-14 15:45:30,574-rk0-val_siamrcnn.py#272] Validation: [649/1899]	batch_time: 0.042490 (0.029589)	data_time: 0.000089 (0.001974)	rpn_cls_loss: 0.000342 (0.001151)	rpn_loc_loss: 0.051034 (0.064952)	kp_hp_loss: 0.900453 (1.029483)	kp_hm_hp_loss: 2.373605 (3.267200)	kp_hp_offset_loss: 0.214605 (0.257354)	kp_loss: 3.488663 (4.554042)	siammask_loss: 3.550246 (4.633131)	kp_avg_acc: 0.066667 (0.158339)
[2019-08-14 15:45:32,921-rk0-val_siamrcnn.py#272] Validation: [659/1899]	batch_time: 0.025083 (0.029529)	data_time: 0.000092 (0.001946)	rpn_cls_loss: 0.000268 (0.001146)	rpn_loc_loss: 0.009589 (0.064668)	kp_hp_loss: 0.927835 (1.029432)	kp_hm_hp_loss: 2.764354 (3.264344)	kp_hp_offset_loss: 0.293764 (0.257766)	kp_loss: 3.985952 (4.551545)	siammask_loss: 3.997728 (4.630287)	kp_avg_acc: 0.352941 (0.159450)
[2019-08-14 15:45:36,608-rk0-val_siamrcnn.py#272] Validation: [669/1899]	batch_time: 0.024828 (0.031492)	data_time: 0.000085 (0.003926)	rpn_cls_loss: 0.000281 (0.001149)	rpn_loc_loss: 0.016672 (0.064557)	kp_hp_loss: 0.672306 (1.028605)	kp_hm_hp_loss: 4.410049 (3.266186)	kp_hp_offset_loss: 0.227642 (0.257927)	kp_loss: 5.309996 (4.552720)	siammask_loss: 5.330284 (4.631333)	kp_avg_acc: 0.166667 (0.158289)
[2019-08-14 15:45:38,974-rk0-val_siamrcnn.py#272] Validation: [679/1899]	batch_time: 0.024811 (0.031400)	data_time: 0.000090 (0.003870)	rpn_cls_loss: 0.000364 (0.001188)	rpn_loc_loss: 0.151637 (0.064661)	kp_hp_loss: 1.131711 (1.028810)	kp_hm_hp_loss: 2.367272 (3.266110)	kp_hp_offset_loss: 0.279609 (0.257861)	kp_loss: 3.778592 (4.552783)	siammask_loss: 3.960921 (4.631560)	kp_avg_acc: 0.307692 (0.157125)
[2019-08-14 15:45:41,253-rk0-val_siamrcnn.py#272] Validation: [689/1899]	batch_time: 0.024924 (0.031309)	data_time: 0.000098 (0.003817)	rpn_cls_loss: 0.000379 (0.001214)	rpn_loc_loss: 0.058504 (0.064672)	kp_hp_loss: 0.771187 (1.028494)	kp_hm_hp_loss: 3.636751 (3.260407)	kp_hp_offset_loss: 0.241676 (0.258002)	kp_loss: 4.649614 (4.546905)	siammask_loss: 4.720197 (4.625721)	kp_avg_acc: 0.000000 (0.156207)
[2019-08-14 15:45:43,573-rk0-val_siamrcnn.py#272] Validation: [699/1899]	batch_time: 0.024922 (0.031229)	data_time: 0.000089 (0.003764)	rpn_cls_loss: 0.000669 (0.001204)	rpn_loc_loss: 0.065113 (0.064577)	kp_hp_loss: 1.111331 (1.026087)	kp_hm_hp_loss: 4.185627 (3.263625)	kp_hp_offset_loss: 0.222408 (0.257680)	kp_loss: 5.519366 (4.547396)	siammask_loss: 5.598170 (4.626088)	kp_avg_acc: 0.000000 (0.155000)
[2019-08-14 15:45:45,863-rk0-val_siamrcnn.py#272] Validation: [709/1899]	batch_time: 0.024901 (0.031143)	data_time: 0.000096 (0.003714)	rpn_cls_loss: 0.000748 (0.001193)	rpn_loc_loss: 0.056143 (0.064604)	kp_hp_loss: 1.053037 (1.026847)	kp_hm_hp_loss: 1.934862 (3.269080)	kp_hp_offset_loss: 0.205819 (0.257487)	kp_loss: 3.193718 (4.553417)	siammask_loss: 3.261837 (4.632130)	kp_avg_acc: 0.400000 (0.155460)
[2019-08-14 15:45:48,142-rk0-val_siamrcnn.py#272] Validation: [719/1899]	batch_time: 0.024826 (0.031057)	data_time: 0.000091 (0.003665)	rpn_cls_loss: 0.000359 (0.001183)	rpn_loc_loss: 0.138578 (0.064744)	kp_hp_loss: 0.829058 (1.027944)	kp_hm_hp_loss: 1.799658 (3.275115)	kp_hp_offset_loss: 0.362266 (0.257593)	kp_loss: 2.990982 (4.560654)	siammask_loss: 3.157634 (4.639526)	kp_avg_acc: 0.083333 (0.155442)
[2019-08-14 15:45:50,450-rk0-val_siamrcnn.py#272] Validation: [729/1899]	batch_time: 0.024838 (0.030973)	data_time: 0.000090 (0.003617)	rpn_cls_loss: 0.001474 (0.001180)	rpn_loc_loss: 0.121355 (0.064898)	kp_hp_loss: 1.055108 (1.029807)	kp_hm_hp_loss: 2.718890 (3.281009)	kp_hp_offset_loss: 0.235299 (0.257507)	kp_loss: 4.009296 (4.568324)	siammask_loss: 4.156397 (4.647378)	kp_avg_acc: 0.200000 (0.154677)
[2019-08-14 15:45:52,733-rk0-val_siamrcnn.py#272] Validation: [739/1899]	batch_time: 0.024971 (0.030894)	data_time: 0.000089 (0.003570)	rpn_cls_loss: 0.001758 (0.001171)	rpn_loc_loss: 0.041572 (0.064681)	kp_hp_loss: 1.247201 (1.028596)	kp_hm_hp_loss: 3.618540 (3.280548)	kp_hp_offset_loss: 0.241252 (0.257384)	kp_loss: 5.106993 (4.566529)	siammask_loss: 5.158637 (4.645314)	kp_avg_acc: 0.062500 (0.154847)
[2019-08-14 15:45:55,023-rk0-val_siamrcnn.py#272] Validation: [749/1899]	batch_time: 0.024864 (0.030822)	data_time: 0.000086 (0.003525)	rpn_cls_loss: 0.000531 (0.001162)	rpn_loc_loss: 0.104642 (0.064823)	kp_hp_loss: 0.528328 (1.029431)	kp_hm_hp_loss: 3.030132 (3.285744)	kp_hp_offset_loss: 0.199537 (0.257279)	kp_loss: 3.757997 (4.572455)	siammask_loss: 3.884098 (4.651400)	kp_avg_acc: 0.000000 (0.153958)
[2019-08-14 15:45:57,310-rk0-val_siamrcnn.py#272] Validation: [759/1899]	batch_time: 0.024834 (0.030745)	data_time: 0.000089 (0.003480)	rpn_cls_loss: 0.000274 (0.001185)	rpn_loc_loss: 0.011301 (0.064751)	kp_hp_loss: 0.760951 (1.031499)	kp_hm_hp_loss: 5.214878 (3.294107)	kp_hp_offset_loss: 0.282302 (0.257428)	kp_loss: 6.258132 (4.583036)	siammask_loss: 6.271966 (4.661918)	kp_avg_acc: 0.000000 (0.154076)
[2019-08-14 15:45:59,761-rk0-val_siamrcnn.py#272] Validation: [769/1899]	batch_time: 0.024968 (0.030670)	data_time: 0.000108 (0.003437)	rpn_cls_loss: 0.000291 (0.001220)	rpn_loc_loss: 0.017580 (0.065216)	kp_hp_loss: 0.416572 (1.035832)	kp_hm_hp_loss: 3.130545 (3.305770)	kp_hp_offset_loss: 0.273532 (0.257369)	kp_loss: 3.820650 (4.598972)	siammask_loss: 3.842036 (4.678447)	kp_avg_acc: 0.000000 (0.152733)
[2019-08-14 15:46:02,127-rk0-val_siamrcnn.py#272] Validation: [779/1899]	batch_time: 0.024894 (0.030597)	data_time: 0.000087 (0.003395)	rpn_cls_loss: 0.000422 (0.001209)	rpn_loc_loss: 0.043222 (0.065333)	kp_hp_loss: 0.537136 (1.037369)	kp_hm_hp_loss: 3.762423 (3.300107)	kp_hp_offset_loss: 0.259778 (0.257273)	kp_loss: 4.559338 (4.594749)	siammask_loss: 4.611627 (4.674355)	kp_avg_acc: 0.000000 (0.154016)
[2019-08-14 15:46:10,575-rk0-val_siamrcnn.py#272] Validation: [789/1899]	batch_time: 0.025506 (0.030536)	data_time: 0.000121 (0.003355)	rpn_cls_loss: 0.000277 (0.001202)	rpn_loc_loss: 0.153608 (0.065575)	kp_hp_loss: 0.872375 (1.039403)	kp_hm_hp_loss: 2.341963 (3.304625)	kp_hp_offset_loss: 0.234149 (0.257265)	kp_loss: 3.448486 (4.601295)	siammask_loss: 3.633093 (4.681183)	kp_avg_acc: 0.250000 (0.152950)
[2019-08-14 15:46:13,585-rk0-val_siamrcnn.py#272] Validation: [799/1899]	batch_time: 0.024914 (0.030482)	data_time: 0.000094 (0.003315)	rpn_cls_loss: 0.000789 (0.001206)	rpn_loc_loss: 0.052258 (0.066256)	kp_hp_loss: 0.962450 (1.045533)	kp_hm_hp_loss: 4.104393 (3.317473)	kp_hp_offset_loss: 0.317491 (0.257153)	kp_loss: 5.384334 (4.620160)	siammask_loss: 5.447832 (4.700870)	kp_avg_acc: 0.000000 (0.151947)
[2019-08-14 15:46:17,282-rk0-val_siamrcnn.py#272] Validation: [809/1899]	batch_time: 0.029687 (0.030444)	data_time: 0.000091 (0.003277)	rpn_cls_loss: 0.003029 (0.001216)	rpn_loc_loss: 0.015542 (0.066023)	kp_hp_loss: 0.945345 (1.047025)	kp_hm_hp_loss: 3.283816 (3.317740)	kp_hp_offset_loss: 0.288573 (0.257081)	kp_loss: 4.517735 (4.621847)	siammask_loss: 4.539414 (4.702287)	kp_avg_acc: 0.066667 (0.151816)
[2019-08-14 15:46:20,450-rk0-val_siamrcnn.py#272] Validation: [819/1899]	batch_time: 0.024976 (0.030391)	data_time: 0.000097 (0.003239)	rpn_cls_loss: 0.000774 (0.001209)	rpn_loc_loss: 0.020972 (0.066068)	kp_hp_loss: 0.979367 (1.048705)	kp_hm_hp_loss: 1.872162 (3.316054)	kp_hp_offset_loss: 0.230508 (0.257104)	kp_loss: 3.082036 (4.621863)	siammask_loss: 3.107977 (4.702351)	kp_avg_acc: 0.000000 (0.151566)
[2019-08-14 15:46:23,507-rk0-val_siamrcnn.py#272] Validation: [829/1899]	batch_time: 0.028776 (0.030347)	data_time: 0.000088 (0.003203)	rpn_cls_loss: 0.000519 (0.001210)	rpn_loc_loss: 0.078140 (0.065917)	kp_hp_loss: 0.956098 (1.047398)	kp_hm_hp_loss: 2.896280 (3.315791)	kp_hp_offset_loss: 0.190114 (0.256851)	kp_loss: 4.042491 (4.620042)	siammask_loss: 4.136777 (4.700348)	kp_avg_acc: 0.100000 (0.150742)
[2019-08-14 15:46:26,590-rk0-val_siamrcnn.py#272] Validation: [839/1899]	batch_time: 0.025002 (0.030290)	data_time: 0.000093 (0.003167)	rpn_cls_loss: 0.000625 (0.001200)	rpn_loc_loss: 0.137357 (0.066037)	kp_hp_loss: 1.222488 (1.048049)	kp_hm_hp_loss: 6.321740 (3.322907)	kp_hp_offset_loss: 0.241680 (0.256704)	kp_loss: 7.785908 (4.627662)	siammask_loss: 7.951363 (4.708102)	kp_avg_acc: 0.066667 (0.150589)
[2019-08-14 15:46:29,837-rk0-val_siamrcnn.py#272] Validation: [849/1899]	batch_time: 0.025103 (0.030258)	data_time: 0.000155 (0.003132)	rpn_cls_loss: 0.002236 (0.001204)	rpn_loc_loss: 0.110518 (0.066002)	kp_hp_loss: 1.615550 (1.047349)	kp_hm_hp_loss: 2.860043 (3.326457)	kp_hp_offset_loss: 0.291874 (0.256534)	kp_loss: 4.767468 (4.630342)	siammask_loss: 4.902327 (4.710743)	kp_avg_acc: 0.000000 (0.150225)
[2019-08-14 15:46:32,458-rk0-val_siamrcnn.py#272] Validation: [859/1899]	batch_time: 0.024861 (0.030208)	data_time: 0.000091 (0.003098)	rpn_cls_loss: 0.000243 (0.001229)	rpn_loc_loss: 0.023572 (0.066224)	kp_hp_loss: 0.464599 (1.045329)	kp_hm_hp_loss: 4.663024 (3.326473)	kp_hp_offset_loss: 0.223560 (0.256343)	kp_loss: 5.351182 (4.628146)	siammask_loss: 5.379712 (4.708840)	kp_avg_acc: 0.307692 (0.150663)
[2019-08-14 15:46:34,794-rk0-val_siamrcnn.py#272] Validation: [869/1899]	batch_time: 0.024869 (0.030148)	data_time: 0.000100 (0.003065)	rpn_cls_loss: 0.000601 (0.001219)	rpn_loc_loss: 0.101839 (0.066598)	kp_hp_loss: 0.741830 (1.043790)	kp_hm_hp_loss: 1.764720 (3.319267)	kp_hp_offset_loss: 0.259577 (0.256244)	kp_loss: 2.766127 (4.619303)	siammask_loss: 2.888934 (4.700436)	kp_avg_acc: 0.000000 (0.151554)
[2019-08-14 15:46:44,149-rk0-val_siamrcnn.py#272] Validation: [879/1899]	batch_time: 0.026875 (0.030098)	data_time: 0.000099 (0.003032)	rpn_cls_loss: 0.000368 (0.001212)	rpn_loc_loss: 0.112001 (0.066633)	kp_hp_loss: 1.044140 (1.043159)	kp_hm_hp_loss: 4.532135 (3.316856)	kp_hp_offset_loss: 0.188729 (0.256188)	kp_loss: 5.765004 (4.616204)	siammask_loss: 5.899774 (4.697371)	kp_avg_acc: 0.100000 (0.152035)
[2019-08-14 15:46:46,573-rk0-val_siamrcnn.py#272] Validation: [889/1899]	batch_time: 0.025029 (0.030050)	data_time: 0.000087 (0.003000)	rpn_cls_loss: 0.000277 (0.001255)	rpn_loc_loss: 0.024975 (0.066828)	kp_hp_loss: 1.114584 (1.045067)	kp_hm_hp_loss: 4.243384 (3.321056)	kp_hp_offset_loss: 0.203407 (0.256057)	kp_loss: 5.561375 (4.622182)	siammask_loss: 5.591622 (4.703627)	kp_avg_acc: 0.117647 (0.151765)
[2019-08-14 15:46:49,030-rk0-val_siamrcnn.py#272] Validation: [899/1899]	batch_time: 0.025031 (0.030010)	data_time: 0.000091 (0.002968)	rpn_cls_loss: 0.000211 (0.001248)	rpn_loc_loss: 0.106765 (0.066792)	kp_hp_loss: 0.789680 (1.046371)	kp_hm_hp_loss: 2.915388 (3.321050)	kp_hp_offset_loss: 0.231130 (0.255892)	kp_loss: 3.936198 (4.623314)	siammask_loss: 4.064527 (4.704710)	kp_avg_acc: 0.187500 (0.151329)
[2019-08-14 15:46:51,470-rk0-val_siamrcnn.py#272] Validation: [909/1899]	batch_time: 0.028056 (0.029958)	data_time: 0.000094 (0.002938)	rpn_cls_loss: 0.000188 (0.001254)	rpn_loc_loss: 0.033041 (0.066746)	kp_hp_loss: 0.975937 (1.046254)	kp_hm_hp_loss: 3.480584 (3.322937)	kp_hp_offset_loss: 0.272193 (0.256052)	kp_loss: 4.728714 (4.625244)	siammask_loss: 4.768552 (4.706591)	kp_avg_acc: 0.076923 (0.151834)
[2019-08-14 15:46:54,016-rk0-val_siamrcnn.py#272] Validation: [919/1899]	batch_time: 0.024826 (0.029905)	data_time: 0.000092 (0.002907)	rpn_cls_loss: 0.000259 (0.001244)	rpn_loc_loss: 0.046714 (0.066616)	kp_hp_loss: 0.684224 (1.045619)	kp_hm_hp_loss: 2.832284 (3.320154)	kp_hp_offset_loss: 0.245334 (0.256117)	kp_loss: 3.761841 (4.621892)	siammask_loss: 3.818157 (4.703071)	kp_avg_acc: 0.000000 (0.151764)
[2019-08-14 15:46:56,589-rk0-val_siamrcnn.py#272] Validation: [929/1899]	batch_time: 0.025329 (0.029858)	data_time: 0.000088 (0.002878)	rpn_cls_loss: 0.000230 (0.001290)	rpn_loc_loss: 0.073264 (0.066340)	kp_hp_loss: 0.752857 (1.045483)	kp_hm_hp_loss: 3.102579 (3.320201)	kp_hp_offset_loss: 0.268118 (0.256321)	kp_loss: 4.123554 (4.622007)	siammask_loss: 4.211700 (4.702902)	kp_avg_acc: 0.230769 (0.151578)
[2019-08-14 15:46:59,501-rk0-val_siamrcnn.py#272] Validation: [939/1899]	batch_time: 0.024805 (0.029808)	data_time: 0.000089 (0.002849)	rpn_cls_loss: 0.001309 (0.001299)	rpn_loc_loss: 0.108808 (0.066648)	kp_hp_loss: 0.834529 (1.044379)	kp_hm_hp_loss: 1.690149 (3.316247)	kp_hp_offset_loss: 0.265638 (0.256425)	kp_loss: 2.790316 (4.617053)	siammask_loss: 2.922194 (4.698326)	kp_avg_acc: 0.000000 (0.151486)
[2019-08-14 15:47:06,860-rk0-val_siamrcnn.py#272] Validation: [949/1899]	batch_time: 0.025367 (0.029770)	data_time: 0.000099 (0.002821)	rpn_cls_loss: 0.000232 (0.001291)	rpn_loc_loss: 0.037931 (0.066733)	kp_hp_loss: 0.800902 (1.044014)	kp_hm_hp_loss: 2.136669 (3.325738)	kp_hp_offset_loss: 0.228541 (0.256399)	kp_loss: 3.166112 (4.626152)	siammask_loss: 3.211861 (4.707520)	kp_avg_acc: 0.500000 (0.151073)
[2019-08-14 15:47:09,338-rk0-val_siamrcnn.py#272] Validation: [959/1899]	batch_time: 0.024957 (0.029723)	data_time: 0.000089 (0.002793)	rpn_cls_loss: 0.000216 (0.001300)	rpn_loc_loss: 0.041207 (0.066523)	kp_hp_loss: 0.802251 (1.041710)	kp_hm_hp_loss: 2.273625 (3.318904)	kp_hp_offset_loss: 0.331279 (0.256367)	kp_loss: 3.407155 (4.616983)	siammask_loss: 3.456819 (4.698108)	kp_avg_acc: 0.785714 (0.151741)
[2019-08-14 15:47:11,588-rk0-val_siamrcnn.py#272] Validation: [969/1899]	batch_time: 0.025091 (0.029674)	data_time: 0.000154 (0.002767)	rpn_cls_loss: 0.000278 (0.001292)	rpn_loc_loss: 0.039002 (0.066519)	kp_hp_loss: 2.132637 (1.041146)	kp_hm_hp_loss: 4.065066 (3.317788)	kp_hp_offset_loss: 0.240463 (0.256580)	kp_loss: 6.438167 (4.615514)	siammask_loss: 6.485247 (4.696626)	kp_avg_acc: 0.000000 (0.151772)
[2019-08-14 15:47:13,765-rk0-val_siamrcnn.py#272] Validation: [979/1899]	batch_time: 0.024732 (0.029626)	data_time: 0.000090 (0.002740)	rpn_cls_loss: 0.006662 (0.001295)	rpn_loc_loss: 0.103324 (0.066397)	kp_hp_loss: 2.461196 (1.043105)	kp_hm_hp_loss: 3.670962 (3.315180)	kp_hp_offset_loss: 0.277741 (0.256477)	kp_loss: 6.409900 (4.614762)	siammask_loss: 6.540551 (4.695730)	kp_avg_acc: 0.000000 (0.152908)
[2019-08-14 15:47:15,943-rk0-val_siamrcnn.py#272] Validation: [989/1899]	batch_time: 0.024884 (0.029582)	data_time: 0.000099 (0.002714)	rpn_cls_loss: 0.000389 (0.001318)	rpn_loc_loss: 0.042862 (0.066436)	kp_hp_loss: 0.889616 (1.042643)	kp_hm_hp_loss: 2.441428 (3.312618)	kp_hp_offset_loss: 0.221130 (0.256566)	kp_loss: 3.552174 (4.611829)	siammask_loss: 3.603998 (4.692867)	kp_avg_acc: 0.083333 (0.153447)
[2019-08-14 15:47:18,107-rk0-val_siamrcnn.py#272] Validation: [999/1899]	batch_time: 0.024965 (0.029537)	data_time: 0.000078 (0.002690)	rpn_cls_loss: 0.000254 (0.001308)	rpn_loc_loss: 0.036678 (0.066530)	kp_hp_loss: 0.957967 (1.042500)	kp_hm_hp_loss: 2.907891 (3.314679)	kp_hp_offset_loss: 0.289874 (0.256653)	kp_loss: 4.155732 (4.613833)	siammask_loss: 4.200000 (4.694974)	kp_avg_acc: 0.187500 (0.153324)
[2019-08-14 15:47:20,442-rk0-val_siamrcnn.py#272] Validation: [1009/1899]	batch_time: 0.024814 (0.029506)	data_time: 0.000091 (0.002665)	rpn_cls_loss: 0.016117 (0.001315)	rpn_loc_loss: 0.233610 (0.066546)	kp_hp_loss: 3.323471 (1.042033)	kp_hm_hp_loss: 5.605073 (3.312191)	kp_hp_offset_loss: 0.236032 (0.256819)	kp_loss: 9.164576 (4.611042)	siammask_loss: 9.461025 (4.692211)	kp_avg_acc: 0.000000 (0.153877)
[2019-08-14 15:47:22,934-rk0-val_siamrcnn.py#272] Validation: [1019/1899]	batch_time: 0.024834 (0.029464)	data_time: 0.000087 (0.002640)	rpn_cls_loss: 0.000509 (0.001354)	rpn_loc_loss: 0.042926 (0.066276)	kp_hp_loss: 0.978338 (1.044724)	kp_hm_hp_loss: 2.966119 (3.317135)	kp_hp_offset_loss: 0.218593 (0.256779)	kp_loss: 4.163050 (4.618637)	siammask_loss: 4.215070 (4.699521)	kp_avg_acc: 0.000000 (0.154041)
[2019-08-14 15:47:25,936-rk0-val_siamrcnn.py#272] Validation: [1029/1899]	batch_time: 0.025044 (0.029421)	data_time: 0.000084 (0.002616)	rpn_cls_loss: 0.000350 (0.001349)	rpn_loc_loss: 0.095255 (0.066528)	kp_hp_loss: 0.757765 (1.045659)	kp_hm_hp_loss: 4.363699 (3.320148)	kp_hp_offset_loss: 0.258834 (0.256762)	kp_loss: 5.380299 (4.622569)	siammask_loss: 5.494954 (4.703750)	kp_avg_acc: 0.066667 (0.153637)
[2019-08-14 15:47:28,721-rk0-val_siamrcnn.py#272] Validation: [1039/1899]	batch_time: 0.024808 (0.029380)	data_time: 0.000093 (0.002593)	rpn_cls_loss: 0.000547 (0.001339)	rpn_loc_loss: 0.077936 (0.066386)	kp_hp_loss: 1.121465 (1.044166)	kp_hm_hp_loss: 2.487067 (3.316848)	kp_hp_offset_loss: 0.215181 (0.256713)	kp_loss: 3.823713 (4.617727)	siammask_loss: 3.917782 (4.698728)	kp_avg_acc: 0.181818 (0.154672)
[2019-08-14 15:47:31,178-rk0-val_siamrcnn.py#272] Validation: [1049/1899]	batch_time: 0.025169 (0.029339)	data_time: 0.000092 (0.002570)	rpn_cls_loss: 0.000309 (0.001331)	rpn_loc_loss: 0.014220 (0.066215)	kp_hp_loss: 1.001734 (1.043552)	kp_hm_hp_loss: 3.774540 (3.314386)	kp_hp_offset_loss: 0.151987 (0.256550)	kp_loss: 4.928261 (4.614489)	siammask_loss: 4.945634 (4.695277)	kp_avg_acc: 0.333333 (0.154862)
[2019-08-14 15:47:33,497-rk0-val_siamrcnn.py#272] Validation: [1059/1899]	batch_time: 0.025262 (0.029303)	data_time: 0.000102 (0.002548)	rpn_cls_loss: 0.000387 (0.001326)	rpn_loc_loss: 0.035344 (0.066184)	kp_hp_loss: 0.688747 (1.042445)	kp_hm_hp_loss: 2.311517 (3.313617)	kp_hp_offset_loss: 0.187377 (0.256472)	kp_loss: 3.187641 (4.612534)	siammask_loss: 3.230441 (4.693279)	kp_avg_acc: 0.000000 (0.154489)
[2019-08-14 15:47:36,256-rk0-val_siamrcnn.py#272] Validation: [1069/1899]	batch_time: 0.024893 (0.029266)	data_time: 0.000095 (0.002526)	rpn_cls_loss: 0.000588 (0.001319)	rpn_loc_loss: 0.319237 (0.066468)	kp_hp_loss: 1.124299 (1.041639)	kp_hm_hp_loss: 2.954580 (3.316547)	kp_hp_offset_loss: 0.194354 (0.256243)	kp_loss: 4.273234 (4.614431)	siammask_loss: 4.656907 (4.695509)	kp_avg_acc: 0.000000 (0.154835)
[2019-08-14 15:47:39,745-rk0-val_siamrcnn.py#272] Validation: [1079/1899]	batch_time: 0.025610 (0.029239)	data_time: 0.000111 (0.002504)	rpn_cls_loss: 0.000421 (0.001313)	rpn_loc_loss: 0.031470 (0.066470)	kp_hp_loss: 0.626602 (1.040783)	kp_hm_hp_loss: 2.073234 (3.315834)	kp_hp_offset_loss: 0.262484 (0.256153)	kp_loss: 2.962320 (4.612770)	siammask_loss: 3.000505 (4.693845)	kp_avg_acc: 0.600000 (0.155306)
[2019-08-14 15:47:42,537-rk0-val_siamrcnn.py#272] Validation: [1089/1899]	batch_time: 0.024821 (0.029201)	data_time: 0.000090 (0.002483)	rpn_cls_loss: 0.000343 (0.001304)	rpn_loc_loss: 0.020117 (0.066275)	kp_hp_loss: 0.895464 (1.039298)	kp_hm_hp_loss: 2.538527 (3.317635)	kp_hp_offset_loss: 0.311638 (0.256048)	kp_loss: 3.745630 (4.612982)	siammask_loss: 3.770113 (4.693814)	kp_avg_acc: 0.076923 (0.155240)
[2019-08-14 15:50:44,071-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 15:50:44,072-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0813/checkpoint_e104.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 15:50:44,074-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 15:50:44,075-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 15:50:44,077-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 15:50:47,087-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 15:50:47,122-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 15:50:47,189-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:50:47,190-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 15:50:47,192-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 15:50:47,303-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:50:47,303-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 15:50:47,304-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 15:50:47,305-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 15:50:47,398-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 15:50:47,400-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 15:50:47,403-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:50:47,404-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 15:50:47,404-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 15:50:47,407-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 15:50:47,407-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 15:50:47,408-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 15:50:53,308-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 15:50:53,751-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 15:50:53,753-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked'}
[2019-08-14 15:50:53,753-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 15:50:53,753-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.2.bn1.running_var', 'layer4.1.bn3.bias', 'layer4.2.bn1.bias', 'layer4.2.conv3.weight', 'layer4.1.conv1.weight', 'layer4.2.conv2.weight', 'layer4.2.bn3.weight', 'layer4.1.bn2.weight', 'layer4.2.bn3.running_mean', 'layer4.2.bn2.bias', 'layer4.0.bn3.running_var', 'layer4.1.bn1.weight', 'layer4.1.conv2.weight', 'layer4.0.conv3.weight', 'layer4.0.bn1.running_mean', 'layer4.1.bn3.weight', 'layer4.0.conv2.weight', 'layer4.2.bn1.running_mean', 'layer4.0.bn2.weight', 'layer4.0.bn3.weight', 'layer4.0.conv1.weight', 'layer4.0.bn3.bias', 'layer4.1.bn1.bias', 'layer4.1.bn1.running_mean', 'layer4.2.bn1.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn2.running_mean', 'layer4.1.bn3.running_var', 'layer4.0.downsample.1.running_mean', 'layer4.2.bn2.running_var', 'layer4.1.bn1.running_var', 'layer4.1.bn2.bias', 'layer4.2.bn2.weight', 'layer4.1.bn2.running_var', 'layer4.2.bn2.running_mean', 'layer4.0.bn2.bias', 'layer4.0.downsample.0.weight', 'layer4.0.bn1.running_var', 'layer4.1.bn3.running_mean', 'layer4.0.bn2.running_mean', 'layer4.0.downsample.1.bias', 'layer4.2.bn3.running_var', 'layer4.0.downsample.1.weight', 'layer4.2.conv1.weight', 'layer4.0.bn1.bias', 'layer4.0.bn1.weight', 'layer4.1.conv3.weight', 'layer4.0.bn3.running_mean', 'layer4.2.bn3.bias', 'layer4.0.bn2.running_var'}
[2019-08-14 15:50:53,754-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 15:50:53,754-rk0-load_helper.py# 18] used keys:215
[2019-08-14 15:50:53,778-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 15:50:53,779-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 15:50:53,939-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 15:50:53,944-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0813/checkpoint_e104.pth
[2019-08-14 15:50:57,596-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 15:50:57,600-rk0-load_helper.py# 18] used keys:372
[2019-08-14 15:50:57,698-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 15:51:02,695-rk0-val_siamrcnn.py#272] Validation: [9/1899]	batch_time: 0.023763 (0.258226)	data_time: 0.000089 (0.068621)	rpn_cls_loss: 0.000406 (0.007844)	rpn_loc_loss: 0.149381 (0.072893)	kp_hp_loss: 1.199857 (0.626852)	kp_hm_hp_loss: 2.552391 (1.708237)	kp_hp_offset_loss: 0.254582 (0.232963)	kp_loss: 4.006830 (2.568052)	siammask_loss: 4.186492 (2.663368)	kp_avg_acc: 0.125000 (0.399272)
[2019-08-14 15:51:05,026-rk0-val_siamrcnn.py#272] Validation: [19/1899]	batch_time: 0.022928 (0.140702)	data_time: 0.000091 (0.034420)	rpn_cls_loss: 0.002841 (0.007409)	rpn_loc_loss: 0.040811 (0.061988)	kp_hp_loss: 0.310889 (0.625701)	kp_hm_hp_loss: 0.717128 (1.985930)	kp_hp_offset_loss: 0.203367 (0.239436)	kp_loss: 1.231384 (2.851066)	siammask_loss: 1.283198 (2.932861)	kp_avg_acc: 0.647059 (0.408889)
[2019-08-14 15:51:07,308-rk0-val_siamrcnn.py#272] Validation: [29/1899]	batch_time: 0.022531 (0.101473)	data_time: 0.000089 (0.023010)	rpn_cls_loss: 0.003316 (0.005232)	rpn_loc_loss: 0.157604 (0.073619)	kp_hp_loss: 1.005987 (0.761580)	kp_hm_hp_loss: 3.738237 (2.364242)	kp_hp_offset_loss: 0.256798 (0.238236)	kp_loss: 5.001022 (3.364058)	siammask_loss: 5.193463 (3.457633)	kp_avg_acc: 0.000000 (0.368861)
[2019-08-14 15:51:09,576-rk0-val_siamrcnn.py#272] Validation: [39/1899]	batch_time: 0.023070 (0.081864)	data_time: 0.000163 (0.017306)	rpn_cls_loss: 0.000387 (0.004159)	rpn_loc_loss: 0.022561 (0.066933)	kp_hp_loss: 0.492590 (0.696772)	kp_hm_hp_loss: 2.859369 (2.360668)	kp_hp_offset_loss: 0.227183 (0.239498)	kp_loss: 3.579142 (3.296938)	siammask_loss: 3.606602 (3.381416)	kp_avg_acc: 0.466667 (0.390942)
[2019-08-14 15:51:11,832-rk0-val_siamrcnn.py#272] Validation: [49/1899]	batch_time: 0.023529 (0.070185)	data_time: 0.000093 (0.013888)	rpn_cls_loss: 0.002426 (0.004599)	rpn_loc_loss: 0.082611 (0.069244)	kp_hp_loss: 0.350212 (0.749381)	kp_hm_hp_loss: 0.545156 (2.605135)	kp_hp_offset_loss: 0.194019 (0.236724)	kp_loss: 1.089387 (3.591240)	siammask_loss: 1.190947 (3.678932)	kp_avg_acc: 0.500000 (0.378852)
[2019-08-14 15:51:14,122-rk0-val_siamrcnn.py#272] Validation: [59/1899]	batch_time: 0.022762 (0.062349)	data_time: 0.000087 (0.011606)	rpn_cls_loss: 0.000553 (0.003972)	rpn_loc_loss: 0.025292 (0.070694)	kp_hp_loss: 0.289941 (0.749473)	kp_hm_hp_loss: 0.711536 (2.497357)	kp_hp_offset_loss: 0.216306 (0.236254)	kp_loss: 1.217782 (3.483086)	siammask_loss: 1.248685 (3.571890)	kp_avg_acc: 0.562500 (0.385363)
[2019-08-14 15:51:16,417-rk0-val_siamrcnn.py#272] Validation: [69/1899]	batch_time: 0.022453 (0.056712)	data_time: 0.000100 (0.009976)	rpn_cls_loss: 0.000324 (0.003932)	rpn_loc_loss: 0.042335 (0.072696)	kp_hp_loss: 1.356960 (0.833564)	kp_hm_hp_loss: 8.229633 (2.563642)	kp_hp_offset_loss: 0.207690 (0.237926)	kp_loss: 9.794284 (3.635134)	siammask_loss: 9.845409 (3.726301)	kp_avg_acc: 0.200000 (0.368238)
[2019-08-14 15:51:18,645-rk0-val_siamrcnn.py#272] Validation: [79/1899]	batch_time: 0.022822 (0.052508)	data_time: 0.000090 (0.008752)	rpn_cls_loss: 0.000398 (0.003539)	rpn_loc_loss: 0.014999 (0.073739)	kp_hp_loss: 0.668034 (0.853220)	kp_hm_hp_loss: 1.809909 (2.608016)	kp_hp_offset_loss: 0.202786 (0.236501)	kp_loss: 2.680730 (3.697736)	siammask_loss: 2.699126 (3.789763)	kp_avg_acc: 0.333333 (0.372140)
[2019-08-14 15:51:20,847-rk0-val_siamrcnn.py#272] Validation: [89/1899]	batch_time: 0.022884 (0.049216)	data_time: 0.000087 (0.007800)	rpn_cls_loss: 0.000332 (0.003836)	rpn_loc_loss: 0.080206 (0.074696)	kp_hp_loss: 0.375981 (0.825761)	kp_hm_hp_loss: 1.771986 (2.527263)	kp_hp_offset_loss: 0.226625 (0.234974)	kp_loss: 2.374592 (3.587999)	siammask_loss: 2.471171 (3.681470)	kp_avg_acc: 0.470588 (0.371554)
[2019-08-14 15:51:23,376-rk0-val_siamrcnn.py#272] Validation: [99/1899]	batch_time: 0.022624 (0.046596)	data_time: 0.000093 (0.007042)	rpn_cls_loss: 0.001807 (0.003657)	rpn_loc_loss: 0.125464 (0.075280)	kp_hp_loss: 4.904685 (0.851808)	kp_hm_hp_loss: 4.523345 (2.508028)	kp_hp_offset_loss: 0.286261 (0.233502)	kp_loss: 9.714292 (3.593339)	siammask_loss: 9.866655 (3.687331)	kp_avg_acc: 0.000000 (0.367289)
[2019-08-14 15:51:25,801-rk0-val_siamrcnn.py#272] Validation: [109/1899]	batch_time: 0.022632 (0.044485)	data_time: 0.000090 (0.006419)	rpn_cls_loss: 0.000647 (0.003486)	rpn_loc_loss: 0.053166 (0.074246)	kp_hp_loss: 0.456865 (0.836777)	kp_hm_hp_loss: 1.456163 (2.457640)	kp_hp_offset_loss: 0.218818 (0.231953)	kp_loss: 2.131847 (3.526371)	siammask_loss: 2.196293 (3.618951)	kp_avg_acc: 0.250000 (0.373334)
[2019-08-14 15:51:27,973-rk0-val_siamrcnn.py#272] Validation: [119/1899]	batch_time: 0.022748 (0.042701)	data_time: 0.000089 (0.005899)	rpn_cls_loss: 0.000425 (0.003328)	rpn_loc_loss: 0.090729 (0.072927)	kp_hp_loss: 0.487885 (0.812066)	kp_hm_hp_loss: 1.871934 (2.452930)	kp_hp_offset_loss: 0.212979 (0.232945)	kp_loss: 2.572798 (3.497941)	siammask_loss: 2.682097 (3.588781)	kp_avg_acc: 0.200000 (0.373803)
[2019-08-14 15:51:30,227-rk0-val_siamrcnn.py#272] Validation: [129/1899]	batch_time: 0.024800 (0.041226)	data_time: 0.000090 (0.005459)	rpn_cls_loss: 0.000346 (0.003560)	rpn_loc_loss: 0.079594 (0.071293)	kp_hp_loss: 0.784471 (0.824104)	kp_hm_hp_loss: 1.532172 (2.463797)	kp_hp_offset_loss: 0.278122 (0.232436)	kp_loss: 2.594764 (3.520337)	siammask_loss: 2.690622 (3.609448)	kp_avg_acc: 0.466667 (0.372325)
[2019-08-14 15:51:34,272-rk0-val_siamrcnn.py#272] Validation: [139/1899]	batch_time: 0.024676 (0.040150)	data_time: 0.000093 (0.005081)	rpn_cls_loss: 0.000561 (0.003402)	rpn_loc_loss: 0.125493 (0.070158)	kp_hp_loss: 1.081617 (0.817769)	kp_hm_hp_loss: 6.348135 (2.476077)	kp_hp_offset_loss: 0.163391 (0.232676)	kp_loss: 7.593143 (3.526522)	siammask_loss: 7.744296 (3.614113)	kp_avg_acc: 0.000000 (0.375290)
[2019-08-14 15:51:38,547-rk0-val_siamrcnn.py#272] Validation: [149/1899]	batch_time: 0.024928 (0.039227)	data_time: 0.000093 (0.004754)	rpn_cls_loss: 0.014878 (0.003525)	rpn_loc_loss: 0.035913 (0.069632)	kp_hp_loss: 0.748061 (0.801696)	kp_hm_hp_loss: 1.557933 (2.450933)	kp_hp_offset_loss: 0.299281 (0.233056)	kp_loss: 2.605275 (3.485685)	siammask_loss: 2.663248 (3.572768)	kp_avg_acc: 0.272727 (0.375712)
[2019-08-14 15:51:40,812-rk0-val_siamrcnn.py#272] Validation: [159/1899]	batch_time: 0.024807 (0.038354)	data_time: 0.000089 (0.004468)	rpn_cls_loss: 0.000614 (0.003419)	rpn_loc_loss: 0.065433 (0.069078)	kp_hp_loss: 0.482494 (0.788055)	kp_hm_hp_loss: 1.508413 (2.425884)	kp_hp_offset_loss: 0.254584 (0.233900)	kp_loss: 2.245491 (3.447839)	siammask_loss: 2.324625 (3.534151)	kp_avg_acc: 0.500000 (0.375246)
[2019-08-14 15:51:43,111-rk0-val_siamrcnn.py#272] Validation: [169/1899]	batch_time: 0.025062 (0.037631)	data_time: 0.000089 (0.004215)	rpn_cls_loss: 0.000596 (0.003360)	rpn_loc_loss: 0.038206 (0.070606)	kp_hp_loss: 0.404041 (0.774207)	kp_hm_hp_loss: 2.190394 (2.385973)	kp_hp_offset_loss: 0.242132 (0.234561)	kp_loss: 2.836567 (3.394741)	siammask_loss: 2.883011 (3.482829)	kp_avg_acc: 0.357143 (0.378884)
[2019-08-14 15:51:46,869-rk0-val_siamrcnn.py#272] Validation: [179/1899]	batch_time: 0.024768 (0.036926)	data_time: 0.000092 (0.003990)	rpn_cls_loss: 0.000435 (0.003205)	rpn_loc_loss: 0.035646 (0.069373)	kp_hp_loss: 0.353172 (0.769276)	kp_hm_hp_loss: 1.305287 (2.366682)	kp_hp_offset_loss: 0.220479 (0.234549)	kp_loss: 1.878938 (3.370506)	siammask_loss: 1.922148 (3.456959)	kp_avg_acc: 0.666667 (0.383783)
[2019-08-14 15:51:49,118-rk0-val_siamrcnn.py#272] Validation: [189/1899]	batch_time: 0.027929 (0.036340)	data_time: 0.000094 (0.003789)	rpn_cls_loss: 0.000573 (0.003616)	rpn_loc_loss: 0.097227 (0.071164)	kp_hp_loss: 0.706848 (0.770294)	kp_hm_hp_loss: 2.173034 (2.338877)	kp_hp_offset_loss: 0.248455 (0.234384)	kp_loss: 3.128337 (3.343554)	siammask_loss: 3.245583 (3.432567)	kp_avg_acc: 0.357143 (0.385794)
[2019-08-14 15:51:51,411-rk0-val_siamrcnn.py#272] Validation: [199/1899]	batch_time: 0.024682 (0.035803)	data_time: 0.000090 (0.003608)	rpn_cls_loss: 0.002027 (0.003562)	rpn_loc_loss: 0.101337 (0.071854)	kp_hp_loss: 2.124387 (0.781336)	kp_hm_hp_loss: 4.004056 (2.386624)	kp_hp_offset_loss: 0.219732 (0.234898)	kp_loss: 6.348175 (3.402858)	siammask_loss: 6.471805 (3.492645)	kp_avg_acc: 0.000000 (0.378514)
[2019-08-14 15:51:53,639-rk0-val_siamrcnn.py#272] Validation: [209/1899]	batch_time: 0.029525 (0.035320)	data_time: 0.000091 (0.003444)	rpn_cls_loss: 0.001075 (0.003511)	rpn_loc_loss: 0.022514 (0.070376)	kp_hp_loss: 1.172980 (0.772635)	kp_hm_hp_loss: 5.989301 (2.379455)	kp_hp_offset_loss: 0.265884 (0.234415)	kp_loss: 7.428165 (3.386505)	siammask_loss: 7.456257 (3.474467)	kp_avg_acc: 0.000000 (0.379369)
[2019-08-14 15:51:58,366-rk0-val_siamrcnn.py#272] Validation: [219/1899]	batch_time: 0.024861 (0.034908)	data_time: 0.000100 (0.003295)	rpn_cls_loss: 0.000607 (0.003653)	rpn_loc_loss: 0.048961 (0.069748)	kp_hp_loss: 0.906232 (0.768011)	kp_hm_hp_loss: 1.933067 (2.420106)	kp_hp_offset_loss: 0.243113 (0.234488)	kp_loss: 3.082411 (3.422604)	siammask_loss: 3.141771 (3.509955)	kp_avg_acc: 0.200000 (0.377834)
[2019-08-14 15:52:03,394-rk0-val_siamrcnn.py#272] Validation: [229/1899]	batch_time: 0.024722 (0.034519)	data_time: 0.000090 (0.003160)	rpn_cls_loss: 0.000982 (0.003534)	rpn_loc_loss: 0.044988 (0.070249)	kp_hp_loss: 0.247324 (0.786215)	kp_hm_hp_loss: 0.662473 (2.457118)	kp_hp_offset_loss: 0.236981 (0.235139)	kp_loss: 1.146779 (3.478471)	siammask_loss: 1.201747 (3.566304)	kp_avg_acc: 0.750000 (0.371977)
[2019-08-14 15:52:05,572-rk0-val_siamrcnn.py#272] Validation: [239/1899]	batch_time: 0.024889 (0.034170)	data_time: 0.000089 (0.003036)	rpn_cls_loss: 0.000409 (0.003493)	rpn_loc_loss: 0.024420 (0.070508)	kp_hp_loss: 0.384841 (0.784032)	kp_hm_hp_loss: 2.512137 (2.447736)	kp_hp_offset_loss: 0.190441 (0.235558)	kp_loss: 3.087419 (3.467326)	siammask_loss: 3.117132 (3.555429)	kp_avg_acc: 0.384615 (0.374527)
[2019-08-14 15:52:07,749-rk0-val_siamrcnn.py#272] Validation: [249/1899]	batch_time: 0.024956 (0.033800)	data_time: 0.000088 (0.002921)	rpn_cls_loss: 0.002175 (0.003458)	rpn_loc_loss: 0.048675 (0.071722)	kp_hp_loss: 1.329746 (0.805295)	kp_hm_hp_loss: 3.352077 (2.452691)	kp_hp_offset_loss: 0.248576 (0.235970)	kp_loss: 4.930399 (3.493955)	siammask_loss: 4.990983 (3.583481)	kp_avg_acc: 0.000000 (0.367446)
[2019-08-14 15:52:09,941-rk0-val_siamrcnn.py#272] Validation: [259/1899]	batch_time: 0.024909 (0.033461)	data_time: 0.000087 (0.002815)	rpn_cls_loss: 0.000448 (0.003423)	rpn_loc_loss: 0.030351 (0.071541)	kp_hp_loss: 0.393032 (0.801042)	kp_hm_hp_loss: 0.873947 (2.454091)	kp_hp_offset_loss: 0.213838 (0.235888)	kp_loss: 1.480816 (3.491020)	siammask_loss: 1.517686 (3.580292)	kp_avg_acc: 0.625000 (0.369373)
[2019-08-14 15:52:12,124-rk0-val_siamrcnn.py#272] Validation: [269/1899]	batch_time: 0.024823 (0.033148)	data_time: 0.000091 (0.002716)	rpn_cls_loss: 0.000416 (0.003344)	rpn_loc_loss: 0.120873 (0.072405)	kp_hp_loss: 0.820978 (0.801510)	kp_hm_hp_loss: 1.946645 (2.452450)	kp_hp_offset_loss: 0.265624 (0.235669)	kp_loss: 3.033247 (3.489628)	siammask_loss: 3.178711 (3.579859)	kp_avg_acc: 0.363636 (0.367915)
[2019-08-14 15:52:14,269-rk0-val_siamrcnn.py#272] Validation: [279/1899]	batch_time: 0.024777 (0.032863)	data_time: 0.000090 (0.002626)	rpn_cls_loss: 0.000718 (0.003335)	rpn_loc_loss: 0.143885 (0.072742)	kp_hp_loss: 0.932915 (0.811772)	kp_hm_hp_loss: 2.849851 (2.448047)	kp_hp_offset_loss: 0.258372 (0.235992)	kp_loss: 4.041138 (3.495810)	siammask_loss: 4.214519 (3.586437)	kp_avg_acc: 0.230769 (0.369832)
[2019-08-14 15:52:16,405-rk0-val_siamrcnn.py#272] Validation: [289/1899]	batch_time: 0.024758 (0.032589)	data_time: 0.000104 (0.002541)	rpn_cls_loss: 0.002768 (0.003444)	rpn_loc_loss: 0.136122 (0.073480)	kp_hp_loss: 0.637920 (0.815801)	kp_hm_hp_loss: 1.346526 (2.455274)	kp_hp_offset_loss: 0.214313 (0.235994)	kp_loss: 2.198758 (3.507067)	siammask_loss: 2.364873 (3.598689)	kp_avg_acc: 0.727273 (0.371245)
[2019-08-14 15:52:19,505-rk0-val_siamrcnn.py#272] Validation: [299/1899]	batch_time: 0.024919 (0.035452)	data_time: 0.000090 (0.005531)	rpn_cls_loss: 0.003174 (0.003503)	rpn_loc_loss: 0.178680 (0.074675)	kp_hp_loss: 0.531503 (0.815629)	kp_hm_hp_loss: 1.627049 (2.441049)	kp_hp_offset_loss: 0.255178 (0.235840)	kp_loss: 2.413730 (3.492517)	siammask_loss: 2.631320 (3.585631)	kp_avg_acc: 0.500000 (0.371577)
[2019-08-14 15:52:21,698-rk0-val_siamrcnn.py#272] Validation: [309/1899]	batch_time: 0.024803 (0.035114)	data_time: 0.000098 (0.005358)	rpn_cls_loss: 0.001026 (0.003622)	rpn_loc_loss: 0.112350 (0.074864)	kp_hp_loss: 0.512555 (0.807335)	kp_hm_hp_loss: 2.197185 (2.409674)	kp_hp_offset_loss: 0.223200 (0.235864)	kp_loss: 2.932940 (3.452872)	siammask_loss: 3.068786 (3.546332)	kp_avg_acc: 0.200000 (0.375041)
[2019-08-14 15:52:23,875-rk0-val_siamrcnn.py#272] Validation: [319/1899]	batch_time: 0.024911 (0.034798)	data_time: 0.000087 (0.005195)	rpn_cls_loss: 0.000444 (0.003546)	rpn_loc_loss: 0.027210 (0.074472)	kp_hp_loss: 0.582343 (0.805087)	kp_hm_hp_loss: 6.312644 (2.421100)	kp_hp_offset_loss: 0.223286 (0.236313)	kp_loss: 7.118272 (3.462499)	siammask_loss: 7.151367 (3.555413)	kp_avg_acc: 0.125000 (0.376462)
[2019-08-14 15:52:26,031-rk0-val_siamrcnn.py#272] Validation: [329/1899]	batch_time: 0.025015 (0.034506)	data_time: 0.000076 (0.005043)	rpn_cls_loss: 0.001587 (0.003472)	rpn_loc_loss: 0.146453 (0.075375)	kp_hp_loss: 0.643495 (0.799147)	kp_hm_hp_loss: 2.714947 (2.416277)	kp_hp_offset_loss: 0.262127 (0.236470)	kp_loss: 3.620569 (3.451894)	siammask_loss: 3.797900 (3.545817)	kp_avg_acc: 0.545455 (0.378805)
[2019-08-14 15:52:28,279-rk0-val_siamrcnn.py#272] Validation: [339/1899]	batch_time: 0.024797 (0.034226)	data_time: 0.000090 (0.004899)	rpn_cls_loss: 0.000493 (0.003414)	rpn_loc_loss: 0.050333 (0.075146)	kp_hp_loss: 1.185192 (0.791797)	kp_hm_hp_loss: 5.123570 (2.404820)	kp_hp_offset_loss: 0.218257 (0.236397)	kp_loss: 6.527020 (3.433012)	siammask_loss: 6.587912 (3.526602)	kp_avg_acc: 0.266667 (0.381249)
[2019-08-14 15:52:30,678-rk0-val_siamrcnn.py#272] Validation: [349/1899]	batch_time: 0.024853 (0.034110)	data_time: 0.000076 (0.004886)	rpn_cls_loss: 0.000537 (0.003346)	rpn_loc_loss: 0.055366 (0.074753)	kp_hp_loss: 0.882740 (0.788591)	kp_hm_hp_loss: 4.278708 (2.417540)	kp_hp_offset_loss: 0.308480 (0.236856)	kp_loss: 5.469928 (3.442985)	siammask_loss: 5.536903 (3.536035)	kp_avg_acc: 0.250000 (0.380942)
[2019-08-14 15:52:32,975-rk0-val_siamrcnn.py#272] Validation: [359/1899]	batch_time: 0.025137 (0.033857)	data_time: 0.000092 (0.004755)	rpn_cls_loss: 0.004518 (0.003331)	rpn_loc_loss: 0.040911 (0.075281)	kp_hp_loss: 1.699126 (0.795882)	kp_hm_hp_loss: 4.273761 (2.444739)	kp_hp_offset_loss: 0.286561 (0.237332)	kp_loss: 6.259448 (3.477953)	siammask_loss: 6.313060 (3.571621)	kp_avg_acc: 0.230769 (0.379864)
[2019-08-14 15:52:35,138-rk0-val_siamrcnn.py#272] Validation: [369/1899]	batch_time: 0.025052 (0.033616)	data_time: 0.000087 (0.004631)	rpn_cls_loss: 0.000286 (0.003511)	rpn_loc_loss: 0.056394 (0.075902)	kp_hp_loss: 0.273826 (0.790223)	kp_hm_hp_loss: 0.669002 (2.420363)	kp_hp_offset_loss: 0.225765 (0.236880)	kp_loss: 1.168594 (3.447465)	siammask_loss: 1.236553 (3.542058)	kp_avg_acc: 0.625000 (0.379306)
[2019-08-14 15:52:37,288-rk0-val_siamrcnn.py#272] Validation: [379/1899]	batch_time: 0.024879 (0.033408)	data_time: 0.000084 (0.004513)	rpn_cls_loss: 0.002531 (0.003805)	rpn_loc_loss: 0.067475 (0.075698)	kp_hp_loss: 0.589237 (0.787632)	kp_hm_hp_loss: 1.561536 (2.425854)	kp_hp_offset_loss: 0.218414 (0.236891)	kp_loss: 2.369187 (3.450375)	siammask_loss: 2.452688 (3.545018)	kp_avg_acc: 0.428571 (0.379873)
[2019-08-14 15:52:39,488-rk0-val_siamrcnn.py#272] Validation: [389/1899]	batch_time: 0.024802 (0.033200)	data_time: 0.000096 (0.004401)	rpn_cls_loss: 0.000345 (0.003769)	rpn_loc_loss: 0.036111 (0.075843)	kp_hp_loss: 1.240894 (0.784661)	kp_hm_hp_loss: 3.757717 (2.421436)	kp_hp_offset_loss: 0.233765 (0.236286)	kp_loss: 5.232376 (3.442381)	siammask_loss: 5.276054 (3.537162)	kp_avg_acc: 0.333333 (0.380474)
[2019-08-14 15:52:41,726-rk0-val_siamrcnn.py#272] Validation: [399/1899]	batch_time: 0.024959 (0.033038)	data_time: 0.000091 (0.004295)	rpn_cls_loss: 0.000394 (0.003805)	rpn_loc_loss: 0.028765 (0.075990)	kp_hp_loss: 0.355872 (0.792530)	kp_hm_hp_loss: 2.025347 (2.424283)	kp_hp_offset_loss: 0.274703 (0.236147)	kp_loss: 2.655921 (3.452958)	siammask_loss: 2.690833 (3.547953)	kp_avg_acc: 0.500000 (0.379525)
[2019-08-14 15:52:43,954-rk0-val_siamrcnn.py#272] Validation: [409/1899]	batch_time: 0.025027 (0.032855)	data_time: 0.000091 (0.004195)	rpn_cls_loss: 0.000425 (0.003741)	rpn_loc_loss: 0.174671 (0.076583)	kp_hp_loss: 0.397994 (0.786159)	kp_hm_hp_loss: 1.680625 (2.424025)	kp_hp_offset_loss: 0.188619 (0.236364)	kp_loss: 2.267238 (3.446546)	siammask_loss: 2.477268 (3.542188)	kp_avg_acc: 0.461538 (0.379065)
[2019-08-14 15:52:46,170-rk0-val_siamrcnn.py#272] Validation: [419/1899]	batch_time: 0.024886 (0.032673)	data_time: 0.000077 (0.004099)	rpn_cls_loss: 0.000325 (0.003668)	rpn_loc_loss: 0.141728 (0.076169)	kp_hp_loss: 0.632204 (0.779387)	kp_hm_hp_loss: 3.526112 (2.407595)	kp_hp_offset_loss: 0.214676 (0.236445)	kp_loss: 4.372992 (3.423425)	siammask_loss: 4.543391 (3.518497)	kp_avg_acc: 0.363636 (0.382995)
[2019-08-14 15:52:48,340-rk0-val_siamrcnn.py#272] Validation: [429/1899]	batch_time: 0.024904 (0.032500)	data_time: 0.000090 (0.004008)	rpn_cls_loss: 0.004287 (0.003645)	rpn_loc_loss: 0.017367 (0.075458)	kp_hp_loss: 0.531960 (0.777647)	kp_hm_hp_loss: 1.398386 (2.398597)	kp_hp_offset_loss: 0.237155 (0.236739)	kp_loss: 2.167501 (3.412981)	siammask_loss: 2.192629 (3.507178)	kp_avg_acc: 0.400000 (0.384466)
[2019-08-14 15:52:50,546-rk0-val_siamrcnn.py#272] Validation: [439/1899]	batch_time: 0.024813 (0.032359)	data_time: 0.000089 (0.003920)	rpn_cls_loss: 0.000424 (0.003642)	rpn_loc_loss: 0.064606 (0.075677)	kp_hp_loss: 0.728262 (0.779498)	kp_hm_hp_loss: 2.733348 (2.397480)	kp_hp_offset_loss: 0.228397 (0.236997)	kp_loss: 3.690008 (3.413973)	siammask_loss: 3.767959 (3.508430)	kp_avg_acc: 0.312500 (0.384120)
[2019-08-14 15:52:52,724-rk0-val_siamrcnn.py#272] Validation: [449/1899]	batch_time: 0.024965 (0.032197)	data_time: 0.000094 (0.003837)	rpn_cls_loss: 0.000621 (0.003622)	rpn_loc_loss: 0.072615 (0.075397)	kp_hp_loss: 1.088875 (0.774529)	kp_hm_hp_loss: 4.232197 (2.387761)	kp_hp_offset_loss: 0.285215 (0.236884)	kp_loss: 5.606287 (3.399172)	siammask_loss: 5.694046 (3.493273)	kp_avg_acc: 0.000000 (0.384445)
[2019-08-14 15:52:54,919-rk0-val_siamrcnn.py#272] Validation: [459/1899]	batch_time: 0.024671 (0.032039)	data_time: 0.000083 (0.003757)	rpn_cls_loss: 0.000957 (0.003572)	rpn_loc_loss: 0.078438 (0.075370)	kp_hp_loss: 0.929400 (0.773839)	kp_hm_hp_loss: 3.072582 (2.398297)	kp_hp_offset_loss: 0.275740 (0.237033)	kp_loss: 4.277722 (3.409167)	siammask_loss: 4.372805 (3.503185)	kp_avg_acc: 0.363636 (0.386232)
[2019-08-14 15:52:57,151-rk0-val_siamrcnn.py#272] Validation: [469/1899]	batch_time: 0.025022 (0.031909)	data_time: 0.000089 (0.003681)	rpn_cls_loss: 0.000282 (0.003591)	rpn_loc_loss: 0.046740 (0.075084)	kp_hp_loss: 0.184702 (0.774885)	kp_hm_hp_loss: 0.398941 (2.428207)	kp_hp_offset_loss: 0.178513 (0.236551)	kp_loss: 0.762155 (3.439642)	siammask_loss: 0.818525 (3.533335)	kp_avg_acc: 0.928571 (0.385729)
[2019-08-14 15:52:59,328-rk0-val_siamrcnn.py#272] Validation: [479/1899]	batch_time: 0.024955 (0.031764)	data_time: 0.000088 (0.003607)	rpn_cls_loss: 0.000377 (0.003542)	rpn_loc_loss: 0.055886 (0.075282)	kp_hp_loss: 0.359480 (0.779757)	kp_hm_hp_loss: 2.904273 (2.444687)	kp_hp_offset_loss: 0.145860 (0.236015)	kp_loss: 3.409613 (3.460458)	siammask_loss: 3.477052 (3.554339)	kp_avg_acc: 0.727273 (0.384675)
[2019-08-14 15:53:01,511-rk0-val_siamrcnn.py#272] Validation: [489/1899]	batch_time: 0.024884 (0.031626)	data_time: 0.000088 (0.003537)	rpn_cls_loss: 0.000320 (0.003545)	rpn_loc_loss: 0.026204 (0.074988)	kp_hp_loss: 0.312305 (0.777594)	kp_hm_hp_loss: 1.110263 (2.448927)	kp_hp_offset_loss: 0.223215 (0.235932)	kp_loss: 1.645784 (3.462452)	siammask_loss: 1.677549 (3.555983)	kp_avg_acc: 0.764706 (0.385641)
[2019-08-14 15:53:03,713-rk0-val_siamrcnn.py#272] Validation: [499/1899]	batch_time: 0.024920 (0.031492)	data_time: 0.000089 (0.003469)	rpn_cls_loss: 0.000610 (0.003566)	rpn_loc_loss: 0.078701 (0.075246)	kp_hp_loss: 2.160787 (0.776719)	kp_hm_hp_loss: 9.021531 (2.457919)	kp_hp_offset_loss: 0.243988 (0.236028)	kp_loss: 11.426306 (3.470664)	siammask_loss: 11.521357 (3.564526)	kp_avg_acc: 0.076923 (0.383611)
[2019-08-14 15:53:05,919-rk0-val_siamrcnn.py#272] Validation: [509/1899]	batch_time: 0.025017 (0.031366)	data_time: 0.000093 (0.003404)	rpn_cls_loss: 0.000990 (0.003540)	rpn_loc_loss: 0.062850 (0.075006)	kp_hp_loss: 0.351563 (0.770582)	kp_hm_hp_loss: 1.414643 (2.440937)	kp_hp_offset_loss: 0.246217 (0.235808)	kp_loss: 2.012424 (3.447325)	siammask_loss: 2.088834 (3.540874)	kp_avg_acc: 0.357143 (0.386129)
[2019-08-14 15:53:08,056-rk0-val_siamrcnn.py#272] Validation: [519/1899]	batch_time: 0.024822 (0.031242)	data_time: 0.000090 (0.003342)	rpn_cls_loss: 0.000625 (0.003500)	rpn_loc_loss: 0.057355 (0.075146)	kp_hp_loss: 0.507150 (0.774113)	kp_hm_hp_loss: 2.335798 (2.451606)	kp_hp_offset_loss: 0.247569 (0.235530)	kp_loss: 3.090518 (3.461248)	siammask_loss: 3.159969 (3.554925)	kp_avg_acc: 0.285714 (0.385342)
[2019-08-14 15:53:10,253-rk0-val_siamrcnn.py#272] Validation: [529/1899]	batch_time: 0.024977 (0.031124)	data_time: 0.000088 (0.003282)	rpn_cls_loss: 0.000741 (0.003460)	rpn_loc_loss: 0.054762 (0.075082)	kp_hp_loss: 1.062858 (0.775567)	kp_hm_hp_loss: 2.782510 (2.436964)	kp_hp_offset_loss: 0.255166 (0.235292)	kp_loss: 4.100534 (3.447822)	siammask_loss: 4.166990 (3.541381)	kp_avg_acc: 0.200000 (0.385658)
[2019-08-14 15:53:12,454-rk0-val_siamrcnn.py#272] Validation: [539/1899]	batch_time: 0.024674 (0.031009)	data_time: 0.000090 (0.003224)	rpn_cls_loss: 0.000761 (0.003422)	rpn_loc_loss: 0.051007 (0.074879)	kp_hp_loss: 1.022089 (0.774227)	kp_hm_hp_loss: 3.150460 (2.424136)	kp_hp_offset_loss: 0.164165 (0.235096)	kp_loss: 4.336714 (3.433457)	siammask_loss: 4.398683 (3.526735)	kp_avg_acc: 0.375000 (0.386007)
[2019-08-14 15:53:14,595-rk0-val_siamrcnn.py#272] Validation: [549/1899]	batch_time: 0.025059 (0.030899)	data_time: 0.000090 (0.003168)	rpn_cls_loss: 0.001614 (0.003377)	rpn_loc_loss: 0.016355 (0.075096)	kp_hp_loss: 2.365121 (0.787562)	kp_hm_hp_loss: 4.023149 (2.450228)	kp_hp_offset_loss: 0.273539 (0.235043)	kp_loss: 6.661809 (3.472830)	siammask_loss: 6.683048 (3.566324)	kp_avg_acc: 0.000000 (0.384300)
[2019-08-14 15:53:16,770-rk0-val_siamrcnn.py#272] Validation: [559/1899]	batch_time: 0.025229 (0.030796)	data_time: 0.000090 (0.003115)	rpn_cls_loss: 0.000465 (0.003339)	rpn_loc_loss: 0.027488 (0.075107)	kp_hp_loss: 0.405091 (0.781530)	kp_hm_hp_loss: 1.262327 (2.431242)	kp_hp_offset_loss: 0.230960 (0.234649)	kp_loss: 1.898379 (3.447419)	siammask_loss: 1.931830 (3.540888)	kp_avg_acc: 0.533333 (0.385612)
[2019-08-14 15:53:18,960-rk0-val_siamrcnn.py#272] Validation: [569/1899]	batch_time: 0.024841 (0.030693)	data_time: 0.000091 (0.003063)	rpn_cls_loss: 0.000574 (0.003435)	rpn_loc_loss: 0.098551 (0.075293)	kp_hp_loss: 0.486808 (0.778341)	kp_hm_hp_loss: 2.186580 (2.429559)	kp_hp_offset_loss: 0.196472 (0.234223)	kp_loss: 2.869860 (3.442120)	siammask_loss: 2.988695 (3.535909)	kp_avg_acc: 0.538462 (0.386082)
[2019-08-14 15:53:21,188-rk0-val_siamrcnn.py#272] Validation: [579/1899]	batch_time: 0.024920 (0.030594)	data_time: 0.000091 (0.003013)	rpn_cls_loss: 0.025048 (0.003462)	rpn_loc_loss: 0.075008 (0.075548)	kp_hp_loss: 0.777368 (0.781364)	kp_hm_hp_loss: 2.064558 (2.437317)	kp_hp_offset_loss: 0.253462 (0.234414)	kp_loss: 3.095387 (3.453093)	siammask_loss: 3.210445 (3.547214)	kp_avg_acc: 0.454545 (0.385135)
[2019-08-14 15:53:23,419-rk0-val_siamrcnn.py#272] Validation: [589/1899]	batch_time: 0.024917 (0.030499)	data_time: 0.000087 (0.002965)	rpn_cls_loss: 0.000560 (0.003505)	rpn_loc_loss: 0.083143 (0.075427)	kp_hp_loss: 0.478408 (0.782362)	kp_hm_hp_loss: 0.530166 (2.443811)	kp_hp_offset_loss: 0.299654 (0.234635)	kp_loss: 1.308227 (3.460806)	siammask_loss: 1.408559 (3.554824)	kp_avg_acc: 0.727273 (0.385007)
[2019-08-14 15:53:25,600-rk0-val_siamrcnn.py#272] Validation: [599/1899]	batch_time: 0.024812 (0.030407)	data_time: 0.000084 (0.002918)	rpn_cls_loss: 0.000733 (0.003466)	rpn_loc_loss: 0.126121 (0.075267)	kp_hp_loss: 0.436340 (0.782401)	kp_hm_hp_loss: 1.463760 (2.441558)	kp_hp_offset_loss: 0.267976 (0.234651)	kp_loss: 2.168076 (3.458609)	siammask_loss: 2.320154 (3.552396)	kp_avg_acc: 0.142857 (0.384569)
[2019-08-14 15:53:27,784-rk0-val_siamrcnn.py#272] Validation: [609/1899]	batch_time: 0.024845 (0.030318)	data_time: 0.000091 (0.002873)	rpn_cls_loss: 0.001267 (0.003452)	rpn_loc_loss: 0.067581 (0.075312)	kp_hp_loss: 1.497961 (0.784070)	kp_hm_hp_loss: 3.503434 (2.437128)	kp_hp_offset_loss: 0.270811 (0.234731)	kp_loss: 5.272206 (3.455927)	siammask_loss: 5.354571 (3.549755)	kp_avg_acc: 0.000000 (0.383696)
[2019-08-14 15:53:29,966-rk0-val_siamrcnn.py#272] Validation: [619/1899]	batch_time: 0.024946 (0.030232)	data_time: 0.000090 (0.002829)	rpn_cls_loss: 0.000607 (0.003475)	rpn_loc_loss: 0.058295 (0.075289)	kp_hp_loss: 0.640706 (0.781569)	kp_hm_hp_loss: 2.450823 (2.434648)	kp_hp_offset_loss: 0.232675 (0.234557)	kp_loss: 3.324204 (3.450773)	siammask_loss: 3.394764 (3.544597)	kp_avg_acc: 0.200000 (0.383632)
[2019-08-14 15:53:32,163-rk0-val_siamrcnn.py#272] Validation: [629/1899]	batch_time: 0.024917 (0.030150)	data_time: 0.000089 (0.002787)	rpn_cls_loss: 0.001451 (0.003435)	rpn_loc_loss: 0.167326 (0.075662)	kp_hp_loss: 0.931141 (0.780491)	kp_hm_hp_loss: 2.268234 (2.422403)	kp_hp_offset_loss: 0.276780 (0.234449)	kp_loss: 3.476155 (3.437341)	siammask_loss: 3.678397 (3.531571)	kp_avg_acc: 0.272727 (0.385795)
[2019-08-14 15:53:34,345-rk0-val_siamrcnn.py#272] Validation: [639/1899]	batch_time: 0.024929 (0.030069)	data_time: 0.000087 (0.002746)	rpn_cls_loss: 0.000319 (0.003503)	rpn_loc_loss: 0.114925 (0.075687)	kp_hp_loss: 1.421741 (0.778680)	kp_hm_hp_loss: 3.642595 (2.416158)	kp_hp_offset_loss: 0.244410 (0.234658)	kp_loss: 5.308746 (3.429494)	siammask_loss: 5.446975 (3.523824)	kp_avg_acc: 0.071429 (0.385314)
[2019-08-14 15:53:36,514-rk0-val_siamrcnn.py#272] Validation: [649/1899]	batch_time: 0.024868 (0.029991)	data_time: 0.000086 (0.002707)	rpn_cls_loss: 0.002348 (0.003478)	rpn_loc_loss: 0.067554 (0.075610)	kp_hp_loss: 0.485622 (0.779240)	kp_hm_hp_loss: 1.909114 (2.416354)	kp_hp_offset_loss: 0.230958 (0.234784)	kp_loss: 2.625694 (3.430376)	siammask_loss: 2.709106 (3.524587)	kp_avg_acc: 0.583333 (0.385267)
[2019-08-14 15:53:38,729-rk0-val_siamrcnn.py#272] Validation: [659/1899]	batch_time: 0.026263 (0.029917)	data_time: 0.000089 (0.002668)	rpn_cls_loss: 0.004247 (0.003488)	rpn_loc_loss: 0.086756 (0.075554)	kp_hp_loss: 0.637186 (0.778924)	kp_hm_hp_loss: 2.023561 (2.408228)	kp_hp_offset_loss: 0.206398 (0.235002)	kp_loss: 2.867145 (3.422152)	siammask_loss: 2.975499 (3.516307)	kp_avg_acc: 0.214286 (0.385614)
[2019-08-14 15:53:40,872-rk0-val_siamrcnn.py#272] Validation: [669/1899]	batch_time: 0.024945 (0.029845)	data_time: 0.000089 (0.002631)	rpn_cls_loss: 0.000620 (0.003564)	rpn_loc_loss: 0.093777 (0.075364)	kp_hp_loss: 0.642004 (0.774971)	kp_hm_hp_loss: 2.233391 (2.398635)	kp_hp_offset_loss: 0.196281 (0.234799)	kp_loss: 3.071676 (3.408404)	siammask_loss: 3.184829 (3.502406)	kp_avg_acc: 0.166667 (0.384999)
[2019-08-14 15:53:43,009-rk0-val_siamrcnn.py#272] Validation: [679/1899]	batch_time: 0.024765 (0.029773)	data_time: 0.000091 (0.002594)	rpn_cls_loss: 0.000330 (0.003577)	rpn_loc_loss: 0.058058 (0.074962)	kp_hp_loss: 0.571300 (0.772140)	kp_hm_hp_loss: 3.300798 (2.397508)	kp_hp_offset_loss: 0.223097 (0.234535)	kp_loss: 4.095194 (3.404180)	siammask_loss: 4.165194 (3.497713)	kp_avg_acc: 0.500000 (0.385615)
[2019-08-14 15:53:45,225-rk0-val_siamrcnn.py#272] Validation: [689/1899]	batch_time: 0.024771 (0.029722)	data_time: 0.000091 (0.002559)	rpn_cls_loss: 0.005394 (0.003631)	rpn_loc_loss: 0.038261 (0.074866)	kp_hp_loss: 1.116085 (0.774418)	kp_hm_hp_loss: 3.258939 (2.396447)	kp_hp_offset_loss: 0.283058 (0.234716)	kp_loss: 4.658082 (3.405579)	siammask_loss: 4.709389 (3.499050)	kp_avg_acc: 0.200000 (0.384728)
[2019-08-14 15:53:47,418-rk0-val_siamrcnn.py#272] Validation: [699/1899]	batch_time: 0.024856 (0.029655)	data_time: 0.000090 (0.002525)	rpn_cls_loss: 0.000346 (0.003598)	rpn_loc_loss: 0.043188 (0.074569)	kp_hp_loss: 0.391676 (0.774882)	kp_hm_hp_loss: 1.256760 (2.392885)	kp_hp_offset_loss: 0.209097 (0.234819)	kp_loss: 1.857533 (3.402583)	siammask_loss: 1.909705 (3.495665)	kp_avg_acc: 0.466667 (0.384724)
[2019-08-14 15:53:49,583-rk0-val_siamrcnn.py#272] Validation: [709/1899]	batch_time: 0.025491 (0.029590)	data_time: 0.000096 (0.002492)	rpn_cls_loss: 0.002704 (0.003685)	rpn_loc_loss: 0.024021 (0.074179)	kp_hp_loss: 0.616198 (0.774542)	kp_hm_hp_loss: 2.007670 (2.383714)	kp_hp_offset_loss: 0.205615 (0.234613)	kp_loss: 2.829484 (3.392867)	siammask_loss: 2.861013 (3.485568)	kp_avg_acc: 0.076923 (0.385969)
[2019-08-14 15:53:51,762-rk0-val_siamrcnn.py#272] Validation: [719/1899]	batch_time: 0.024934 (0.029525)	data_time: 0.000090 (0.002460)	rpn_cls_loss: 0.000590 (0.003698)	rpn_loc_loss: 0.141138 (0.074407)	kp_hp_loss: 0.691331 (0.774798)	kp_hm_hp_loss: 1.694820 (2.380231)	kp_hp_offset_loss: 0.210575 (0.234499)	kp_loss: 2.596725 (3.389526)	siammask_loss: 2.766680 (3.482514)	kp_avg_acc: 0.000000 (0.385177)
[2019-08-14 15:53:53,953-rk0-val_siamrcnn.py#272] Validation: [729/1899]	batch_time: 0.024673 (0.029463)	data_time: 0.000092 (0.002428)	rpn_cls_loss: 0.000446 (0.003674)	rpn_loc_loss: 0.087204 (0.074280)	kp_hp_loss: 0.590130 (0.774799)	kp_hm_hp_loss: 0.820294 (2.380399)	kp_hp_offset_loss: 0.198428 (0.234322)	kp_loss: 1.608852 (3.389518)	siammask_loss: 1.713943 (3.482330)	kp_avg_acc: 0.750000 (0.384276)
[2019-08-14 15:53:56,117-rk0-val_siamrcnn.py#272] Validation: [739/1899]	batch_time: 0.025041 (0.029403)	data_time: 0.000089 (0.002398)	rpn_cls_loss: 0.000829 (0.003664)	rpn_loc_loss: 0.048267 (0.074181)	kp_hp_loss: 1.489969 (0.773975)	kp_hm_hp_loss: 2.130244 (2.367797)	kp_hp_offset_loss: 0.230987 (0.234193)	kp_loss: 3.851199 (3.375963)	siammask_loss: 3.909949 (3.468644)	kp_avg_acc: 0.200000 (0.385912)
[2019-08-14 15:53:58,273-rk0-val_siamrcnn.py#272] Validation: [749/1899]	batch_time: 0.024877 (0.029344)	data_time: 0.000090 (0.002368)	rpn_cls_loss: 0.009172 (0.003637)	rpn_loc_loss: 0.196033 (0.074325)	kp_hp_loss: 1.105327 (0.771692)	kp_hm_hp_loss: 2.675652 (2.359928)	kp_hp_offset_loss: 0.236664 (0.234041)	kp_loss: 4.017642 (3.365659)	siammask_loss: 4.262054 (3.458486)	kp_avg_acc: 0.272727 (0.385883)
[2019-08-14 15:54:00,432-rk0-val_siamrcnn.py#272] Validation: [759/1899]	batch_time: 0.024858 (0.029286)	data_time: 0.000089 (0.002339)	rpn_cls_loss: 0.001319 (0.003600)	rpn_loc_loss: 0.030497 (0.073899)	kp_hp_loss: 0.561808 (0.773778)	kp_hm_hp_loss: 3.323863 (2.362680)	kp_hp_offset_loss: 0.273813 (0.234174)	kp_loss: 4.159483 (3.370631)	siammask_loss: 4.197399 (3.462911)	kp_avg_acc: 0.538462 (0.385667)
[2019-08-14 15:54:02,667-rk0-val_siamrcnn.py#272] Validation: [769/1899]	batch_time: 0.024744 (0.029241)	data_time: 0.000089 (0.002311)	rpn_cls_loss: 0.000507 (0.003572)	rpn_loc_loss: 0.078137 (0.074084)	kp_hp_loss: 0.495338 (0.774216)	kp_hm_hp_loss: 1.591845 (2.361727)	kp_hp_offset_loss: 0.285044 (0.234358)	kp_loss: 2.372227 (3.370299)	siammask_loss: 2.466499 (3.462772)	kp_avg_acc: 0.666667 (0.385902)
[2019-08-14 15:54:04,892-rk0-val_siamrcnn.py#272] Validation: [779/1899]	batch_time: 0.024864 (0.029185)	data_time: 0.000089 (0.002283)	rpn_cls_loss: 0.000381 (0.003537)	rpn_loc_loss: 0.054907 (0.073796)	kp_hp_loss: 0.682150 (0.770310)	kp_hm_hp_loss: 2.817573 (2.357374)	kp_hp_offset_loss: 0.227008 (0.234233)	kp_loss: 3.726731 (3.361916)	siammask_loss: 3.793001 (3.454009)	kp_avg_acc: 0.235294 (0.385734)
[2019-08-14 15:54:07,083-rk0-val_siamrcnn.py#272] Validation: [789/1899]	batch_time: 0.024857 (0.029132)	data_time: 0.000089 (0.002256)	rpn_cls_loss: 0.001310 (0.003622)	rpn_loc_loss: 0.033658 (0.073879)	kp_hp_loss: 0.334798 (0.769105)	kp_hm_hp_loss: 1.314545 (2.354025)	kp_hp_offset_loss: 0.219548 (0.234079)	kp_loss: 1.868892 (3.357207)	siammask_loss: 1.910592 (3.449486)	kp_avg_acc: 0.750000 (0.386595)
[2019-08-14 15:54:09,263-rk0-val_siamrcnn.py#272] Validation: [799/1899]	batch_time: 0.024973 (0.029089)	data_time: 0.000090 (0.002230)	rpn_cls_loss: 0.000560 (0.003594)	rpn_loc_loss: 0.065995 (0.073715)	kp_hp_loss: 0.168783 (0.769890)	kp_hm_hp_loss: 0.102552 (2.355888)	kp_hp_offset_loss: 0.182740 (0.233957)	kp_loss: 0.454075 (3.359733)	siammask_loss: 0.533829 (3.451787)	kp_avg_acc: 1.000000 (0.387332)
[2019-08-14 15:54:11,464-rk0-val_siamrcnn.py#272] Validation: [809/1899]	batch_time: 0.024873 (0.029041)	data_time: 0.000096 (0.002205)	rpn_cls_loss: 0.000336 (0.003558)	rpn_loc_loss: 0.089319 (0.073470)	kp_hp_loss: 0.941400 (0.767013)	kp_hm_hp_loss: 2.480362 (2.349641)	kp_hp_offset_loss: 0.185778 (0.233649)	kp_loss: 3.607539 (3.350300)	siammask_loss: 3.715058 (3.442024)	kp_avg_acc: 0.200000 (0.387386)
[2019-08-14 15:54:13,667-rk0-val_siamrcnn.py#272] Validation: [819/1899]	batch_time: 0.025056 (0.028991)	data_time: 0.000092 (0.002180)	rpn_cls_loss: 0.001439 (0.003533)	rpn_loc_loss: 0.110245 (0.073490)	kp_hp_loss: 0.559285 (0.772116)	kp_hm_hp_loss: 2.703686 (2.354609)	kp_hp_offset_loss: 0.241699 (0.233599)	kp_loss: 3.504670 (3.360321)	siammask_loss: 3.638403 (3.452044)	kp_avg_acc: 0.538462 (0.385488)
[2019-08-14 15:54:15,821-rk0-val_siamrcnn.py#272] Validation: [829/1899]	batch_time: 0.025118 (0.028946)	data_time: 0.000161 (0.002156)	rpn_cls_loss: 0.000366 (0.003503)	rpn_loc_loss: 0.014167 (0.073277)	kp_hp_loss: 0.502573 (0.770359)	kp_hm_hp_loss: 1.873351 (2.348165)	kp_hp_offset_loss: 0.181197 (0.233670)	kp_loss: 2.557121 (3.352192)	siammask_loss: 2.574487 (3.443629)	kp_avg_acc: 0.700000 (0.386966)
[2019-08-14 15:54:17,987-rk0-val_siamrcnn.py#272] Validation: [839/1899]	batch_time: 0.024877 (0.028899)	data_time: 0.000088 (0.002132)	rpn_cls_loss: 0.000921 (0.003672)	rpn_loc_loss: 0.027975 (0.073122)	kp_hp_loss: 0.867239 (0.767187)	kp_hm_hp_loss: 2.813343 (2.340437)	kp_hp_offset_loss: 0.248138 (0.233810)	kp_loss: 3.928720 (3.341432)	siammask_loss: 3.963211 (3.432852)	kp_avg_acc: 0.500000 (0.387163)
[2019-08-14 15:54:20,127-rk0-val_siamrcnn.py#272] Validation: [849/1899]	batch_time: 0.024934 (0.028852)	data_time: 0.000090 (0.002109)	rpn_cls_loss: 0.001089 (0.003732)	rpn_loc_loss: 0.050069 (0.072877)	kp_hp_loss: 0.215010 (0.767584)	kp_hm_hp_loss: 0.406288 (2.342139)	kp_hp_offset_loss: 0.190903 (0.234029)	kp_loss: 0.812201 (3.343750)	siammask_loss: 0.873373 (3.434935)	kp_avg_acc: 0.785714 (0.386654)
[2019-08-14 15:54:22,332-rk0-val_siamrcnn.py#272] Validation: [859/1899]	batch_time: 0.024805 (0.028807)	data_time: 0.000089 (0.002086)	rpn_cls_loss: 0.000438 (0.003823)	rpn_loc_loss: 0.063091 (0.073148)	kp_hp_loss: 0.501456 (0.767407)	kp_hm_hp_loss: 1.304945 (2.334324)	kp_hp_offset_loss: 0.239793 (0.234004)	kp_loss: 2.046193 (3.335734)	siammask_loss: 2.122341 (3.427336)	kp_avg_acc: 0.428571 (0.387244)
[2019-08-14 15:54:24,505-rk0-val_siamrcnn.py#272] Validation: [869/1899]	batch_time: 0.024939 (0.028764)	data_time: 0.000091 (0.002064)	rpn_cls_loss: 0.000405 (0.003803)	rpn_loc_loss: 0.032879 (0.073210)	kp_hp_loss: 0.553183 (0.765300)	kp_hm_hp_loss: 2.158707 (2.335279)	kp_hp_offset_loss: 0.232298 (0.234007)	kp_loss: 2.944188 (3.334584)	siammask_loss: 2.984047 (3.426241)	kp_avg_acc: 0.307692 (0.387146)
[2019-08-14 15:54:26,906-rk0-val_siamrcnn.py#272] Validation: [879/1899]	batch_time: 0.024863 (0.028722)	data_time: 0.000087 (0.002043)	rpn_cls_loss: 0.001202 (0.003824)	rpn_loc_loss: 0.137585 (0.073191)	kp_hp_loss: 1.017586 (0.765175)	kp_hm_hp_loss: 3.724132 (2.329164)	kp_hp_offset_loss: 0.210019 (0.233979)	kp_loss: 4.951737 (3.328315)	siammask_loss: 5.118041 (3.419972)	kp_avg_acc: 0.333333 (0.387319)
[2019-08-14 15:54:29,186-rk0-val_siamrcnn.py#272] Validation: [889/1899]	batch_time: 0.024819 (0.028681)	data_time: 0.000088 (0.002022)	rpn_cls_loss: 0.000450 (0.003798)	rpn_loc_loss: 0.019638 (0.072939)	kp_hp_loss: 0.232857 (0.764412)	kp_hm_hp_loss: 1.882700 (2.323308)	kp_hp_offset_loss: 0.217482 (0.233993)	kp_loss: 2.333038 (3.321710)	siammask_loss: 2.357053 (3.413037)	kp_avg_acc: 0.666667 (0.386907)
[2019-08-14 15:54:31,353-rk0-val_siamrcnn.py#272] Validation: [899/1899]	batch_time: 0.024837 (0.028640)	data_time: 0.000087 (0.002001)	rpn_cls_loss: 0.001415 (0.003763)	rpn_loc_loss: 0.038339 (0.072806)	kp_hp_loss: 0.291363 (0.761919)	kp_hm_hp_loss: 0.722083 (2.316723)	kp_hp_offset_loss: 0.225889 (0.234119)	kp_loss: 1.239335 (3.312760)	siammask_loss: 1.286757 (3.403893)	kp_avg_acc: 0.615385 (0.388210)
[2019-08-14 15:54:33,536-rk0-val_siamrcnn.py#272] Validation: [909/1899]	batch_time: 0.024928 (0.028603)	data_time: 0.000087 (0.001981)	rpn_cls_loss: 0.000675 (0.003730)	rpn_loc_loss: 0.092044 (0.072801)	kp_hp_loss: 0.254616 (0.759771)	kp_hm_hp_loss: 1.452452 (2.309953)	kp_hp_offset_loss: 0.243475 (0.234014)	kp_loss: 1.950543 (3.303736)	siammask_loss: 2.061670 (3.394830)	kp_avg_acc: 0.454545 (0.388633)
[2019-08-14 15:54:35,698-rk0-val_siamrcnn.py#272] Validation: [919/1899]	batch_time: 0.024904 (0.028565)	data_time: 0.000091 (0.001961)	rpn_cls_loss: 0.000329 (0.003714)	rpn_loc_loss: 0.024377 (0.072597)	kp_hp_loss: 1.203217 (0.759514)	kp_hm_hp_loss: 4.305335 (2.308456)	kp_hp_offset_loss: 0.257015 (0.234071)	kp_loss: 5.765566 (3.302039)	siammask_loss: 5.795148 (3.392871)	kp_avg_acc: 0.294118 (0.389440)
[2019-08-14 15:54:37,911-rk0-val_siamrcnn.py#272] Validation: [929/1899]	batch_time: 0.025138 (0.028536)	data_time: 0.000087 (0.001942)	rpn_cls_loss: 0.000383 (0.003695)	rpn_loc_loss: 0.022608 (0.072595)	kp_hp_loss: 0.584662 (0.756853)	kp_hm_hp_loss: 2.914474 (2.305599)	kp_hp_offset_loss: 0.237930 (0.234098)	kp_loss: 3.737067 (3.296547)	siammask_loss: 3.764578 (3.387359)	kp_avg_acc: 0.333333 (0.390152)
[2019-08-14 15:54:40,323-rk0-val_siamrcnn.py#272] Validation: [939/1899]	batch_time: 0.024770 (0.028503)	data_time: 0.000092 (0.001923)	rpn_cls_loss: 0.000695 (0.003694)	rpn_loc_loss: 0.105371 (0.072608)	kp_hp_loss: 0.612858 (0.757368)	kp_hm_hp_loss: 1.227076 (2.305662)	kp_hp_offset_loss: 0.252087 (0.234168)	kp_loss: 2.092021 (3.297194)	siammask_loss: 2.219161 (3.388021)	kp_avg_acc: 0.600000 (0.389886)
[2019-08-14 15:54:42,788-rk0-val_siamrcnn.py#272] Validation: [949/1899]	batch_time: 0.025756 (0.028468)	data_time: 0.000096 (0.001904)	rpn_cls_loss: 0.000701 (0.003665)	rpn_loc_loss: 0.022518 (0.072572)	kp_hp_loss: 0.407486 (0.757150)	kp_hm_hp_loss: 0.938529 (2.305738)	kp_hp_offset_loss: 0.236390 (0.234252)	kp_loss: 1.582405 (3.297137)	siammask_loss: 1.610128 (3.387891)	kp_avg_acc: 0.666667 (0.388722)
[2019-08-14 15:54:45,341-rk0-val_siamrcnn.py#272] Validation: [959/1899]	batch_time: 0.024800 (0.028437)	data_time: 0.000090 (0.001886)	rpn_cls_loss: 0.000370 (0.003649)	rpn_loc_loss: 0.072289 (0.072583)	kp_hp_loss: 0.737464 (0.756061)	kp_hm_hp_loss: 3.206006 (2.300400)	kp_hp_offset_loss: 0.245390 (0.234044)	kp_loss: 4.188860 (3.290502)	siammask_loss: 4.275977 (3.381252)	kp_avg_acc: 0.428571 (0.389291)
[2019-08-14 15:54:47,752-rk0-val_siamrcnn.py#272] Validation: [969/1899]	batch_time: 0.025757 (0.028402)	data_time: 0.000104 (0.001868)	rpn_cls_loss: 0.000408 (0.003620)	rpn_loc_loss: 0.045900 (0.072460)	kp_hp_loss: 0.554619 (0.755920)	kp_hm_hp_loss: 1.472672 (2.300455)	kp_hp_offset_loss: 0.265790 (0.234127)	kp_loss: 2.293081 (3.290500)	siammask_loss: 2.348569 (3.381073)	kp_avg_acc: 0.600000 (0.388467)
[2019-08-14 15:54:50,101-rk0-val_siamrcnn.py#272] Validation: [979/1899]	batch_time: 0.024902 (0.028371)	data_time: 0.000086 (0.001851)	rpn_cls_loss: 0.001677 (0.003595)	rpn_loc_loss: 0.074207 (0.072341)	kp_hp_loss: 0.342081 (0.753265)	kp_hm_hp_loss: 0.976492 (2.295066)	kp_hp_offset_loss: 0.203182 (0.233922)	kp_loss: 1.521755 (3.282249)	siammask_loss: 1.612481 (3.372656)	kp_avg_acc: 0.384615 (0.389236)
[2019-08-14 15:54:52,513-rk0-val_siamrcnn.py#272] Validation: [989/1899]	batch_time: 0.025010 (0.028337)	data_time: 0.000093 (0.001834)	rpn_cls_loss: 0.000648 (0.003572)	rpn_loc_loss: 0.056109 (0.072200)	kp_hp_loss: 1.259404 (0.754020)	kp_hm_hp_loss: 2.884863 (2.292240)	kp_hp_offset_loss: 0.243626 (0.234001)	kp_loss: 4.387894 (3.280257)	siammask_loss: 4.455873 (3.370472)	kp_avg_acc: 0.200000 (0.390298)
[2019-08-14 15:54:54,769-rk0-val_siamrcnn.py#272] Validation: [999/1899]	batch_time: 0.024730 (0.028303)	data_time: 0.000087 (0.001817)	rpn_cls_loss: 0.072609 (0.003634)	rpn_loc_loss: 0.289820 (0.072636)	kp_hp_loss: 0.604715 (0.752781)	kp_hm_hp_loss: 1.772974 (2.291992)	kp_hp_offset_loss: 0.201004 (0.234096)	kp_loss: 2.578693 (3.278866)	siammask_loss: 2.999086 (3.369666)	kp_avg_acc: 0.166667 (0.389484)
[2019-08-14 15:54:57,023-rk0-val_siamrcnn.py#272] Validation: [1009/1899]	batch_time: 0.024886 (0.028270)	data_time: 0.000095 (0.001801)	rpn_cls_loss: 0.000376 (0.003632)	rpn_loc_loss: 0.022884 (0.072749)	kp_hp_loss: 0.631368 (0.752905)	kp_hm_hp_loss: 3.641693 (2.295889)	kp_hp_offset_loss: 0.204012 (0.234134)	kp_loss: 4.477073 (3.282925)	siammask_loss: 4.504910 (3.373857)	kp_avg_acc: 0.583333 (0.389609)
[2019-08-14 15:54:59,414-rk0-val_siamrcnn.py#272] Validation: [1019/1899]	batch_time: 0.024903 (0.028238)	data_time: 0.000090 (0.001785)	rpn_cls_loss: 0.000419 (0.003615)	rpn_loc_loss: 0.017495 (0.072681)	kp_hp_loss: 0.354491 (0.749905)	kp_hm_hp_loss: 0.822054 (2.289894)	kp_hp_offset_loss: 0.173117 (0.233960)	kp_loss: 1.349662 (3.273756)	siammask_loss: 1.371076 (3.364590)	kp_avg_acc: 0.705882 (0.390416)
[2019-08-14 15:55:01,619-rk0-val_siamrcnn.py#272] Validation: [1029/1899]	batch_time: 0.024776 (0.028206)	data_time: 0.000092 (0.001769)	rpn_cls_loss: 0.000987 (0.003635)	rpn_loc_loss: 0.156622 (0.072841)	kp_hp_loss: 0.802382 (0.750055)	kp_hm_hp_loss: 2.306772 (2.288910)	kp_hp_offset_loss: 0.306953 (0.234194)	kp_loss: 3.416107 (3.273155)	siammask_loss: 3.605040 (3.364202)	kp_avg_acc: 0.166667 (0.390224)
[2019-08-14 15:55:03,776-rk0-val_siamrcnn.py#272] Validation: [1039/1899]	batch_time: 0.024887 (0.028176)	data_time: 0.000089 (0.001753)	rpn_cls_loss: 0.003927 (0.003616)	rpn_loc_loss: 0.069473 (0.072821)	kp_hp_loss: 0.607644 (0.752482)	kp_hm_hp_loss: 1.201722 (2.290746)	kp_hp_offset_loss: 0.221139 (0.234229)	kp_loss: 2.030505 (3.277453)	siammask_loss: 2.117799 (3.368457)	kp_avg_acc: 0.500000 (0.389828)
[2019-08-14 15:55:05,919-rk0-val_siamrcnn.py#272] Validation: [1049/1899]	batch_time: 0.024891 (0.028145)	data_time: 0.000091 (0.001738)	rpn_cls_loss: 0.000562 (0.003591)	rpn_loc_loss: 0.039808 (0.072784)	kp_hp_loss: 0.777059 (0.751704)	kp_hm_hp_loss: 1.645244 (2.291803)	kp_hp_offset_loss: 0.222038 (0.234345)	kp_loss: 2.644341 (3.277848)	siammask_loss: 2.692673 (3.368783)	kp_avg_acc: 0.444444 (0.390089)
[2019-08-14 15:55:08,039-rk0-val_siamrcnn.py#272] Validation: [1059/1899]	batch_time: 0.025159 (0.028115)	data_time: 0.000091 (0.001723)	rpn_cls_loss: 0.000385 (0.003662)	rpn_loc_loss: 0.046984 (0.072989)	kp_hp_loss: 0.305140 (0.751330)	kp_hm_hp_loss: 0.734803 (2.291053)	kp_hp_offset_loss: 0.196387 (0.234398)	kp_loss: 1.236330 (3.276778)	siammask_loss: 1.293096 (3.368029)	kp_avg_acc: 0.764706 (0.389142)
[2019-08-14 15:55:10,187-rk0-val_siamrcnn.py#272] Validation: [1069/1899]	batch_time: 0.025025 (0.028085)	data_time: 0.000093 (0.001708)	rpn_cls_loss: 0.000371 (0.003647)	rpn_loc_loss: 0.036547 (0.072917)	kp_hp_loss: 0.257168 (0.750527)	kp_hm_hp_loss: 3.102045 (2.290440)	kp_hp_offset_loss: 0.176488 (0.234298)	kp_loss: 3.535701 (3.275262)	siammask_loss: 3.579928 (3.366412)	kp_avg_acc: 0.529412 (0.389022)
[2019-08-14 15:55:12,399-rk0-val_siamrcnn.py#272] Validation: [1079/1899]	batch_time: 0.024892 (0.028056)	data_time: 0.000088 (0.001694)	rpn_cls_loss: 0.000374 (0.003620)	rpn_loc_loss: 0.040925 (0.072757)	kp_hp_loss: 1.090974 (0.748121)	kp_hm_hp_loss: 2.948446 (2.287204)	kp_hp_offset_loss: 0.253514 (0.234109)	kp_loss: 4.292933 (3.269430)	siammask_loss: 4.342417 (3.360360)	kp_avg_acc: 0.000000 (0.390184)
[2019-08-14 15:55:14,559-rk0-val_siamrcnn.py#272] Validation: [1089/1899]	batch_time: 0.024873 (0.028028)	data_time: 0.000091 (0.001680)	rpn_cls_loss: 0.000529 (0.003594)	rpn_loc_loss: 0.075303 (0.072530)	kp_hp_loss: 0.816267 (0.747103)	kp_hm_hp_loss: 3.037110 (2.289062)	kp_hp_offset_loss: 0.230559 (0.233924)	kp_loss: 4.083936 (3.270084)	siammask_loss: 4.174829 (3.360718)	kp_avg_acc: 0.235294 (0.389910)
[2019-08-14 15:55:17,468-rk0-val_siamrcnn.py#272] Validation: [1099/1899]	batch_time: 0.024959 (0.028001)	data_time: 0.000100 (0.001666)	rpn_cls_loss: 0.000729 (0.003573)	rpn_loc_loss: 0.053123 (0.072557)	kp_hp_loss: 0.197739 (0.746950)	kp_hm_hp_loss: 0.128142 (2.285949)	kp_hp_offset_loss: 0.161619 (0.233791)	kp_loss: 0.487500 (3.266685)	siammask_loss: 0.551976 (3.357330)	kp_avg_acc: 0.923077 (0.390346)
[2019-08-14 15:55:24,611-rk0-val_siamrcnn.py#272] Validation: [1109/1899]	batch_time: 0.024938 (0.029511)	data_time: 0.000083 (0.003187)	rpn_cls_loss: 0.000557 (0.003566)	rpn_loc_loss: 0.061381 (0.072585)	kp_hp_loss: 0.450291 (0.748108)	kp_hm_hp_loss: 1.556252 (2.281929)	kp_hp_offset_loss: 0.240952 (0.233821)	kp_loss: 2.247495 (3.263854)	siammask_loss: 2.321709 (3.354526)	kp_avg_acc: 0.357143 (0.389497)
[2019-08-14 15:55:28,595-rk0-val_siamrcnn.py#272] Validation: [1119/1899]	batch_time: 0.024894 (0.029475)	data_time: 0.000086 (0.003160)	rpn_cls_loss: 0.000805 (0.003546)	rpn_loc_loss: 0.022453 (0.072910)	kp_hp_loss: 0.592028 (0.751142)	kp_hm_hp_loss: 1.652614 (2.289742)	kp_hp_offset_loss: 0.308757 (0.233884)	kp_loss: 2.553400 (3.274763)	siammask_loss: 2.581148 (3.365804)	kp_avg_acc: 0.545455 (0.388038)
[2019-08-14 15:55:30,979-rk0-val_siamrcnn.py#272] Validation: [1129/1899]	batch_time: 0.024707 (0.029441)	data_time: 0.000088 (0.003134)	rpn_cls_loss: 0.000474 (0.003653)	rpn_loc_loss: 0.026181 (0.073203)	kp_hp_loss: 0.334851 (0.749143)	kp_hm_hp_loss: 0.755863 (2.282659)	kp_hp_offset_loss: 0.247080 (0.233872)	kp_loss: 1.337794 (3.265670)	siammask_loss: 1.369685 (3.357169)	kp_avg_acc: 0.800000 (0.388810)
[2019-08-14 15:55:33,181-rk0-val_siamrcnn.py#272] Validation: [1139/1899]	batch_time: 0.024965 (0.029402)	data_time: 0.000089 (0.003107)	rpn_cls_loss: 0.000706 (0.003627)	rpn_loc_loss: 0.070002 (0.073145)	kp_hp_loss: 0.298690 (0.748266)	kp_hm_hp_loss: 1.527439 (2.288475)	kp_hp_offset_loss: 0.181285 (0.233806)	kp_loss: 2.007415 (3.270544)	siammask_loss: 2.092123 (3.361948)	kp_avg_acc: 0.384615 (0.389337)
[2019-08-14 15:55:35,396-rk0-val_siamrcnn.py#272] Validation: [1149/1899]	batch_time: 0.024867 (0.029363)	data_time: 0.000078 (0.003082)	rpn_cls_loss: 0.000577 (0.003611)	rpn_loc_loss: 0.023686 (0.073155)	kp_hp_loss: 0.714406 (0.750851)	kp_hm_hp_loss: 4.408210 (2.300435)	kp_hp_offset_loss: 0.206688 (0.233890)	kp_loss: 5.329304 (3.285173)	siammask_loss: 5.358304 (3.376572)	kp_avg_acc: 0.200000 (0.388488)
[2019-08-14 15:55:37,605-rk0-val_siamrcnn.py#272] Validation: [1159/1899]	batch_time: 0.025013 (0.029325)	data_time: 0.000090 (0.003057)	rpn_cls_loss: 0.000420 (0.003647)	rpn_loc_loss: 0.034827 (0.073255)	kp_hp_loss: 0.699169 (0.751487)	kp_hm_hp_loss: 2.035665 (2.302262)	kp_hp_offset_loss: 0.262316 (0.233934)	kp_loss: 2.997151 (3.287680)	siammask_loss: 3.039363 (3.379235)	kp_avg_acc: 0.466667 (0.387732)
[2019-08-14 15:55:39,916-rk0-val_siamrcnn.py#272] Validation: [1169/1899]	batch_time: 0.024874 (0.029288)	data_time: 0.000090 (0.003032)	rpn_cls_loss: 0.001825 (0.003626)	rpn_loc_loss: 0.038257 (0.073051)	kp_hp_loss: 0.870996 (0.751900)	kp_hm_hp_loss: 2.509081 (2.305651)	kp_hp_offset_loss: 0.259844 (0.234119)	kp_loss: 3.639921 (3.291668)	siammask_loss: 3.687654 (3.382957)	kp_avg_acc: 0.000000 (0.387005)
[2019-08-14 15:55:42,265-rk0-val_siamrcnn.py#272] Validation: [1179/1899]	batch_time: 0.024938 (0.029252)	data_time: 0.000089 (0.003008)	rpn_cls_loss: 0.002120 (0.003626)	rpn_loc_loss: 0.061528 (0.073225)	kp_hp_loss: 0.551453 (0.752257)	kp_hm_hp_loss: 2.813930 (2.307531)	kp_hp_offset_loss: 0.250077 (0.234154)	kp_loss: 3.615460 (3.293939)	siammask_loss: 3.691415 (3.385436)	kp_avg_acc: 0.500000 (0.386961)
[2019-08-14 15:55:44,504-rk0-val_siamrcnn.py#272] Validation: [1189/1899]	batch_time: 0.024800 (0.029222)	data_time: 0.000091 (0.002984)	rpn_cls_loss: 0.002040 (0.003628)	rpn_loc_loss: 0.031780 (0.073408)	kp_hp_loss: 0.816619 (0.753015)	kp_hm_hp_loss: 0.902727 (2.310332)	kp_hp_offset_loss: 0.217532 (0.234096)	kp_loss: 1.936878 (3.297441)	siammask_loss: 1.977054 (3.389160)	kp_avg_acc: 0.545455 (0.386864)
[2019-08-14 15:55:46,749-rk0-val_siamrcnn.py#272] Validation: [1199/1899]	batch_time: 0.024897 (0.029190)	data_time: 0.000087 (0.002960)	rpn_cls_loss: 0.002698 (0.003612)	rpn_loc_loss: 0.032676 (0.073260)	kp_hp_loss: 0.501064 (0.751309)	kp_hm_hp_loss: 1.417209 (2.303352)	kp_hp_offset_loss: 0.224619 (0.234003)	kp_loss: 2.142893 (3.288661)	siammask_loss: 2.184801 (3.380187)	kp_avg_acc: 0.588235 (0.387663)
[2019-08-14 15:55:48,944-rk0-val_siamrcnn.py#272] Validation: [1209/1899]	batch_time: 0.025033 (0.029157)	data_time: 0.000095 (0.002937)	rpn_cls_loss: 0.000575 (0.003621)	rpn_loc_loss: 0.029651 (0.073393)	kp_hp_loss: 0.291637 (0.753769)	kp_hm_hp_loss: 1.671329 (2.301527)	kp_hp_offset_loss: 0.240199 (0.234161)	kp_loss: 2.203166 (3.289454)	siammask_loss: 2.239322 (3.381148)	kp_avg_acc: 0.615385 (0.387936)
[2019-08-14 15:55:51,155-rk0-val_siamrcnn.py#272] Validation: [1219/1899]	batch_time: 0.024896 (0.029128)	data_time: 0.000086 (0.002915)	rpn_cls_loss: 0.000865 (0.003610)	rpn_loc_loss: 0.051239 (0.073317)	kp_hp_loss: 1.085430 (0.752507)	kp_hm_hp_loss: 4.119270 (2.297061)	kp_hp_offset_loss: 0.289900 (0.234045)	kp_loss: 5.494600 (3.283609)	siammask_loss: 5.556951 (3.375202)	kp_avg_acc: 0.066667 (0.387880)
[2019-08-14 15:55:53,418-rk0-val_siamrcnn.py#272] Validation: [1229/1899]	batch_time: 0.024899 (0.029097)	data_time: 0.000104 (0.002892)	rpn_cls_loss: 0.002115 (0.003614)	rpn_loc_loss: 0.161170 (0.073464)	kp_hp_loss: 1.307848 (0.754489)	kp_hm_hp_loss: 8.535645 (2.307037)	kp_hp_offset_loss: 0.242472 (0.234228)	kp_loss: 10.085964 (3.295752)	siammask_loss: 10.281483 (3.387524)	kp_avg_acc: 0.312500 (0.386901)
[2019-08-14 15:55:55,632-rk0-val_siamrcnn.py#272] Validation: [1239/1899]	batch_time: 0.024790 (0.029068)	data_time: 0.000089 (0.002870)	rpn_cls_loss: 0.001051 (0.003599)	rpn_loc_loss: 0.046597 (0.073456)	kp_hp_loss: 0.402875 (0.752581)	kp_hm_hp_loss: 1.579101 (2.304470)	kp_hp_offset_loss: 0.213828 (0.234258)	kp_loss: 2.195804 (3.291306)	siammask_loss: 2.252771 (3.383054)	kp_avg_acc: 0.666667 (0.386943)
[2019-08-14 15:55:57,801-rk0-val_siamrcnn.py#272] Validation: [1249/1899]	batch_time: 0.024776 (0.029038)	data_time: 0.000091 (0.002849)	rpn_cls_loss: 0.000341 (0.003582)	rpn_loc_loss: 0.043241 (0.073540)	kp_hp_loss: 0.646810 (0.752484)	kp_hm_hp_loss: 1.952372 (2.303045)	kp_hp_offset_loss: 0.248295 (0.234257)	kp_loss: 2.847477 (3.289784)	siammask_loss: 2.899708 (3.381615)	kp_avg_acc: 0.666667 (0.387019)
[2019-08-14 15:55:59,973-rk0-val_siamrcnn.py#272] Validation: [1259/1899]	batch_time: 0.024822 (0.029009)	data_time: 0.000089 (0.002827)	rpn_cls_loss: 0.026372 (0.003578)	rpn_loc_loss: 0.028184 (0.073348)	kp_hp_loss: 0.359876 (0.751012)	kp_hm_hp_loss: 2.085499 (2.299175)	kp_hp_offset_loss: 0.234298 (0.234229)	kp_loss: 2.679672 (3.284414)	siammask_loss: 2.739864 (3.376011)	kp_avg_acc: 0.571429 (0.387551)
[2019-08-14 15:56:02,144-rk0-val_siamrcnn.py#272] Validation: [1269/1899]	batch_time: 0.025182 (0.028977)	data_time: 0.000091 (0.002806)	rpn_cls_loss: 0.000464 (0.003562)	rpn_loc_loss: 0.033458 (0.073243)	kp_hp_loss: 0.392777 (0.750748)	kp_hm_hp_loss: 1.480824 (2.298588)	kp_hp_offset_loss: 0.223595 (0.234284)	kp_loss: 2.097196 (3.283619)	siammask_loss: 2.137809 (3.375073)	kp_avg_acc: 0.625000 (0.388170)
[2019-08-14 15:56:04,325-rk0-val_siamrcnn.py#272] Validation: [1279/1899]	batch_time: 0.025040 (0.028946)	data_time: 0.000090 (0.002786)	rpn_cls_loss: 0.002649 (0.003597)	rpn_loc_loss: 0.061590 (0.073212)	kp_hp_loss: 0.711861 (0.750452)	kp_hm_hp_loss: 1.784330 (2.300136)	kp_hp_offset_loss: 0.258020 (0.234224)	kp_loss: 2.754212 (3.284811)	siammask_loss: 2.830769 (3.376263)	kp_avg_acc: 0.333333 (0.387597)
[2019-08-14 15:56:06,541-rk0-val_siamrcnn.py#272] Validation: [1289/1899]	batch_time: 0.027034 (0.028922)	data_time: 0.000089 (0.002765)	rpn_cls_loss: 0.000514 (0.003662)	rpn_loc_loss: 0.031394 (0.073370)	kp_hp_loss: 0.894934 (0.753361)	kp_hm_hp_loss: 3.992208 (2.299445)	kp_hp_offset_loss: 0.303925 (0.234323)	kp_loss: 5.191067 (3.287128)	siammask_loss: 5.229253 (3.378835)	kp_avg_acc: 0.076923 (0.387564)
[2019-08-14 15:56:08,753-rk0-val_siamrcnn.py#272] Validation: [1299/1899]	batch_time: 0.025210 (0.028895)	data_time: 0.000149 (0.002745)	rpn_cls_loss: 0.008077 (0.003648)	rpn_loc_loss: 0.128264 (0.073421)	kp_hp_loss: 0.304502 (0.752830)	kp_hm_hp_loss: 1.135994 (2.298570)	kp_hp_offset_loss: 0.202678 (0.234355)	kp_loss: 1.643174 (3.285754)	siammask_loss: 1.805168 (3.377508)	kp_avg_acc: 0.500000 (0.387190)
[2019-08-14 15:56:10,956-rk0-val_siamrcnn.py#272] Validation: [1309/1899]	batch_time: 0.027234 (0.028868)	data_time: 0.000091 (0.002726)	rpn_cls_loss: 0.001058 (0.003645)	rpn_loc_loss: 0.058568 (0.073439)	kp_hp_loss: 0.549955 (0.754711)	kp_hm_hp_loss: 1.219801 (2.301845)	kp_hp_offset_loss: 0.227250 (0.234372)	kp_loss: 1.997007 (3.290927)	siammask_loss: 2.068346 (3.382698)	kp_avg_acc: 0.500000 (0.387163)
[2019-08-14 15:56:13,121-rk0-val_siamrcnn.py#272] Validation: [1319/1899]	batch_time: 0.024929 (0.028842)	data_time: 0.000090 (0.002706)	rpn_cls_loss: 0.001013 (0.003640)	rpn_loc_loss: 0.129088 (0.073515)	kp_hp_loss: 1.103928 (0.753941)	kp_hm_hp_loss: 2.472415 (2.299392)	kp_hp_offset_loss: 0.209135 (0.234290)	kp_loss: 3.785477 (3.287621)	siammask_loss: 3.941396 (3.379480)	kp_avg_acc: 0.000000 (0.387081)
[2019-08-14 15:56:15,260-rk0-val_siamrcnn.py#272] Validation: [1329/1899]	batch_time: 0.028340 (0.028815)	data_time: 0.000088 (0.002687)	rpn_cls_loss: 0.000678 (0.003624)	rpn_loc_loss: 0.094252 (0.073547)	kp_hp_loss: 0.666136 (0.752526)	kp_hm_hp_loss: 0.223625 (2.294930)	kp_hp_offset_loss: 0.196343 (0.234279)	kp_loss: 1.086104 (3.281734)	siammask_loss: 1.199883 (3.373614)	kp_avg_acc: 0.777778 (0.388408)
[2019-08-14 15:56:17,378-rk0-val_siamrcnn.py#272] Validation: [1339/1899]	batch_time: 0.024815 (0.028789)	data_time: 0.000089 (0.002668)	rpn_cls_loss: 0.000971 (0.003606)	rpn_loc_loss: 0.055612 (0.073677)	kp_hp_loss: 1.121243 (0.751900)	kp_hm_hp_loss: 3.763470 (2.295505)	kp_hp_offset_loss: 0.236935 (0.234394)	kp_loss: 5.121648 (3.281798)	siammask_loss: 5.189353 (3.373817)	kp_avg_acc: 0.466667 (0.388587)
[2019-08-14 15:56:19,499-rk0-val_siamrcnn.py#272] Validation: [1349/1899]	batch_time: 0.026084 (0.028763)	data_time: 0.000088 (0.002650)	rpn_cls_loss: 0.000513 (0.003592)	rpn_loc_loss: 0.240301 (0.073631)	kp_hp_loss: 1.360085 (0.751204)	kp_hm_hp_loss: 2.589323 (2.291663)	kp_hp_offset_loss: 0.223605 (0.234335)	kp_loss: 4.173013 (3.277201)	siammask_loss: 4.461887 (3.369151)	kp_avg_acc: 0.000000 (0.388852)
[2019-08-14 15:56:21,650-rk0-val_siamrcnn.py#272] Validation: [1359/1899]	batch_time: 0.024948 (0.028736)	data_time: 0.000092 (0.002632)	rpn_cls_loss: 0.000453 (0.003577)	rpn_loc_loss: 0.033892 (0.073521)	kp_hp_loss: 0.437230 (0.750620)	kp_hm_hp_loss: 1.126804 (2.293640)	kp_hp_offset_loss: 0.232335 (0.234324)	kp_loss: 1.796369 (3.278582)	siammask_loss: 1.837493 (3.370385)	kp_avg_acc: 0.500000 (0.388492)
[2019-08-14 15:56:23,811-rk0-val_siamrcnn.py#272] Validation: [1369/1899]	batch_time: 0.024777 (0.028708)	data_time: 0.000091 (0.002614)	rpn_cls_loss: 0.001177 (0.003564)	rpn_loc_loss: 0.039398 (0.073357)	kp_hp_loss: 0.819210 (0.751328)	kp_hm_hp_loss: 4.227102 (2.301057)	kp_hp_offset_loss: 0.264214 (0.234350)	kp_loss: 5.310526 (3.286733)	siammask_loss: 5.358982 (3.378326)	kp_avg_acc: 0.090909 (0.388119)
[2019-08-14 15:56:27,388-rk0-val_siamrcnn.py#272] Validation: [1379/1899]	batch_time: 0.028485 (0.028684)	data_time: 0.000088 (0.002596)	rpn_cls_loss: 0.000393 (0.003545)	rpn_loc_loss: 0.048561 (0.073271)	kp_hp_loss: 1.071264 (0.751622)	kp_hm_hp_loss: 2.494998 (2.301565)	kp_hp_offset_loss: 0.288422 (0.234450)	kp_loss: 3.854683 (3.287635)	siammask_loss: 3.913349 (3.379107)	kp_avg_acc: 0.090909 (0.387707)
[2019-08-14 15:56:29,841-rk0-val_siamrcnn.py#272] Validation: [1389/1899]	batch_time: 0.024879 (0.028658)	data_time: 0.000089 (0.002578)	rpn_cls_loss: 0.002023 (0.003540)	rpn_loc_loss: 0.041805 (0.073397)	kp_hp_loss: 2.433371 (0.752754)	kp_hm_hp_loss: 5.979859 (2.303046)	kp_hp_offset_loss: 0.277206 (0.234428)	kp_loss: 8.690436 (3.290225)	siammask_loss: 8.742625 (3.381842)	kp_avg_acc: 0.000000 (0.386796)
[2019-08-14 15:56:32,142-rk0-val_siamrcnn.py#272] Validation: [1399/1899]	batch_time: 0.024735 (0.028631)	data_time: 0.000085 (0.002561)	rpn_cls_loss: 0.000479 (0.003564)	rpn_loc_loss: 0.057026 (0.073347)	kp_hp_loss: 0.342422 (0.752081)	kp_hm_hp_loss: 1.213289 (2.305696)	kp_hp_offset_loss: 0.226555 (0.234368)	kp_loss: 1.782266 (3.292142)	siammask_loss: 1.851177 (3.383724)	kp_avg_acc: 0.100000 (0.386629)
[2019-08-14 15:56:34,458-rk0-val_siamrcnn.py#272] Validation: [1409/1899]	batch_time: 0.024852 (0.028608)	data_time: 0.000090 (0.002544)	rpn_cls_loss: 0.010937 (0.003552)	rpn_loc_loss: 0.040615 (0.073250)	kp_hp_loss: 0.375753 (0.751277)	kp_hm_hp_loss: 1.634255 (2.306917)	kp_hp_offset_loss: 0.261635 (0.234370)	kp_loss: 2.271643 (3.292562)	siammask_loss: 2.331319 (3.384016)	kp_avg_acc: 0.545455 (0.386756)
[2019-08-14 15:56:36,884-rk0-val_siamrcnn.py#272] Validation: [1419/1899]	batch_time: 0.024911 (0.028583)	data_time: 0.000090 (0.002527)	rpn_cls_loss: 0.004426 (0.003564)	rpn_loc_loss: 0.090258 (0.073338)	kp_hp_loss: 1.241491 (0.749747)	kp_hm_hp_loss: 2.195936 (2.300630)	kp_hp_offset_loss: 0.237287 (0.234218)	kp_loss: 3.674713 (3.284592)	siammask_loss: 3.787449 (3.376163)	kp_avg_acc: 0.312500 (0.387920)
[2019-08-14 15:56:39,092-rk0-val_siamrcnn.py#272] Validation: [1429/1899]	batch_time: 0.024745 (0.028559)	data_time: 0.000091 (0.002511)	rpn_cls_loss: 0.003782 (0.003594)	rpn_loc_loss: 0.024418 (0.073279)	kp_hp_loss: 0.624225 (0.747492)	kp_hm_hp_loss: 3.959743 (2.296494)	kp_hp_offset_loss: 0.291408 (0.234254)	kp_loss: 4.875377 (3.278237)	siammask_loss: 4.908461 (3.369767)	kp_avg_acc: 0.333333 (0.389029)
[2019-08-14 15:56:42,317-rk0-val_siamrcnn.py#272] Validation: [1439/1899]	batch_time: 0.024744 (0.028557)	data_time: 0.000077 (0.002495)	rpn_cls_loss: 0.000488 (0.003587)	rpn_loc_loss: 0.122856 (0.073157)	kp_hp_loss: 0.372078 (0.744982)	kp_hm_hp_loss: 3.891260 (2.290635)	kp_hp_offset_loss: 0.204542 (0.234188)	kp_loss: 4.467880 (3.269803)	siammask_loss: 4.615796 (3.361179)	kp_avg_acc: 0.454545 (0.389997)
[2019-08-14 15:56:44,677-rk0-val_siamrcnn.py#272] Validation: [1449/1899]	batch_time: 0.027607 (0.028534)	data_time: 0.000089 (0.002478)	rpn_cls_loss: 0.003173 (0.003579)	rpn_loc_loss: 0.148585 (0.073201)	kp_hp_loss: 0.578567 (0.744399)	kp_hm_hp_loss: 1.799303 (2.292234)	kp_hp_offset_loss: 0.233459 (0.234188)	kp_loss: 2.611329 (3.270818)	siammask_loss: 2.792804 (3.362240)	kp_avg_acc: 0.214286 (0.390080)
[2019-08-14 15:56:47,029-rk0-val_siamrcnn.py#272] Validation: [1459/1899]	batch_time: 0.024911 (0.028509)	data_time: 0.000088 (0.002463)	rpn_cls_loss: 0.000393 (0.003579)	rpn_loc_loss: 0.080491 (0.073382)	kp_hp_loss: 0.204993 (0.742645)	kp_hm_hp_loss: 0.266566 (2.287932)	kp_hp_offset_loss: 0.176655 (0.234152)	kp_loss: 0.648214 (3.264727)	siammask_loss: 0.745196 (3.356366)	kp_avg_acc: 0.764706 (0.390872)
[2019-08-14 15:56:50,816-rk0-val_siamrcnn.py#272] Validation: [1469/1899]	batch_time: 0.027733 (0.028486)	data_time: 0.000087 (0.002447)	rpn_cls_loss: 0.015281 (0.003576)	rpn_loc_loss: 0.178201 (0.073555)	kp_hp_loss: 0.441551 (0.741308)	kp_hm_hp_loss: 1.403165 (2.283524)	kp_hp_offset_loss: 0.243813 (0.234113)	kp_loss: 2.088530 (3.258943)	siammask_loss: 2.317652 (3.350787)	kp_avg_acc: 0.400000 (0.391366)
[2019-08-14 15:56:53,195-rk0-val_siamrcnn.py#272] Validation: [1479/1899]	batch_time: 0.024848 (0.028464)	data_time: 0.000086 (0.002432)	rpn_cls_loss: 0.000463 (0.003559)	rpn_loc_loss: 0.072366 (0.073682)	kp_hp_loss: 0.704703 (0.740612)	kp_hm_hp_loss: 2.638333 (2.281581)	kp_hp_offset_loss: 0.233617 (0.234161)	kp_loss: 3.576653 (3.256351)	siammask_loss: 3.663956 (3.348330)	kp_avg_acc: 0.562500 (0.391324)
[2019-08-14 15:56:55,384-rk0-val_siamrcnn.py#272] Validation: [1489/1899]	batch_time: 0.024725 (0.028440)	data_time: 0.000086 (0.002416)	rpn_cls_loss: 0.000664 (0.003546)	rpn_loc_loss: 0.096300 (0.073646)	kp_hp_loss: 0.341319 (0.740128)	kp_hm_hp_loss: 1.672836 (2.280201)	kp_hp_offset_loss: 0.239068 (0.234200)	kp_loss: 2.253223 (3.254527)	siammask_loss: 2.369448 (3.346450)	kp_avg_acc: 0.363636 (0.390839)
[2019-08-14 15:56:57,840-rk0-val_siamrcnn.py#272] Validation: [1499/1899]	batch_time: 0.024881 (0.028418)	data_time: 0.000097 (0.002401)	rpn_cls_loss: 0.001094 (0.003560)	rpn_loc_loss: 0.119992 (0.073785)	kp_hp_loss: 3.039326 (0.741972)	kp_hm_hp_loss: 14.466380 (2.291597)	kp_hp_offset_loss: 0.264780 (0.234258)	kp_loss: 17.770487 (3.267824)	siammask_loss: 17.915571 (3.359927)	kp_avg_acc: 0.000000 (0.390089)
[2019-08-14 15:57:04,467-rk0-val_siamrcnn.py#272] Validation: [1509/1899]	batch_time: 0.024908 (0.028424)	data_time: 0.000087 (0.002406)	rpn_cls_loss: 0.017268 (0.003551)	rpn_loc_loss: 0.025260 (0.073839)	kp_hp_loss: 0.534857 (0.741708)	kp_hm_hp_loss: 1.570668 (2.290299)	kp_hp_offset_loss: 0.194429 (0.234111)	kp_loss: 2.299954 (3.266116)	siammask_loss: 2.347533 (3.358275)	kp_avg_acc: 0.272727 (0.390609)
[2019-08-14 15:57:06,875-rk0-val_siamrcnn.py#272] Validation: [1519/1899]	batch_time: 0.024801 (0.028402)	data_time: 0.000090 (0.002391)	rpn_cls_loss: 0.000661 (0.003598)	rpn_loc_loss: 0.103748 (0.073876)	kp_hp_loss: 0.687578 (0.740778)	kp_hm_hp_loss: 3.640271 (2.289392)	kp_hp_offset_loss: 0.305611 (0.234133)	kp_loss: 4.633460 (3.264300)	siammask_loss: 4.758617 (3.356551)	kp_avg_acc: 0.000000 (0.390551)
[2019-08-14 15:57:09,361-rk0-val_siamrcnn.py#272] Validation: [1529/1899]	batch_time: 0.024678 (0.028380)	data_time: 0.000089 (0.002377)	rpn_cls_loss: 0.002363 (0.003581)	rpn_loc_loss: 0.064547 (0.073815)	kp_hp_loss: 1.122956 (0.739056)	kp_hm_hp_loss: 2.225143 (2.282633)	kp_hp_offset_loss: 0.174200 (0.233942)	kp_loss: 3.522300 (3.255628)	siammask_loss: 3.602119 (3.347789)	kp_avg_acc: 0.200000 (0.391029)
[2019-08-14 15:57:11,954-rk0-val_siamrcnn.py#272] Validation: [1539/1899]	batch_time: 0.024843 (0.028359)	data_time: 0.000088 (0.002363)	rpn_cls_loss: 0.000500 (0.003613)	rpn_loc_loss: 0.037659 (0.073821)	kp_hp_loss: 0.398960 (0.740465)	kp_hm_hp_loss: 1.102845 (2.281778)	kp_hp_offset_loss: 0.208004 (0.234002)	kp_loss: 1.709809 (3.256241)	siammask_loss: 1.755499 (3.348442)	kp_avg_acc: 0.529412 (0.391305)
[2019-08-14 15:57:14,481-rk0-val_siamrcnn.py#272] Validation: [1549/1899]	batch_time: 0.029513 (0.028340)	data_time: 0.000183 (0.002348)	rpn_cls_loss: 0.001757 (0.003606)	rpn_loc_loss: 0.143312 (0.073874)	kp_hp_loss: 0.466357 (0.739173)	kp_hm_hp_loss: 2.617030 (2.277983)	kp_hp_offset_loss: 0.277997 (0.233889)	kp_loss: 3.361384 (3.251042)	siammask_loss: 3.535115 (3.343299)	kp_avg_acc: 0.500000 (0.391457)
[2019-08-14 15:57:16,848-rk0-val_siamrcnn.py#272] Validation: [1559/1899]	batch_time: 0.024757 (0.028319)	data_time: 0.000090 (0.002334)	rpn_cls_loss: 0.000500 (0.003607)	rpn_loc_loss: 0.082367 (0.073925)	kp_hp_loss: 0.749282 (0.738288)	kp_hm_hp_loss: 2.370280 (2.275191)	kp_hp_offset_loss: 0.243287 (0.233996)	kp_loss: 3.362849 (3.247472)	siammask_loss: 3.462190 (3.339792)	kp_avg_acc: 0.272727 (0.391460)
[2019-08-14 15:57:19,383-rk0-val_siamrcnn.py#272] Validation: [1569/1899]	batch_time: 0.024791 (0.028297)	data_time: 0.000089 (0.002321)	rpn_cls_loss: 0.000910 (0.003596)	rpn_loc_loss: 0.150811 (0.074046)	kp_hp_loss: 0.605592 (0.738877)	kp_hm_hp_loss: 2.000441 (2.273390)	kp_hp_offset_loss: 0.174440 (0.233926)	kp_loss: 2.780472 (3.246189)	siammask_loss: 2.962356 (3.338643)	kp_avg_acc: 0.333333 (0.391077)
[2019-08-14 15:57:21,932-rk0-val_siamrcnn.py#272] Validation: [1579/1899]	batch_time: 0.024981 (0.028280)	data_time: 0.000088 (0.002307)	rpn_cls_loss: 0.000323 (0.003581)	rpn_loc_loss: 0.032785 (0.074094)	kp_hp_loss: 0.706513 (0.742336)	kp_hm_hp_loss: 1.055528 (2.280859)	kp_hp_offset_loss: 0.221343 (0.233965)	kp_loss: 1.983384 (3.257157)	siammask_loss: 2.023049 (3.349654)	kp_avg_acc: 0.470588 (0.390222)
[2019-08-14 15:57:26,064-rk0-val_siamrcnn.py#272] Validation: [1589/1899]	batch_time: 0.024777 (0.028259)	data_time: 0.000087 (0.002294)	rpn_cls_loss: 0.000841 (0.003564)	rpn_loc_loss: 0.075874 (0.073988)	kp_hp_loss: 1.108779 (0.742544)	kp_hm_hp_loss: 3.998586 (2.281967)	kp_hp_offset_loss: 0.257557 (0.233941)	kp_loss: 5.364923 (3.258448)	siammask_loss: 5.456813 (3.350801)	kp_avg_acc: 0.200000 (0.390654)
[2019-08-14 15:57:28,704-rk0-val_siamrcnn.py#272] Validation: [1599/1899]	batch_time: 0.026612 (0.028239)	data_time: 0.000105 (0.002280)	rpn_cls_loss: 0.000436 (0.003556)	rpn_loc_loss: 0.042649 (0.074067)	kp_hp_loss: 0.533329 (0.741237)	kp_hm_hp_loss: 1.448208 (2.279639)	kp_hp_offset_loss: 0.301848 (0.233959)	kp_loss: 2.283386 (3.254831)	siammask_loss: 2.335000 (3.347271)	kp_avg_acc: 0.555556 (0.391407)
[2019-08-14 15:57:31,218-rk0-val_siamrcnn.py#272] Validation: [1609/1899]	batch_time: 0.024810 (0.028218)	data_time: 0.000089 (0.002267)	rpn_cls_loss: 0.000350 (0.003549)	rpn_loc_loss: 0.041339 (0.074054)	kp_hp_loss: 0.878408 (0.741669)	kp_hm_hp_loss: 1.831450 (2.280140)	kp_hp_offset_loss: 0.261475 (0.234141)	kp_loss: 2.971334 (3.255946)	siammask_loss: 3.021291 (3.348363)	kp_avg_acc: 0.400000 (0.391108)
[2019-08-14 15:57:33,511-rk0-val_siamrcnn.py#272] Validation: [1619/1899]	batch_time: 0.024976 (0.028199)	data_time: 0.000087 (0.002254)	rpn_cls_loss: 0.000403 (0.003534)	rpn_loc_loss: 0.035538 (0.074123)	kp_hp_loss: 0.318692 (0.741510)	kp_hm_hp_loss: 0.766827 (2.278099)	kp_hp_offset_loss: 0.226910 (0.234177)	kp_loss: 1.312428 (3.253781)	siammask_loss: 1.355476 (3.346266)	kp_avg_acc: 0.800000 (0.391282)
[2019-08-14 15:57:35,829-rk0-val_siamrcnn.py#272] Validation: [1629/1899]	batch_time: 0.027844 (0.028183)	data_time: 0.000087 (0.002241)	rpn_cls_loss: 0.000421 (0.003608)	rpn_loc_loss: 0.083427 (0.074283)	kp_hp_loss: 0.315163 (0.741563)	kp_hm_hp_loss: 0.383269 (2.278623)	kp_hp_offset_loss: 0.219095 (0.234218)	kp_loss: 0.917526 (3.254401)	siammask_loss: 1.018059 (3.347152)	kp_avg_acc: 0.937500 (0.391121)
[2019-08-14 15:57:38,705-rk0-val_siamrcnn.py#272] Validation: [1639/1899]	batch_time: 0.024951 (0.028163)	data_time: 0.000086 (0.002229)	rpn_cls_loss: 0.000456 (0.003596)	rpn_loc_loss: 0.030213 (0.074184)	kp_hp_loss: 0.232277 (0.743260)	kp_hm_hp_loss: 0.450175 (2.282134)	kp_hp_offset_loss: 0.174031 (0.234206)	kp_loss: 0.856483 (3.259596)	siammask_loss: 0.893195 (3.352216)	kp_avg_acc: 0.705882 (0.390888)
[2019-08-14 15:57:42,903-rk0-val_siamrcnn.py#272] Validation: [1649/1899]	batch_time: 0.024730 (0.028143)	data_time: 0.000086 (0.002216)	rpn_cls_loss: 0.001111 (0.003600)	rpn_loc_loss: 0.054728 (0.074079)	kp_hp_loss: 0.477584 (0.741615)	kp_hm_hp_loss: 2.157841 (2.279975)	kp_hp_offset_loss: 0.245280 (0.234225)	kp_loss: 2.880705 (3.255811)	siammask_loss: 2.947490 (3.348308)	kp_avg_acc: 0.363636 (0.391394)
[2019-08-14 15:57:47,745-rk0-val_siamrcnn.py#272] Validation: [1659/1899]	batch_time: 0.024810 (0.028126)	data_time: 0.000100 (0.002204)	rpn_cls_loss: 0.000934 (0.003593)	rpn_loc_loss: 0.020136 (0.073961)	kp_hp_loss: 0.757479 (0.740313)	kp_hm_hp_loss: 1.512573 (2.279088)	kp_hp_offset_loss: 0.242764 (0.234224)	kp_loss: 2.512816 (3.253621)	siammask_loss: 2.537914 (3.345971)	kp_avg_acc: 0.461538 (0.391031)
[2019-08-14 15:57:50,421-rk0-val_siamrcnn.py#272] Validation: [1669/1899]	batch_time: 0.024749 (0.028155)	data_time: 0.000096 (0.002239)	rpn_cls_loss: 0.000341 (0.003576)	rpn_loc_loss: 0.034539 (0.073996)	kp_hp_loss: 0.279475 (0.738914)	kp_hm_hp_loss: 0.920798 (2.275856)	kp_hp_offset_loss: 0.173713 (0.234106)	kp_loss: 1.373986 (3.248872)	siammask_loss: 1.415774 (3.341246)	kp_avg_acc: 0.636364 (0.391157)
[2019-08-14 15:57:52,728-rk0-val_siamrcnn.py#272] Validation: [1679/1899]	batch_time: 0.024698 (0.028138)	data_time: 0.000082 (0.002227)	rpn_cls_loss: 0.000436 (0.003570)	rpn_loc_loss: 0.035747 (0.074336)	kp_hp_loss: 0.749448 (0.740197)	kp_hm_hp_loss: 1.142220 (2.276016)	kp_hp_offset_loss: 0.256224 (0.234117)	kp_loss: 2.147891 (3.250327)	siammask_loss: 2.191223 (3.343104)	kp_avg_acc: 0.600000 (0.390610)
[2019-08-14 15:57:55,003-rk0-val_siamrcnn.py#272] Validation: [1689/1899]	batch_time: 0.024894 (0.028119)	data_time: 0.000090 (0.002215)	rpn_cls_loss: 0.000472 (0.003590)	rpn_loc_loss: 0.037452 (0.074252)	kp_hp_loss: 0.426896 (0.738620)	kp_hm_hp_loss: 0.999597 (2.272988)	kp_hp_offset_loss: 0.255715 (0.234176)	kp_loss: 1.682208 (3.245780)	siammask_loss: 1.727623 (3.338475)	kp_avg_acc: 0.687500 (0.390950)
[2019-08-14 15:57:57,300-rk0-val_siamrcnn.py#272] Validation: [1699/1899]	batch_time: 0.024766 (0.028100)	data_time: 0.000088 (0.002203)	rpn_cls_loss: 0.002869 (0.003573)	rpn_loc_loss: 0.052725 (0.074097)	kp_hp_loss: 0.522818 (0.737119)	kp_hm_hp_loss: 0.918599 (2.268762)	kp_hp_offset_loss: 0.189976 (0.234177)	kp_loss: 1.631393 (3.240054)	siammask_loss: 1.697532 (3.332546)	kp_avg_acc: 0.583333 (0.392366)
[2019-08-14 15:57:59,512-rk0-val_siamrcnn.py#272] Validation: [1709/1899]	batch_time: 0.025049 (0.028090)	data_time: 0.000089 (0.002191)	rpn_cls_loss: 0.000488 (0.003560)	rpn_loc_loss: 0.113400 (0.074002)	kp_hp_loss: 0.921158 (0.736458)	kp_hm_hp_loss: 4.133824 (2.267095)	kp_hp_offset_loss: 0.210945 (0.234208)	kp_loss: 5.265927 (3.237757)	siammask_loss: 5.402496 (3.330122)	kp_avg_acc: 0.076923 (0.392819)
[2019-08-14 15:58:01,768-rk0-val_siamrcnn.py#272] Validation: [1719/1899]	batch_time: 0.024768 (0.028071)	data_time: 0.000089 (0.002179)	rpn_cls_loss: 0.005884 (0.003546)	rpn_loc_loss: 0.158033 (0.074201)	kp_hp_loss: 2.057635 (0.737068)	kp_hm_hp_loss: 2.303137 (2.265867)	kp_hp_offset_loss: 0.259943 (0.234300)	kp_loss: 4.620715 (3.237231)	siammask_loss: 4.816239 (3.329821)	kp_avg_acc: 0.142857 (0.392502)
[2019-08-14 15:58:06,384-rk0-val_siamrcnn.py#272] Validation: [1729/1899]	batch_time: 0.024750 (0.028055)	data_time: 0.000088 (0.002167)	rpn_cls_loss: 0.002126 (0.003535)	rpn_loc_loss: 0.036132 (0.074142)	kp_hp_loss: 1.032130 (0.736226)	kp_hm_hp_loss: 2.129981 (2.262322)	kp_hp_offset_loss: 0.283696 (0.234258)	kp_loss: 3.445807 (3.232801)	siammask_loss: 3.491292 (3.325309)	kp_avg_acc: 0.300000 (0.392994)
[2019-08-14 15:58:08,989-rk0-val_siamrcnn.py#272] Validation: [1739/1899]	batch_time: 0.025015 (0.028046)	data_time: 0.000088 (0.002156)	rpn_cls_loss: 0.000640 (0.003521)	rpn_loc_loss: 0.120759 (0.074097)	kp_hp_loss: 2.024896 (0.738221)	kp_hm_hp_loss: 2.822517 (2.265467)	kp_hp_offset_loss: 0.213898 (0.234264)	kp_loss: 5.061312 (3.237947)	siammask_loss: 5.206862 (3.330387)	kp_avg_acc: 0.117647 (0.392335)
[2019-08-14 15:58:11,360-rk0-val_siamrcnn.py#272] Validation: [1749/1899]	batch_time: 0.024838 (0.028036)	data_time: 0.000090 (0.002145)	rpn_cls_loss: 0.000542 (0.003507)	rpn_loc_loss: 0.092596 (0.074242)	kp_hp_loss: 0.237282 (0.737344)	kp_hm_hp_loss: 0.476014 (2.260921)	kp_hp_offset_loss: 0.195253 (0.234319)	kp_loss: 0.908550 (3.232580)	siammask_loss: 1.020208 (3.325181)	kp_avg_acc: 0.750000 (0.392924)
[2019-08-14 15:58:13,695-rk0-val_siamrcnn.py#272] Validation: [1759/1899]	batch_time: 0.024843 (0.028018)	data_time: 0.000098 (0.002133)	rpn_cls_loss: 0.001001 (0.003545)	rpn_loc_loss: 0.058487 (0.074264)	kp_hp_loss: 1.116433 (0.737020)	kp_hm_hp_loss: 7.132529 (2.260473)	kp_hp_offset_loss: 0.195721 (0.234464)	kp_loss: 8.444682 (3.231951)	siammask_loss: 8.515868 (3.324616)	kp_avg_acc: 0.133333 (0.392919)
[2019-08-14 15:58:16,006-rk0-val_siamrcnn.py#272] Validation: [1769/1899]	batch_time: 0.024877 (0.028001)	data_time: 0.000088 (0.002122)	rpn_cls_loss: 0.000515 (0.003534)	rpn_loc_loss: 0.131174 (0.074343)	kp_hp_loss: 2.509906 (0.737464)	kp_hm_hp_loss: 8.756384 (2.266480)	kp_hp_offset_loss: 0.297387 (0.234416)	kp_loss: 11.563677 (3.238355)	siammask_loss: 11.721601 (3.331105)	kp_avg_acc: 0.142857 (0.392307)
[2019-08-14 15:58:18,285-rk0-val_siamrcnn.py#272] Validation: [1779/1899]	batch_time: 0.024807 (0.027983)	data_time: 0.000090 (0.002111)	rpn_cls_loss: 0.000504 (0.004050)	rpn_loc_loss: 0.028317 (0.074712)	kp_hp_loss: 0.359937 (0.738952)	kp_hm_hp_loss: 0.736099 (2.273926)	kp_hp_offset_loss: 0.185511 (0.234447)	kp_loss: 1.281548 (3.247321)	siammask_loss: 1.316032 (3.341029)	kp_avg_acc: 0.583333 (0.391833)
[2019-08-14 15:58:20,606-rk0-val_siamrcnn.py#272] Validation: [1789/1899]	batch_time: 0.024803 (0.027966)	data_time: 0.000088 (0.002100)	rpn_cls_loss: 0.000616 (0.004059)	rpn_loc_loss: 0.026761 (0.074600)	kp_hp_loss: 1.500887 (0.738775)	kp_hm_hp_loss: 4.256138 (2.276529)	kp_hp_offset_loss: 0.266209 (0.234394)	kp_loss: 6.023234 (3.249694)	siammask_loss: 6.055964 (3.343275)	kp_avg_acc: 0.200000 (0.391888)
[2019-08-14 15:58:22,892-rk0-val_siamrcnn.py#272] Validation: [1799/1899]	batch_time: 0.024781 (0.027949)	data_time: 0.000087 (0.002090)	rpn_cls_loss: 0.001141 (0.004047)	rpn_loc_loss: 0.104940 (0.074624)	kp_hp_loss: 0.473512 (0.739623)	kp_hm_hp_loss: 1.364059 (2.274440)	kp_hp_offset_loss: 0.237544 (0.234399)	kp_loss: 2.075115 (3.248458)	siammask_loss: 2.202184 (3.342056)	kp_avg_acc: 0.214286 (0.391100)
[2019-08-14 15:58:25,199-rk0-val_siamrcnn.py#272] Validation: [1809/1899]	batch_time: 0.024749 (0.027932)	data_time: 0.000100 (0.002079)	rpn_cls_loss: 0.001855 (0.004032)	rpn_loc_loss: 0.049794 (0.074583)	kp_hp_loss: 0.454893 (0.741762)	kp_hm_hp_loss: 1.960762 (2.277653)	kp_hp_offset_loss: 0.201938 (0.234393)	kp_loss: 2.617593 (3.253804)	siammask_loss: 2.679201 (3.347337)	kp_avg_acc: 0.500000 (0.390902)
[2019-08-14 15:58:28,082-rk0-val_siamrcnn.py#272] Validation: [1819/1899]	batch_time: 0.024954 (0.027915)	data_time: 0.000088 (0.002068)	rpn_cls_loss: 0.009735 (0.004019)	rpn_loc_loss: 0.044437 (0.074580)	kp_hp_loss: 0.980822 (0.741435)	kp_hm_hp_loss: 4.375675 (2.277790)	kp_hp_offset_loss: 0.289195 (0.234507)	kp_loss: 5.645692 (3.253728)	siammask_loss: 5.708751 (3.347245)	kp_avg_acc: 0.000000 (0.391155)
[2019-08-14 15:58:31,468-rk0-val_siamrcnn.py#272] Validation: [1829/1899]	batch_time: 0.024990 (0.027899)	data_time: 0.000089 (0.002058)	rpn_cls_loss: 0.000444 (0.004026)	rpn_loc_loss: 0.063885 (0.074672)	kp_hp_loss: 0.513905 (0.743201)	kp_hm_hp_loss: 1.588611 (2.281508)	kp_hp_offset_loss: 0.248840 (0.234580)	kp_loss: 2.351357 (3.259285)	siammask_loss: 2.428463 (3.352919)	kp_avg_acc: 0.214286 (0.390674)
[2019-08-14 15:58:33,788-rk0-val_siamrcnn.py#272] Validation: [1839/1899]	batch_time: 0.024720 (0.027883)	data_time: 0.000087 (0.002048)	rpn_cls_loss: 0.042910 (0.004068)	rpn_loc_loss: 0.112469 (0.074692)	kp_hp_loss: 1.259399 (0.743042)	kp_hm_hp_loss: 2.884206 (2.281214)	kp_hp_offset_loss: 0.336054 (0.234681)	kp_loss: 4.479660 (3.258934)	siammask_loss: 4.657532 (3.352634)	kp_avg_acc: 0.000000 (0.390286)
[2019-08-14 15:58:36,106-rk0-val_siamrcnn.py#272] Validation: [1849/1899]	batch_time: 0.024745 (0.027866)	data_time: 0.000086 (0.002038)	rpn_cls_loss: 0.000630 (0.004056)	rpn_loc_loss: 0.052341 (0.074577)	kp_hp_loss: 0.501531 (0.741647)	kp_hm_hp_loss: 1.883587 (2.277641)	kp_hp_offset_loss: 0.258766 (0.234626)	kp_loss: 2.643883 (3.253911)	siammask_loss: 2.707323 (3.347461)	kp_avg_acc: 0.500000 (0.391090)
[2019-08-14 15:58:38,401-rk0-val_siamrcnn.py#272] Validation: [1859/1899]	batch_time: 0.024939 (0.027854)	data_time: 0.000091 (0.002027)	rpn_cls_loss: 0.000359 (0.004040)	rpn_loc_loss: 0.058721 (0.074620)	kp_hp_loss: 0.434259 (0.741926)	kp_hm_hp_loss: 0.986828 (2.275497)	kp_hp_offset_loss: 0.197930 (0.234566)	kp_loss: 1.619017 (3.251985)	siammask_loss: 1.689841 (3.345572)	kp_avg_acc: 0.785714 (0.390947)
[2019-08-14 15:58:40,671-rk0-val_siamrcnn.py#272] Validation: [1869/1899]	batch_time: 0.024710 (0.027838)	data_time: 0.000089 (0.002018)	rpn_cls_loss: 0.000661 (0.004027)	rpn_loc_loss: 0.064596 (0.074575)	kp_hp_loss: 1.143592 (0.741714)	kp_hm_hp_loss: 3.660267 (2.274374)	kp_hp_offset_loss: 0.268010 (0.234513)	kp_loss: 5.071869 (3.250597)	siammask_loss: 5.150046 (3.344117)	kp_avg_acc: 0.000000 (0.391190)
[2019-08-14 15:58:43,015-rk0-val_siamrcnn.py#272] Validation: [1879/1899]	batch_time: 0.024985 (0.027822)	data_time: 0.000089 (0.002008)	rpn_cls_loss: 0.000559 (0.004017)	rpn_loc_loss: 0.141959 (0.074600)	kp_hp_loss: 0.468877 (0.742512)	kp_hm_hp_loss: 1.543084 (2.276964)	kp_hp_offset_loss: 0.203507 (0.234593)	kp_loss: 2.215467 (3.254065)	siammask_loss: 2.386378 (3.347605)	kp_avg_acc: 0.125000 (0.390885)
[2019-08-14 15:58:45,325-rk0-val_siamrcnn.py#272] Validation: [1889/1899]	batch_time: 0.024725 (0.027807)	data_time: 0.000090 (0.001998)	rpn_cls_loss: 0.002401 (0.004000)	rpn_loc_loss: 0.138324 (0.074590)	kp_hp_loss: 1.378868 (0.742744)	kp_hm_hp_loss: 2.303692 (2.281520)	kp_hp_offset_loss: 0.245660 (0.234627)	kp_loss: 3.928219 (3.258887)	siammask_loss: 4.096610 (3.352397)	kp_avg_acc: 0.307692 (0.390686)
[2019-08-14 16:29:32,068-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 16:29:32,072-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0813/checkpoint_e104.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 16:29:32,112-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 16:29:32,112-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 16:29:32,248-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 16:29:35,736-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 16:29:35,771-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 16:29:35,837-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:29:35,838-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:29:35,840-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 16:29:35,906-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:29:35,906-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:29:35,907-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 16:29:35,920-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 16:29:36,200-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 16:29:36,202-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 16:29:36,209-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:29:36,210-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:29:36,210-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 16:29:36,213-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:29:36,213-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:29:36,214-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 16:29:52,380-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 16:29:54,263-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:29:54,265-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.2.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked'}
[2019-08-14 16:29:54,265-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 16:29:54,266-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.bn3.running_mean', 'layer4.0.downsample.1.running_mean', 'layer4.0.bn1.weight', 'layer4.2.bn1.running_mean', 'layer4.1.bn3.running_var', 'layer4.1.bn1.running_mean', 'layer4.0.bn2.weight', 'layer4.1.bn1.weight', 'layer4.0.downsample.1.bias', 'layer4.1.bn3.running_mean', 'layer4.0.downsample.0.weight', 'layer4.1.bn2.weight', 'layer4.0.bn3.running_var', 'layer4.1.bn1.running_var', 'layer4.2.bn2.running_mean', 'layer4.0.conv3.weight', 'layer4.2.bn1.bias', 'layer4.2.bn1.weight', 'layer4.2.bn2.weight', 'layer4.1.conv3.weight', 'layer4.2.conv2.weight', 'layer4.0.downsample.1.weight', 'layer4.0.bn1.running_mean', 'layer4.2.bn3.weight', 'layer4.2.bn3.bias', 'layer4.0.conv2.weight', 'layer4.1.bn3.bias', 'layer4.2.bn3.running_mean', 'layer4.2.bn1.running_var', 'layer4.0.bn1.running_var', 'layer4.2.conv3.weight', 'layer4.2.bn3.running_var', 'layer4.1.bn1.bias', 'layer4.1.bn2.running_mean', 'layer4.0.conv1.weight', 'layer4.2.bn2.bias', 'layer4.0.bn2.bias', 'layer4.1.bn2.running_var', 'layer4.0.bn2.running_mean', 'layer4.1.conv2.weight', 'layer4.1.bn3.weight', 'layer4.0.bn1.bias', 'layer4.2.bn2.running_var', 'layer4.0.bn2.running_var', 'layer4.0.bn3.bias', 'layer4.0.downsample.1.running_var', 'layer4.1.conv1.weight', 'layer4.2.conv1.weight', 'layer4.0.bn3.weight', 'layer4.1.bn2.bias'}
[2019-08-14 16:29:54,266-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 16:29:54,267-rk0-load_helper.py# 18] used keys:215
[2019-08-14 16:29:54,297-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 16:29:54,300-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 16:29:54,516-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 16:29:54,520-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0813/checkpoint_e104.pth
[2019-08-14 16:29:56,100-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:29:56,104-rk0-load_helper.py# 18] used keys:372
[2019-08-14 16:29:56,198-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 16:31:10,148-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 16:31:10,149-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0813/checkpoint_e104.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 16:31:10,151-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 16:31:10,151-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 16:31:10,153-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 16:31:13,003-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 16:31:13,038-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 16:31:13,105-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:13,106-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:31:13,108-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 16:31:13,176-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:13,176-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:31:13,176-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 16:31:13,178-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 16:31:13,271-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 16:31:13,273-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 16:31:13,276-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:13,277-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:31:13,277-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 16:31:13,280-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:13,281-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:31:13,281-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 16:31:18,137-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 16:31:18,495-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:31:18,497-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked'}
[2019-08-14 16:31:18,497-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 16:31:18,498-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.conv2.weight', 'layer4.0.downsample.1.running_mean', 'layer4.2.bn2.weight', 'layer4.1.conv3.weight', 'layer4.0.downsample.1.weight', 'layer4.1.bn2.bias', 'layer4.2.conv1.weight', 'layer4.0.bn1.bias', 'layer4.2.conv3.weight', 'layer4.0.bn2.running_var', 'layer4.2.bn3.running_mean', 'layer4.2.bn1.weight', 'layer4.2.bn3.bias', 'layer4.1.conv1.weight', 'layer4.1.conv2.weight', 'layer4.0.downsample.1.bias', 'layer4.0.bn3.weight', 'layer4.1.bn2.weight', 'layer4.1.bn3.running_var', 'layer4.0.bn1.running_var', 'layer4.2.bn1.running_var', 'layer4.0.downsample.0.weight', 'layer4.2.conv2.weight', 'layer4.1.bn3.bias', 'layer4.1.bn2.running_mean', 'layer4.2.bn2.running_mean', 'layer4.2.bn2.running_var', 'layer4.1.bn3.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn1.running_mean', 'layer4.1.bn2.running_var', 'layer4.2.bn3.running_var', 'layer4.0.bn1.weight', 'layer4.0.bn3.bias', 'layer4.0.bn2.running_mean', 'layer4.0.bn2.bias', 'layer4.1.bn1.bias', 'layer4.2.bn1.running_mean', 'layer4.0.bn3.running_mean', 'layer4.0.conv3.weight', 'layer4.0.conv1.weight', 'layer4.0.bn3.running_var', 'layer4.0.bn1.running_mean', 'layer4.1.bn1.weight', 'layer4.0.bn2.weight', 'layer4.2.bn3.weight', 'layer4.1.bn1.running_var', 'layer4.2.bn1.bias', 'layer4.2.bn2.bias', 'layer4.1.bn3.running_mean'}
[2019-08-14 16:31:18,498-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 16:31:18,498-rk0-load_helper.py# 18] used keys:215
[2019-08-14 16:31:18,523-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 16:31:18,524-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 16:31:18,697-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 16:31:18,701-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0813/checkpoint_e104.pth
[2019-08-14 16:31:18,962-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:31:18,964-rk0-load_helper.py# 18] used keys:372
[2019-08-14 16:31:19,036-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 16:31:55,165-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 16:31:55,166-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0813/checkpoint_e104.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 16:31:55,168-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 16:31:55,168-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 16:31:55,170-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 16:31:58,008-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 16:31:58,043-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 16:31:58,110-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:58,110-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:31:58,112-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 16:31:58,178-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:58,179-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:31:58,179-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 16:31:58,180-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 16:31:58,274-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 16:31:58,276-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 16:31:58,279-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:58,279-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:31:58,280-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 16:31:58,283-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:31:58,284-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:31:58,284-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 16:32:02,789-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 16:32:03,122-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:32:03,124-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked'}
[2019-08-14 16:32:03,124-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 16:32:03,125-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.bn3.running_mean', 'layer4.2.bn3.weight', 'layer4.2.bn3.bias', 'layer4.1.bn2.bias', 'layer4.0.bn3.weight', 'layer4.0.bn3.running_var', 'layer4.1.bn2.running_mean', 'layer4.1.bn3.bias', 'layer4.1.conv3.weight', 'layer4.0.bn2.running_mean', 'layer4.0.bn2.bias', 'layer4.2.conv3.weight', 'layer4.0.conv1.weight', 'layer4.2.conv2.weight', 'layer4.0.bn2.weight', 'layer4.1.bn1.bias', 'layer4.0.downsample.1.running_mean', 'layer4.0.conv2.weight', 'layer4.0.bn1.running_var', 'layer4.2.bn2.bias', 'layer4.2.bn3.running_mean', 'layer4.0.conv3.weight', 'layer4.2.conv1.weight', 'layer4.0.downsample.1.weight', 'layer4.1.bn1.running_var', 'layer4.2.bn2.running_mean', 'layer4.1.bn3.running_mean', 'layer4.0.bn1.running_mean', 'layer4.2.bn1.bias', 'layer4.0.downsample.0.weight', 'layer4.2.bn2.weight', 'layer4.2.bn2.running_var', 'layer4.0.downsample.1.running_var', 'layer4.1.bn2.weight', 'layer4.1.bn3.weight', 'layer4.0.bn2.running_var', 'layer4.0.bn1.bias', 'layer4.1.conv2.weight', 'layer4.2.bn1.running_mean', 'layer4.2.bn3.running_var', 'layer4.0.bn3.bias', 'layer4.2.bn1.weight', 'layer4.1.bn2.running_var', 'layer4.2.bn1.running_var', 'layer4.0.bn1.weight', 'layer4.1.bn1.running_mean', 'layer4.1.bn1.weight', 'layer4.1.bn3.running_var', 'layer4.0.downsample.1.bias', 'layer4.1.conv1.weight'}
[2019-08-14 16:32:03,125-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 16:32:03,125-rk0-load_helper.py# 18] used keys:215
[2019-08-14 16:32:03,148-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 16:32:03,150-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 16:32:03,312-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 16:32:03,316-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0813/checkpoint_e104.pth
[2019-08-14 16:32:03,554-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:32:03,556-rk0-load_helper.py# 18] used keys:372
[2019-08-14 16:32:03,628-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 16:35:59,954-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 16:35:59,955-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0813/checkpoint_e104.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 16:35:59,956-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 16:35:59,957-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 16:35:59,958-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 16:36:02,793-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 16:36:02,828-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 16:36:02,894-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:36:02,895-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:36:02,897-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 16:36:02,963-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:36:02,963-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:36:02,964-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 16:36:02,965-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 16:36:03,058-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 16:36:03,060-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 16:36:03,063-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:36:03,064-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:36:03,064-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 16:36:03,067-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:36:03,067-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:36:03,068-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 16:36:07,598-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 16:36:07,983-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:36:07,985-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.2.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked'}
[2019-08-14 16:36:07,985-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 16:36:07,986-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn2.bias', 'layer4.1.bn3.running_mean', 'layer4.2.conv3.weight', 'layer4.2.bn2.bias', 'layer4.0.downsample.0.weight', 'layer4.2.bn2.running_mean', 'layer4.2.conv2.weight', 'layer4.1.bn1.running_mean', 'layer4.0.bn3.bias', 'layer4.0.downsample.1.running_mean', 'layer4.0.conv2.weight', 'layer4.2.bn3.weight', 'layer4.2.bn1.running_var', 'layer4.1.bn1.weight', 'layer4.2.bn1.weight', 'layer4.0.bn1.weight', 'layer4.1.bn3.bias', 'layer4.2.bn3.bias', 'layer4.0.downsample.1.weight', 'layer4.1.conv3.weight', 'layer4.1.bn2.weight', 'layer4.2.bn3.running_var', 'layer4.1.bn3.weight', 'layer4.0.bn1.running_var', 'layer4.0.bn3.weight', 'layer4.0.bn2.bias', 'layer4.1.conv2.weight', 'layer4.2.bn1.bias', 'layer4.0.downsample.1.bias', 'layer4.0.downsample.1.running_var', 'layer4.0.bn2.running_mean', 'layer4.1.bn3.running_var', 'layer4.0.bn1.bias', 'layer4.0.bn3.running_var', 'layer4.0.bn3.running_mean', 'layer4.1.bn1.running_var', 'layer4.0.conv3.weight', 'layer4.1.bn1.bias', 'layer4.2.bn3.running_mean', 'layer4.2.bn2.running_var', 'layer4.1.bn2.running_var', 'layer4.0.conv1.weight', 'layer4.1.bn2.running_mean', 'layer4.2.conv1.weight', 'layer4.0.bn2.weight', 'layer4.0.bn1.running_mean', 'layer4.0.bn2.running_var', 'layer4.2.bn1.running_mean', 'layer4.1.conv1.weight', 'layer4.2.bn2.weight'}
[2019-08-14 16:36:07,986-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 16:36:07,987-rk0-load_helper.py# 18] used keys:215
[2019-08-14 16:36:08,010-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 16:36:08,011-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 16:36:08,169-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 16:36:08,172-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0813/checkpoint_e104.pth
[2019-08-14 16:36:08,461-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:36:08,463-rk0-load_helper.py# 18] used keys:372
[2019-08-14 16:36:08,552-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 16:36:12,860-rk0-val_siamrcnn.py#277] Validation: [9/1899]	batch_time: 0.023264 (0.160357)	data_time: 0.000110 (0.044266)	rpn_cls_loss: 0.000311 (0.002731)	rpn_loc_loss: 0.020449 (0.095393)	kp_hp_loss: 0.500080 (1.261519)	kp_hm_hp_loss: 1.219036 (2.712385)	kp_hp_offset_loss: 0.196058 (0.241089)	kp_loss: 1.915174 (4.214993)	siammask_loss: 1.940023 (4.332195)	kp_avg_acc: 0.714286 (0.445563)
[2019-08-14 16:36:14,880-rk0-val_siamrcnn.py#277] Validation: [19/1899]	batch_time: 0.024003 (0.092330)	data_time: 0.000086 (0.022245)	rpn_cls_loss: 0.003635 (0.004420)	rpn_loc_loss: 0.037653 (0.087194)	kp_hp_loss: 0.422479 (0.888934)	kp_hm_hp_loss: 1.211763 (2.098689)	kp_hp_offset_loss: 0.220183 (0.235885)	kp_loss: 1.854425 (3.223508)	siammask_loss: 1.903243 (3.332560)	kp_avg_acc: 0.500000 (0.474198)
[2019-08-14 16:36:16,673-rk0-val_siamrcnn.py#277] Validation: [29/1899]	batch_time: 0.022106 (0.068997)	data_time: 0.000082 (0.014880)	rpn_cls_loss: 0.000760 (0.003453)	rpn_loc_loss: 0.040525 (0.076016)	kp_hp_loss: 0.675853 (0.860316)	kp_hm_hp_loss: 2.872604 (2.224433)	kp_hp_offset_loss: 0.247470 (0.231555)	kp_loss: 3.795927 (3.316303)	siammask_loss: 3.845318 (3.410975)	kp_avg_acc: 0.200000 (0.442404)
[2019-08-14 16:36:18,452-rk0-val_siamrcnn.py#277] Validation: [39/1899]	batch_time: 0.022025 (0.057661)	data_time: 0.000078 (0.011210)	rpn_cls_loss: 0.000482 (0.002934)	rpn_loc_loss: 0.035801 (0.078656)	kp_hp_loss: 0.403188 (0.835034)	kp_hm_hp_loss: 0.958134 (2.260295)	kp_hp_offset_loss: 0.243168 (0.231918)	kp_loss: 1.604489 (3.327247)	siammask_loss: 1.647933 (3.424568)	kp_avg_acc: 0.600000 (0.427970)
[2019-08-14 16:36:20,384-rk0-val_siamrcnn.py#277] Validation: [49/1899]	batch_time: 0.022114 (0.051253)	data_time: 0.000087 (0.009002)	rpn_cls_loss: 0.000636 (0.002703)	rpn_loc_loss: 0.041666 (0.084471)	kp_hp_loss: 0.771296 (0.861505)	kp_hm_hp_loss: 3.021206 (2.400734)	kp_hp_offset_loss: 0.207820 (0.231352)	kp_loss: 4.000322 (3.493591)	siammask_loss: 4.050957 (3.597659)	kp_avg_acc: 0.200000 (0.402164)
[2019-08-14 16:36:22,242-rk0-val_siamrcnn.py#277] Validation: [59/1899]	batch_time: 0.022965 (0.046664)	data_time: 0.000092 (0.007531)	rpn_cls_loss: 0.000295 (0.002650)	rpn_loc_loss: 0.043038 (0.083853)	kp_hp_loss: 0.210408 (0.856322)	kp_hm_hp_loss: 0.368612 (2.423302)	kp_hp_offset_loss: 0.193031 (0.232028)	kp_loss: 0.772051 (3.511652)	siammask_loss: 0.823991 (3.614925)	kp_avg_acc: 0.875000 (0.404033)
[2019-08-14 16:36:24,104-rk0-val_siamrcnn.py#277] Validation: [69/1899]	batch_time: 0.022365 (0.043223)	data_time: 0.000083 (0.006482)	rpn_cls_loss: 0.002002 (0.002919)	rpn_loc_loss: 0.040865 (0.082654)	kp_hp_loss: 0.258830 (0.825707)	kp_hm_hp_loss: 0.824961 (2.337508)	kp_hp_offset_loss: 0.242697 (0.233219)	kp_loss: 1.326488 (3.396434)	siammask_loss: 1.377527 (3.498537)	kp_avg_acc: 0.588235 (0.396999)
[2019-08-14 16:36:25,896-rk0-val_siamrcnn.py#277] Validation: [79/1899]	batch_time: 0.025946 (0.040914)	data_time: 0.000099 (0.005693)	rpn_cls_loss: 0.000334 (0.002686)	rpn_loc_loss: 0.027889 (0.081589)	kp_hp_loss: 1.213875 (0.822999)	kp_hm_hp_loss: 8.870502 (2.450672)	kp_hp_offset_loss: 0.266223 (0.231372)	kp_loss: 10.350600 (3.505043)	siammask_loss: 10.384401 (3.605636)	kp_avg_acc: 0.066667 (0.386700)
[2019-08-14 16:36:28,152-rk0-val_siamrcnn.py#277] Validation: [89/1899]	batch_time: 0.022114 (0.038861)	data_time: 0.000091 (0.005080)	rpn_cls_loss: 0.000761 (0.002457)	rpn_loc_loss: 0.163376 (0.082785)	kp_hp_loss: 0.637813 (0.834475)	kp_hm_hp_loss: 1.515909 (2.411021)	kp_hp_offset_loss: 0.170426 (0.230214)	kp_loss: 2.324148 (3.475710)	siammask_loss: 2.520961 (3.577508)	kp_avg_acc: 0.444444 (0.392583)
[2019-08-14 16:36:30,004-rk0-val_siamrcnn.py#277] Validation: [99/1899]	batch_time: 0.023156 (0.037266)	data_time: 0.000095 (0.004589)	rpn_cls_loss: 0.001213 (0.002720)	rpn_loc_loss: 0.013774 (0.083831)	kp_hp_loss: 0.428429 (0.847388)	kp_hm_hp_loss: 1.796712 (2.471548)	kp_hp_offset_loss: 0.182368 (0.231022)	kp_loss: 2.407508 (3.549959)	siammask_loss: 2.425250 (3.653276)	kp_avg_acc: 0.428571 (0.385289)
[2019-08-14 16:36:32,114-rk0-val_siamrcnn.py#277] Validation: [109/1899]	batch_time: 0.022123 (0.035919)	data_time: 0.000086 (0.004187)	rpn_cls_loss: 0.003133 (0.002764)	rpn_loc_loss: 0.059192 (0.083902)	kp_hp_loss: 0.896687 (0.835067)	kp_hm_hp_loss: 2.036336 (2.406058)	kp_hp_offset_loss: 0.229569 (0.230640)	kp_loss: 3.162592 (3.471767)	siammask_loss: 3.236756 (3.575212)	kp_avg_acc: 0.272727 (0.387036)
[2019-08-14 16:36:34,040-rk0-val_siamrcnn.py#277] Validation: [119/1899]	batch_time: 0.022017 (0.034792)	data_time: 0.000085 (0.003852)	rpn_cls_loss: 0.000485 (0.002636)	rpn_loc_loss: 0.101744 (0.083723)	kp_hp_loss: 0.591814 (0.823487)	kp_hm_hp_loss: 1.344495 (2.371497)	kp_hp_offset_loss: 0.285664 (0.230793)	kp_loss: 2.221973 (3.425778)	siammask_loss: 2.344550 (3.528882)	kp_avg_acc: 0.400000 (0.389133)
[2019-08-14 16:36:35,804-rk0-val_siamrcnn.py#277] Validation: [129/1899]	batch_time: 0.022093 (0.033840)	data_time: 0.000087 (0.003568)	rpn_cls_loss: 0.001674 (0.002763)	rpn_loc_loss: 0.074343 (0.085327)	kp_hp_loss: 0.480313 (0.826688)	kp_hm_hp_loss: 2.390854 (2.353730)	kp_hp_offset_loss: 0.290039 (0.231986)	kp_loss: 3.161206 (3.412406)	siammask_loss: 3.252092 (3.517561)	kp_avg_acc: 0.363636 (0.392685)
[2019-08-14 16:36:37,670-rk0-val_siamrcnn.py#277] Validation: [139/1899]	batch_time: 0.022206 (0.033261)	data_time: 0.000090 (0.003326)	rpn_cls_loss: 0.002064 (0.002911)	rpn_loc_loss: 0.088104 (0.084724)	kp_hp_loss: 0.342593 (0.839704)	kp_hm_hp_loss: 1.211979 (2.447253)	kp_hp_offset_loss: 0.193422 (0.232445)	kp_loss: 1.747993 (3.519403)	siammask_loss: 1.855781 (3.623984)	kp_avg_acc: 0.647059 (0.385635)
[2019-08-14 16:36:39,431-rk0-val_siamrcnn.py#277] Validation: [149/1899]	batch_time: 0.022641 (0.032529)	data_time: 0.000195 (0.003116)	rpn_cls_loss: 0.082614 (0.003581)	rpn_loc_loss: 0.079038 (0.083784)	kp_hp_loss: 0.731724 (0.848079)	kp_hm_hp_loss: 2.340355 (2.498578)	kp_hp_offset_loss: 0.241540 (0.232699)	kp_loss: 3.313619 (3.579356)	siammask_loss: 3.491078 (3.683479)	kp_avg_acc: 0.000000 (0.370823)
[2019-08-14 16:36:41,260-rk0-val_siamrcnn.py#277] Validation: [159/1899]	batch_time: 0.022047 (0.031895)	data_time: 0.000086 (0.002932)	rpn_cls_loss: 0.000668 (0.003420)	rpn_loc_loss: 0.035880 (0.083969)	kp_hp_loss: 1.005625 (0.849519)	kp_hm_hp_loss: 2.262624 (2.496521)	kp_hp_offset_loss: 0.253879 (0.233164)	kp_loss: 3.522128 (3.579204)	siammask_loss: 3.565852 (3.683388)	kp_avg_acc: 0.363636 (0.366986)
[2019-08-14 16:36:43,215-rk0-val_siamrcnn.py#277] Validation: [169/1899]	batch_time: 0.022167 (0.031336)	data_time: 0.000087 (0.002769)	rpn_cls_loss: 0.001756 (0.003257)	rpn_loc_loss: 0.135054 (0.084451)	kp_hp_loss: 0.803222 (0.847301)	kp_hm_hp_loss: 2.115024 (2.472514)	kp_hp_offset_loss: 0.193224 (0.233606)	kp_loss: 3.111471 (3.553421)	siammask_loss: 3.275291 (3.658020)	kp_avg_acc: 0.230769 (0.370373)
[2019-08-14 16:36:44,980-rk0-val_siamrcnn.py#277] Validation: [179/1899]	batch_time: 0.022244 (0.030832)	data_time: 0.000088 (0.002624)	rpn_cls_loss: 0.000425 (0.003273)	rpn_loc_loss: 0.032510 (0.087261)	kp_hp_loss: 0.317540 (0.841699)	kp_hm_hp_loss: 0.936442 (2.450412)	kp_hp_offset_loss: 0.234199 (0.234107)	kp_loss: 1.488180 (3.526219)	siammask_loss: 1.527617 (3.634205)	kp_avg_acc: 0.666667 (0.375385)
[2019-08-14 16:36:46,843-rk0-val_siamrcnn.py#277] Validation: [189/1899]	batch_time: 0.022242 (0.030387)	data_time: 0.000086 (0.002495)	rpn_cls_loss: 0.000285 (0.003145)	rpn_loc_loss: 0.024594 (0.086629)	kp_hp_loss: 0.302552 (0.837068)	kp_hm_hp_loss: 0.387035 (2.412798)	kp_hp_offset_loss: 0.214427 (0.234297)	kp_loss: 0.904014 (3.484164)	siammask_loss: 0.933812 (3.591263)	kp_avg_acc: 0.823529 (0.381985)
[2019-08-14 16:36:48,613-rk0-val_siamrcnn.py#277] Validation: [199/1899]	batch_time: 0.025413 (0.030039)	data_time: 0.000079 (0.002378)	rpn_cls_loss: 0.002218 (0.003092)	rpn_loc_loss: 0.026229 (0.085402)	kp_hp_loss: 0.557661 (0.831375)	kp_hm_hp_loss: 1.170295 (2.394568)	kp_hp_offset_loss: 0.206422 (0.234158)	kp_loss: 1.934378 (3.460101)	siammask_loss: 1.968070 (3.565676)	kp_avg_acc: 0.357143 (0.377603)
[2019-08-14 16:36:50,531-rk0-val_siamrcnn.py#277] Validation: [209/1899]	batch_time: 0.024410 (0.029773)	data_time: 0.000083 (0.002272)	rpn_cls_loss: 0.000752 (0.003047)	rpn_loc_loss: 0.052969 (0.083906)	kp_hp_loss: 0.646666 (0.816474)	kp_hm_hp_loss: 1.453004 (2.361087)	kp_hp_offset_loss: 0.288960 (0.234193)	kp_loss: 2.388630 (3.411754)	siammask_loss: 2.452945 (3.515489)	kp_avg_acc: 0.400000 (0.382457)
[2019-08-14 16:36:53,022-rk0-val_siamrcnn.py#277] Validation: [219/1899]	batch_time: 0.024735 (0.029546)	data_time: 0.000194 (0.002177)	rpn_cls_loss: 0.005661 (0.003274)	rpn_loc_loss: 0.042139 (0.083223)	kp_hp_loss: 0.613777 (0.813257)	kp_hm_hp_loss: 2.487961 (2.373193)	kp_hp_offset_loss: 0.269526 (0.233753)	kp_loss: 3.371265 (3.420203)	siammask_loss: 3.427493 (3.523345)	kp_avg_acc: 0.571429 (0.384818)
[2019-08-14 16:36:54,844-rk0-val_siamrcnn.py#277] Validation: [229/1899]	batch_time: 0.024321 (0.029333)	data_time: 0.000087 (0.002089)	rpn_cls_loss: 0.002514 (0.003322)	rpn_loc_loss: 0.070370 (0.082671)	kp_hp_loss: 1.282802 (0.819844)	kp_hm_hp_loss: 2.838074 (2.382850)	kp_hp_offset_loss: 0.236955 (0.234162)	kp_loss: 4.357831 (3.436856)	siammask_loss: 4.444789 (3.539384)	kp_avg_acc: 0.000000 (0.381373)
[2019-08-14 16:36:56,612-rk0-val_siamrcnn.py#277] Validation: [239/1899]	batch_time: 0.024423 (0.029146)	data_time: 0.000086 (0.002009)	rpn_cls_loss: 0.000558 (0.003212)	rpn_loc_loss: 0.046630 (0.082374)	kp_hp_loss: 0.339422 (0.808900)	kp_hm_hp_loss: 0.605065 (2.366348)	kp_hp_offset_loss: 0.208212 (0.234176)	kp_loss: 1.152699 (3.409423)	siammask_loss: 1.209213 (3.511485)	kp_avg_acc: 0.846154 (0.385666)
[2019-08-14 16:36:58,465-rk0-val_siamrcnn.py#277] Validation: [249/1899]	batch_time: 0.024277 (0.028960)	data_time: 0.000086 (0.001935)	rpn_cls_loss: 0.000526 (0.003391)	rpn_loc_loss: 0.045992 (0.084758)	kp_hp_loss: 0.481790 (0.803110)	kp_hm_hp_loss: 1.622746 (2.381886)	kp_hp_offset_loss: 0.315336 (0.233938)	kp_loss: 2.419872 (3.418935)	siammask_loss: 2.475588 (3.524036)	kp_avg_acc: 0.363636 (0.382138)
[2019-08-14 16:37:00,221-rk0-val_siamrcnn.py#277] Validation: [259/1899]	batch_time: 0.024297 (0.028790)	data_time: 0.000087 (0.001867)	rpn_cls_loss: 0.000435 (0.003547)	rpn_loc_loss: 0.097043 (0.084485)	kp_hp_loss: 1.689927 (0.800820)	kp_hm_hp_loss: 2.593248 (2.367280)	kp_hp_offset_loss: 0.257710 (0.233828)	kp_loss: 4.540884 (3.401928)	siammask_loss: 4.657771 (3.506857)	kp_avg_acc: 0.000000 (0.380392)
[2019-08-14 16:37:01,975-rk0-val_siamrcnn.py#277] Validation: [269/1899]	batch_time: 0.024385 (0.028629)	data_time: 0.000100 (0.001803)	rpn_cls_loss: 0.010554 (0.003500)	rpn_loc_loss: 0.098252 (0.083632)	kp_hp_loss: 0.689344 (0.798201)	kp_hm_hp_loss: 2.240630 (2.353262)	kp_hp_offset_loss: 0.215050 (0.233394)	kp_loss: 3.145024 (3.384858)	siammask_loss: 3.273480 (3.488717)	kp_avg_acc: 0.285714 (0.381590)
[2019-08-14 16:37:03,793-rk0-val_siamrcnn.py#277] Validation: [279/1899]	batch_time: 0.024402 (0.028609)	data_time: 0.000089 (0.001867)	rpn_cls_loss: 0.000433 (0.003448)	rpn_loc_loss: 0.028545 (0.083088)	kp_hp_loss: 0.578853 (0.799206)	kp_hm_hp_loss: 1.880124 (2.349110)	kp_hp_offset_loss: 0.247682 (0.233269)	kp_loss: 2.706659 (3.381586)	siammask_loss: 2.741345 (3.484740)	kp_avg_acc: 0.571429 (0.382669)
[2019-08-14 16:37:05,798-rk0-val_siamrcnn.py#277] Validation: [289/1899]	batch_time: 0.024369 (0.028592)	data_time: 0.000101 (0.001809)	rpn_cls_loss: 0.005253 (0.003431)	rpn_loc_loss: 0.031756 (0.082637)	kp_hp_loss: 0.743432 (0.795061)	kp_hm_hp_loss: 2.317049 (2.351162)	kp_hp_offset_loss: 0.291657 (0.233256)	kp_loss: 3.352138 (3.379479)	siammask_loss: 3.395499 (3.482074)	kp_avg_acc: 0.100000 (0.379801)
[2019-08-14 16:37:07,567-rk0-val_siamrcnn.py#277] Validation: [299/1899]	batch_time: 0.024422 (0.028468)	data_time: 0.000088 (0.001754)	rpn_cls_loss: 0.000942 (0.003566)	rpn_loc_loss: 0.084499 (0.081860)	kp_hp_loss: 0.341515 (0.785656)	kp_hm_hp_loss: 1.934732 (2.336577)	kp_hp_offset_loss: 0.181843 (0.233027)	kp_loss: 2.458091 (3.355261)	siammask_loss: 2.560431 (3.457059)	kp_avg_acc: 0.437500 (0.380642)
[2019-08-14 16:37:09,369-rk0-val_siamrcnn.py#277] Validation: [309/1899]	batch_time: 0.024351 (0.028338)	data_time: 0.000088 (0.001702)	rpn_cls_loss: 0.000483 (0.003474)	rpn_loc_loss: 0.030996 (0.080991)	kp_hp_loss: 0.416148 (0.788782)	kp_hm_hp_loss: 1.585026 (2.347641)	kp_hp_offset_loss: 0.203163 (0.232366)	kp_loss: 2.204336 (3.368790)	siammask_loss: 2.242014 (3.469453)	kp_avg_acc: 0.692308 (0.383030)
[2019-08-14 16:37:11,175-rk0-val_siamrcnn.py#277] Validation: [319/1899]	batch_time: 0.025332 (0.028220)	data_time: 0.000094 (0.001654)	rpn_cls_loss: 0.001506 (0.003449)	rpn_loc_loss: 0.042951 (0.081200)	kp_hp_loss: 0.496516 (0.785720)	kp_hm_hp_loss: 1.925371 (2.344265)	kp_hp_offset_loss: 0.240271 (0.232510)	kp_loss: 2.662158 (3.362495)	siammask_loss: 2.715206 (3.463385)	kp_avg_acc: 0.416667 (0.379212)
[2019-08-14 16:37:12,960-rk0-val_siamrcnn.py#277] Validation: [329/1899]	batch_time: 0.024389 (0.028105)	data_time: 0.000085 (0.001609)	rpn_cls_loss: 0.002138 (0.003390)	rpn_loc_loss: 0.040073 (0.080666)	kp_hp_loss: 0.738632 (0.795553)	kp_hm_hp_loss: 1.927907 (2.378751)	kp_hp_offset_loss: 0.246405 (0.232842)	kp_loss: 2.912944 (3.407146)	siammask_loss: 2.963169 (3.507334)	kp_avg_acc: 0.400000 (0.378117)
[2019-08-14 16:37:14,716-rk0-val_siamrcnn.py#277] Validation: [339/1899]	batch_time: 0.024273 (0.027998)	data_time: 0.000084 (0.001566)	rpn_cls_loss: 0.002584 (0.003356)	rpn_loc_loss: 0.117596 (0.080490)	kp_hp_loss: 0.690895 (0.788160)	kp_hm_hp_loss: 2.629987 (2.360267)	kp_hp_offset_loss: 0.192953 (0.232218)	kp_loss: 3.513836 (3.380646)	siammask_loss: 3.657536 (3.480590)	kp_avg_acc: 0.400000 (0.381240)
[2019-08-14 16:37:16,438-rk0-val_siamrcnn.py#277] Validation: [349/1899]	batch_time: 0.024386 (0.027897)	data_time: 0.000079 (0.001526)	rpn_cls_loss: 0.001387 (0.003306)	rpn_loc_loss: 0.014371 (0.079896)	kp_hp_loss: 0.293821 (0.777946)	kp_hm_hp_loss: 0.990754 (2.334032)	kp_hp_offset_loss: 0.220813 (0.232076)	kp_loss: 1.505388 (3.344054)	siammask_loss: 1.524020 (3.443235)	kp_avg_acc: 0.666667 (0.384058)
[2019-08-14 16:37:18,206-rk0-val_siamrcnn.py#277] Validation: [359/1899]	batch_time: 0.024332 (0.027801)	data_time: 0.000089 (0.001488)	rpn_cls_loss: 0.000461 (0.003236)	rpn_loc_loss: 0.070948 (0.079912)	kp_hp_loss: 0.800239 (0.776967)	kp_hm_hp_loss: 2.692242 (2.338848)	kp_hp_offset_loss: 0.232559 (0.232091)	kp_loss: 3.725041 (3.347906)	siammask_loss: 3.810640 (3.447037)	kp_avg_acc: 0.066667 (0.381986)
[2019-08-14 16:37:19,959-rk0-val_siamrcnn.py#277] Validation: [369/1899]	batch_time: 0.024395 (0.027710)	data_time: 0.000086 (0.001452)	rpn_cls_loss: 0.000387 (0.003181)	rpn_loc_loss: 0.051305 (0.079117)	kp_hp_loss: 0.524853 (0.770488)	kp_hm_hp_loss: 2.155164 (2.323280)	kp_hp_offset_loss: 0.239094 (0.232671)	kp_loss: 2.919110 (3.326439)	siammask_loss: 2.981062 (3.424561)	kp_avg_acc: 0.272727 (0.383897)
[2019-08-14 16:37:21,756-rk0-val_siamrcnn.py#277] Validation: [379/1899]	batch_time: 0.024404 (0.027627)	data_time: 0.000086 (0.001419)	rpn_cls_loss: 0.028189 (0.003205)	rpn_loc_loss: 0.104400 (0.079355)	kp_hp_loss: 1.335740 (0.769698)	kp_hm_hp_loss: 2.607509 (2.316723)	kp_hp_offset_loss: 0.288393 (0.233035)	kp_loss: 4.231643 (3.319456)	siammask_loss: 4.385111 (3.417887)	kp_avg_acc: 0.000000 (0.381642)
[2019-08-14 16:37:23,524-rk0-val_siamrcnn.py#277] Validation: [389/1899]	batch_time: 0.024390 (0.027548)	data_time: 0.000097 (0.001386)	rpn_cls_loss: 0.000671 (0.003157)	rpn_loc_loss: 0.101217 (0.079134)	kp_hp_loss: 0.616293 (0.761673)	kp_hm_hp_loss: 1.744142 (2.302810)	kp_hp_offset_loss: 0.252769 (0.232862)	kp_loss: 2.613204 (3.297345)	siammask_loss: 2.735336 (3.395463)	kp_avg_acc: 0.083333 (0.381565)
[2019-08-14 16:37:25,255-rk0-val_siamrcnn.py#277] Validation: [399/1899]	batch_time: 0.024377 (0.027516)	data_time: 0.000087 (0.001356)	rpn_cls_loss: 0.000404 (0.003140)	rpn_loc_loss: 0.099064 (0.079398)	kp_hp_loss: 0.489072 (0.760404)	kp_hm_hp_loss: 2.243852 (2.297277)	kp_hp_offset_loss: 0.197074 (0.232645)	kp_loss: 2.929998 (3.290326)	siammask_loss: 3.049278 (3.388743)	kp_avg_acc: 0.538462 (0.380592)
[2019-08-14 16:37:26,965-rk0-val_siamrcnn.py#277] Validation: [409/1899]	batch_time: 0.024347 (0.027442)	data_time: 0.000088 (0.001327)	rpn_cls_loss: 0.001389 (0.003173)	rpn_loc_loss: 0.079401 (0.079426)	kp_hp_loss: 0.375681 (0.757904)	kp_hm_hp_loss: 2.095529 (2.312670)	kp_hp_offset_loss: 0.296866 (0.232896)	kp_loss: 2.768076 (3.303470)	siammask_loss: 2.864747 (3.401954)	kp_avg_acc: 0.727273 (0.380386)
[2019-08-14 16:37:28,798-rk0-val_siamrcnn.py#277] Validation: [419/1899]	batch_time: 0.024444 (0.027411)	data_time: 0.000085 (0.001299)	rpn_cls_loss: 0.000493 (0.003108)	rpn_loc_loss: 0.035816 (0.079154)	kp_hp_loss: 2.104545 (0.756299)	kp_hm_hp_loss: 5.626606 (2.317238)	kp_hp_offset_loss: 0.243294 (0.233110)	kp_loss: 7.974446 (3.306648)	siammask_loss: 8.017919 (3.404741)	kp_avg_acc: 0.062500 (0.381549)
[2019-08-14 16:52:03,792-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 16:52:03,801-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0813/checkpoint_e104.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 16:52:03,824-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 16:52:03,824-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 16:52:03,944-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 16:52:07,571-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 16:52:07,605-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 16:52:07,670-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:52:07,671-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:52:07,673-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 16:52:07,740-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:52:07,741-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:52:07,741-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 16:52:07,761-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 16:52:07,982-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 16:52:07,984-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 16:52:07,987-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:52:07,988-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:52:07,988-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 16:52:07,991-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:52:07,992-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:52:07,992-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 16:52:17,460-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 16:52:18,912-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:52:18,914-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked'}
[2019-08-14 16:52:18,914-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 16:52:18,915-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.bn3.weight', 'layer4.0.bn1.running_mean', 'layer4.1.bn3.running_mean', 'layer4.1.bn1.weight', 'layer4.1.bn1.running_var', 'layer4.1.bn3.running_var', 'layer4.2.bn3.running_mean', 'layer4.0.conv1.weight', 'layer4.1.conv1.weight', 'layer4.1.bn1.running_mean', 'layer4.0.bn2.weight', 'layer4.0.downsample.1.bias', 'layer4.2.bn2.running_var', 'layer4.0.downsample.1.weight', 'layer4.0.downsample.0.weight', 'layer4.1.conv3.weight', 'layer4.0.conv3.weight', 'layer4.2.bn2.weight', 'layer4.1.bn3.weight', 'layer4.0.bn3.running_var', 'layer4.0.downsample.1.running_mean', 'layer4.2.bn1.bias', 'layer4.1.bn2.running_var', 'layer4.1.bn2.weight', 'layer4.1.bn2.bias', 'layer4.2.conv3.weight', 'layer4.0.bn2.running_mean', 'layer4.0.bn1.bias', 'layer4.2.conv1.weight', 'layer4.1.conv2.weight', 'layer4.2.bn1.running_mean', 'layer4.0.bn1.weight', 'layer4.2.conv2.weight', 'layer4.0.bn2.bias', 'layer4.0.bn2.running_var', 'layer4.1.bn2.running_mean', 'layer4.2.bn2.running_mean', 'layer4.0.bn3.bias', 'layer4.0.bn3.running_mean', 'layer4.2.bn3.weight', 'layer4.1.bn1.bias', 'layer4.0.conv2.weight', 'layer4.0.downsample.1.running_var', 'layer4.2.bn1.weight', 'layer4.2.bn3.bias', 'layer4.1.bn3.bias', 'layer4.2.bn3.running_var', 'layer4.0.bn1.running_var', 'layer4.2.bn1.running_var', 'layer4.2.bn2.bias'}
[2019-08-14 16:52:18,915-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 16:52:18,916-rk0-load_helper.py# 18] used keys:215
[2019-08-14 16:52:18,949-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 16:52:18,951-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 16:52:19,154-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 16:52:19,158-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0813/checkpoint_e104.pth
[2019-08-14 16:52:20,508-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:52:20,512-rk0-load_helper.py# 18] used keys:372
[2019-08-14 16:52:20,605-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 16:52:26,032-rk0-val_siamrcnn.py#277] Validation: [9/1899]	batch_time: 0.022498 (0.260588)	data_time: 0.000081 (0.109800)	rpn_cls_loss: 0.002639 (0.001238)	rpn_loc_loss: 0.046745 (0.057005)	kp_hp_loss: 0.480519 (0.978803)	kp_hm_hp_loss: 1.170105 (4.104008)	kp_hp_offset_loss: 0.203781 (0.222475)	kp_loss: 1.854404 (5.305286)	siammask_loss: 1.913138 (5.374930)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 16:52:27,946-rk0-val_siamrcnn.py#277] Validation: [19/1899]	batch_time: 0.022429 (0.141936)	data_time: 0.000086 (0.055028)	rpn_cls_loss: 0.001409 (0.002985)	rpn_loc_loss: 0.085905 (0.077815)	kp_hp_loss: 1.358937 (0.862352)	kp_hm_hp_loss: 4.084124 (3.166737)	kp_hp_offset_loss: 0.255420 (0.237488)	kp_loss: 5.698480 (4.266577)	siammask_loss: 5.802975 (4.362941)	kp_avg_acc: 0.000000 (0.003125)
[2019-08-14 16:52:29,773-rk0-val_siamrcnn.py#277] Validation: [29/1899]	batch_time: 0.022603 (0.102465)	data_time: 0.000105 (0.036745)	rpn_cls_loss: 0.000302 (0.002546)	rpn_loc_loss: 0.041836 (0.076852)	kp_hp_loss: 0.227590 (0.833422)	kp_hm_hp_loss: 0.481974 (2.944109)	kp_hp_offset_loss: 0.163931 (0.237595)	kp_loss: 0.873494 (4.015126)	siammask_loss: 0.923999 (4.109893)	kp_avg_acc: 0.000000 (0.004464)
[2019-08-14 16:52:31,705-rk0-val_siamrcnn.py#277] Validation: [39/1899]	batch_time: 0.022256 (0.082493)	data_time: 0.000105 (0.027606)	rpn_cls_loss: 0.006840 (0.002869)	rpn_loc_loss: 0.054865 (0.070352)	kp_hp_loss: 1.382169 (0.830382)	kp_hm_hp_loss: 2.077483 (2.863221)	kp_hp_offset_loss: 0.261584 (0.245644)	kp_loss: 3.721235 (3.939246)	siammask_loss: 3.793913 (4.026538)	kp_avg_acc: 0.000000 (0.005015)
[2019-08-14 16:52:33,656-rk0-val_siamrcnn.py#277] Validation: [49/1899]	batch_time: 0.031983 (0.070711)	data_time: 0.000108 (0.022120)	rpn_cls_loss: 0.000892 (0.002818)	rpn_loc_loss: 0.021899 (0.076615)	kp_hp_loss: 0.510589 (0.818348)	kp_hm_hp_loss: 2.381006 (2.688340)	kp_hp_offset_loss: 0.233339 (0.242373)	kp_loss: 3.124934 (3.749062)	siammask_loss: 3.152105 (3.843818)	kp_avg_acc: 0.000000 (0.004012)
[2019-08-14 16:52:35,378-rk0-val_siamrcnn.py#277] Validation: [59/1899]	batch_time: 0.022303 (0.062720)	data_time: 0.000083 (0.018465)	rpn_cls_loss: 0.002336 (0.002935)	rpn_loc_loss: 0.148091 (0.076550)	kp_hp_loss: 2.039196 (0.830318)	kp_hm_hp_loss: 2.826883 (2.560850)	kp_hp_offset_loss: 0.212759 (0.240713)	kp_loss: 5.078839 (3.631882)	siammask_loss: 5.258884 (3.726676)	kp_avg_acc: 0.000000 (0.006121)
[2019-08-14 16:52:37,168-rk0-val_siamrcnn.py#277] Validation: [69/1899]	batch_time: 0.022472 (0.057295)	data_time: 0.000084 (0.015855)	rpn_cls_loss: 0.000394 (0.003031)	rpn_loc_loss: 0.028810 (0.081240)	kp_hp_loss: 0.455829 (0.829997)	kp_hm_hp_loss: 1.545626 (2.585637)	kp_hp_offset_loss: 0.226633 (0.242228)	kp_loss: 2.228088 (3.657864)	siammask_loss: 2.263054 (3.758382)	kp_avg_acc: 0.000000 (0.005247)
[2019-08-14 16:52:38,882-rk0-val_siamrcnn.py#277] Validation: [79/1899]	batch_time: 0.022345 (0.052995)	data_time: 0.000090 (0.013895)	rpn_cls_loss: 0.006984 (0.003649)	rpn_loc_loss: 0.094253 (0.081358)	kp_hp_loss: 1.399198 (0.839179)	kp_hm_hp_loss: 3.782103 (2.623750)	kp_hp_offset_loss: 0.250349 (0.242557)	kp_loss: 5.431650 (3.705485)	siammask_loss: 5.551738 (3.806763)	kp_avg_acc: 0.000000 (0.005372)
[2019-08-14 16:52:40,784-rk0-val_siamrcnn.py#277] Validation: [89/1899]	batch_time: 0.022358 (0.049877)	data_time: 0.000090 (0.012373)	rpn_cls_loss: 0.000323 (0.003673)	rpn_loc_loss: 0.033420 (0.081622)	kp_hp_loss: 0.678522 (0.812167)	kp_hm_hp_loss: 4.577785 (2.577216)	kp_hp_offset_loss: 0.248946 (0.242973)	kp_loss: 5.505254 (3.632356)	siammask_loss: 5.545681 (3.733976)	kp_avg_acc: 0.000000 (0.007111)
[2019-08-14 16:52:42,644-rk0-val_siamrcnn.py#277] Validation: [99/1899]	batch_time: 0.022903 (0.047151)	data_time: 0.000091 (0.011154)	rpn_cls_loss: 0.000279 (0.003564)	rpn_loc_loss: 0.085388 (0.078891)	kp_hp_loss: 0.278427 (0.787771)	kp_hm_hp_loss: 1.063156 (2.538230)	kp_hp_offset_loss: 0.205592 (0.240750)	kp_loss: 1.547175 (3.566750)	siammask_loss: 1.649920 (3.664983)	kp_avg_acc: 0.000000 (0.007577)
[2019-08-14 16:52:44,617-rk0-val_siamrcnn.py#277] Validation: [109/1899]	batch_time: 0.025046 (0.045022)	data_time: 0.000127 (0.010161)	rpn_cls_loss: 0.000433 (0.003315)	rpn_loc_loss: 0.031294 (0.076778)	kp_hp_loss: 0.461318 (0.793458)	kp_hm_hp_loss: 1.662074 (2.531263)	kp_hp_offset_loss: 0.268604 (0.239685)	kp_loss: 2.391995 (3.564406)	siammask_loss: 2.429980 (3.659854)	kp_avg_acc: 0.066667 (0.008062)
[2019-08-14 16:55:18,517-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 16:55:18,518-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='snapshot_0812/checkpoint_e199.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 16:55:18,520-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 16:55:18,520-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 16:55:18,522-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 16:55:21,356-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 16:55:21,391-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 16:55:21,457-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:55:21,458-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:55:21,461-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 16:55:21,577-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:55:21,578-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 16:55:21,578-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 16:55:21,580-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 16:55:21,673-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 16:55:21,675-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 16:55:21,678-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:55:21,678-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:55:21,679-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 16:55:21,683-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 16:55:21,684-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 16:55:21,684-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 16:55:27,526-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 16:55:28,128-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:55:28,129-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked'}
[2019-08-14 16:55:28,130-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 16:55:28,130-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.conv2.weight', 'layer4.2.bn1.bias', 'layer4.0.bn2.weight', 'layer4.1.bn3.running_mean', 'layer4.0.bn3.bias', 'layer4.0.downsample.1.weight', 'layer4.0.downsample.1.running_mean', 'layer4.0.conv3.weight', 'layer4.2.bn3.running_mean', 'layer4.2.bn1.running_var', 'layer4.2.bn2.bias', 'layer4.1.bn2.running_mean', 'layer4.2.bn3.running_var', 'layer4.0.bn1.bias', 'layer4.2.bn3.bias', 'layer4.0.bn2.running_mean', 'layer4.0.bn1.running_var', 'layer4.1.conv1.weight', 'layer4.0.bn1.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn2.weight', 'layer4.0.bn3.running_var', 'layer4.0.conv2.weight', 'layer4.1.bn1.bias', 'layer4.0.downsample.0.weight', 'layer4.1.bn2.bias', 'layer4.1.bn3.bias', 'layer4.0.bn1.running_mean', 'layer4.0.bn2.running_var', 'layer4.0.bn3.running_mean', 'layer4.2.bn1.running_mean', 'layer4.2.conv1.weight', 'layer4.1.bn2.running_var', 'layer4.1.bn3.running_var', 'layer4.2.bn2.running_mean', 'layer4.2.bn1.weight', 'layer4.2.bn2.running_var', 'layer4.0.downsample.1.bias', 'layer4.1.bn3.weight', 'layer4.1.bn1.running_var', 'layer4.2.bn2.weight', 'layer4.2.conv2.weight', 'layer4.0.bn2.bias', 'layer4.0.conv1.weight', 'layer4.1.bn1.weight', 'layer4.0.bn3.weight', 'layer4.2.bn3.weight', 'layer4.2.conv3.weight', 'layer4.1.bn1.running_mean', 'layer4.1.conv3.weight'}
[2019-08-14 16:55:28,131-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 16:55:28,131-rk0-load_helper.py# 18] used keys:215
[2019-08-14 16:55:28,156-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 16:55:28,158-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 16:55:28,320-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 16:55:28,324-rk0-load_helper.py# 40] load pretrained model from snapshot_0812/checkpoint_e199.pth
[2019-08-14 16:55:30,357-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 16:55:30,360-rk0-load_helper.py# 18] used keys:372
[2019-08-14 16:55:30,462-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 16:55:33,508-rk0-val_siamrcnn.py#277] Validation: [9/1899]	batch_time: 0.022427 (0.153541)	data_time: 0.000097 (0.034781)	rpn_cls_loss: 0.000328 (0.003357)	rpn_loc_loss: 0.096037 (0.110581)	kp_hp_loss: 0.997869 (1.102707)	kp_hm_hp_loss: 2.818333 (3.393162)	kp_hp_offset_loss: 0.202516 (0.262085)	kp_loss: 4.018719 (4.757954)	siammask_loss: 4.134291 (4.894007)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 16:55:35,209-rk0-val_siamrcnn.py#277] Validation: [19/1899]	batch_time: 0.022583 (0.088260)	data_time: 0.000110 (0.017488)	rpn_cls_loss: 0.001728 (0.002061)	rpn_loc_loss: 0.221580 (0.094727)	kp_hp_loss: 0.881215 (1.064523)	kp_hm_hp_loss: 2.728317 (3.340679)	kp_hp_offset_loss: 0.271592 (0.253873)	kp_loss: 3.881124 (4.659075)	siammask_loss: 4.148748 (4.774808)	kp_avg_acc: 0.000000 (0.003571)
[2019-08-14 16:55:36,883-rk0-val_siamrcnn.py#277] Validation: [29/1899]	batch_time: 0.023062 (0.066611)	data_time: 0.000126 (0.011739)	rpn_cls_loss: 0.000545 (0.001512)	rpn_loc_loss: 0.044130 (0.078404)	kp_hp_loss: 0.941387 (1.034386)	kp_hm_hp_loss: 2.316324 (3.277382)	kp_hp_offset_loss: 0.184102 (0.245178)	kp_loss: 3.441813 (4.556946)	siammask_loss: 3.495314 (4.652541)	kp_avg_acc: 0.000000 (0.002381)
[2019-08-14 16:55:38,573-rk0-val_siamrcnn.py#277] Validation: [39/1899]	batch_time: 0.022441 (0.055635)	data_time: 0.000132 (0.008850)	rpn_cls_loss: 0.000359 (0.001309)	rpn_loc_loss: 0.021366 (0.074444)	kp_hp_loss: 0.939161 (0.981458)	kp_hm_hp_loss: 2.896946 (3.307031)	kp_hp_offset_loss: 0.235512 (0.247135)	kp_loss: 4.071619 (4.535624)	siammask_loss: 4.097617 (4.626266)	kp_avg_acc: 0.000000 (0.005340)
[2019-08-14 16:55:40,343-rk0-val_siamrcnn.py#277] Validation: [49/1899]	batch_time: 0.023536 (0.049397)	data_time: 0.000228 (0.007123)	rpn_cls_loss: 0.000275 (0.001218)	rpn_loc_loss: 0.032534 (0.068735)	kp_hp_loss: 0.898159 (0.963502)	kp_hm_hp_loss: 3.408812 (3.276611)	kp_hp_offset_loss: 0.305309 (0.251473)	kp_loss: 4.612280 (4.491586)	siammask_loss: 4.651597 (4.575286)	kp_avg_acc: 0.000000 (0.005448)
[2019-08-14 16:55:42,043-rk0-val_siamrcnn.py#277] Validation: [59/1899]	batch_time: 0.022849 (0.045239)	data_time: 0.000112 (0.005968)	rpn_cls_loss: 0.000265 (0.001075)	rpn_loc_loss: 0.046502 (0.065118)	kp_hp_loss: 0.775076 (0.984755)	kp_hm_hp_loss: 2.268507 (3.321061)	kp_hp_offset_loss: 0.189010 (0.252021)	kp_loss: 3.232593 (4.557837)	siammask_loss: 3.288661 (4.637053)	kp_avg_acc: 0.000000 (0.006803)
[2019-08-14 16:55:43,766-rk0-val_siamrcnn.py#277] Validation: [69/1899]	batch_time: 0.022511 (0.042079)	data_time: 0.000118 (0.005143)	rpn_cls_loss: 0.000227 (0.001133)	rpn_loc_loss: 0.054392 (0.063456)	kp_hp_loss: 0.770060 (1.020552)	kp_hm_hp_loss: 5.548574 (3.381620)	kp_hp_offset_loss: 0.236105 (0.253211)	kp_loss: 6.554739 (4.655383)	siammask_loss: 6.620236 (4.732664)	kp_avg_acc: 0.000000 (0.007624)
[2019-08-14 16:55:45,520-rk0-val_siamrcnn.py#277] Validation: [79/1899]	batch_time: 0.025419 (0.039719)	data_time: 0.000113 (0.004529)	rpn_cls_loss: 0.000218 (0.001037)	rpn_loc_loss: 0.026129 (0.062524)	kp_hp_loss: 0.929982 (1.011023)	kp_hm_hp_loss: 4.283426 (3.314526)	kp_hp_offset_loss: 0.249304 (0.253671)	kp_loss: 5.462711 (4.579220)	siammask_loss: 5.494285 (4.655286)	kp_avg_acc: 0.000000 (0.006671)
[2019-08-14 16:55:47,204-rk0-val_siamrcnn.py#277] Validation: [89/1899]	batch_time: 0.022466 (0.037855)	data_time: 0.000119 (0.004048)	rpn_cls_loss: 0.000789 (0.001187)	rpn_loc_loss: 0.018451 (0.063809)	kp_hp_loss: 1.076212 (1.043617)	kp_hm_hp_loss: 5.811255 (3.324663)	kp_hp_offset_loss: 0.218764 (0.253948)	kp_loss: 7.106231 (4.622227)	siammask_loss: 7.129162 (4.699984)	kp_avg_acc: 0.000000 (0.005929)
[2019-08-14 16:55:48,877-rk0-val_siamrcnn.py#277] Validation: [99/1899]	batch_time: 0.022611 (0.036323)	data_time: 0.000134 (0.003661)	rpn_cls_loss: 0.000419 (0.001139)	rpn_loc_loss: 0.072549 (0.065396)	kp_hp_loss: 0.795537 (1.058799)	kp_hm_hp_loss: 2.736905 (3.358762)	kp_hp_offset_loss: 0.248156 (0.254316)	kp_loss: 3.780598 (4.671877)	siammask_loss: 3.868076 (4.751491)	kp_avg_acc: 0.076923 (0.006106)
[2019-08-14 16:55:52,615-rk0-val_siamrcnn.py#277] Validation: [109/1899]	batch_time: 0.024040 (0.035078)	data_time: 0.000100 (0.003345)	rpn_cls_loss: 0.000408 (0.001072)	rpn_loc_loss: 0.036227 (0.064468)	kp_hp_loss: 0.857993 (1.064108)	kp_hm_hp_loss: 2.209999 (3.370362)	kp_hp_offset_loss: 0.284906 (0.255040)	kp_loss: 3.352898 (4.689511)	siammask_loss: 3.396778 (4.767943)	kp_avg_acc: 0.000000 (0.007563)
[2019-08-14 16:55:55,244-rk0-val_siamrcnn.py#277] Validation: [119/1899]	batch_time: 0.024920 (0.034150)	data_time: 0.000099 (0.003082)	rpn_cls_loss: 0.002197 (0.001189)	rpn_loc_loss: 0.026490 (0.067663)	kp_hp_loss: 0.645662 (1.084622)	kp_hm_hp_loss: 2.439552 (3.394868)	kp_hp_offset_loss: 0.295669 (0.255545)	kp_loss: 3.380883 (4.735036)	siammask_loss: 3.414868 (4.817421)	kp_avg_acc: 0.000000 (0.007528)
[2019-08-14 16:55:57,679-rk0-val_siamrcnn.py#277] Validation: [129/1899]	batch_time: 0.023100 (0.033317)	data_time: 0.000089 (0.002860)	rpn_cls_loss: 0.000198 (0.001149)	rpn_loc_loss: 0.062107 (0.066672)	kp_hp_loss: 0.644878 (1.091294)	kp_hm_hp_loss: 2.117825 (3.393868)	kp_hp_offset_loss: 0.271260 (0.255543)	kp_loss: 3.033962 (4.740706)	siammask_loss: 3.108689 (4.821861)	kp_avg_acc: 0.000000 (0.007461)
[2019-08-14 16:55:59,803-rk0-val_siamrcnn.py#277] Validation: [139/1899]	batch_time: 0.022392 (0.032564)	data_time: 0.000109 (0.002670)	rpn_cls_loss: 0.000263 (0.001130)	rpn_loc_loss: 0.078422 (0.066813)	kp_hp_loss: 0.473212 (1.067889)	kp_hm_hp_loss: 3.282732 (3.363325)	kp_hp_offset_loss: 0.286291 (0.254112)	kp_loss: 4.042234 (4.685326)	siammask_loss: 4.136603 (4.766631)	kp_avg_acc: 0.000000 (0.007795)
[2019-08-14 16:56:02,118-rk0-val_siamrcnn.py#277] Validation: [149/1899]	batch_time: 0.022382 (0.031938)	data_time: 0.000094 (0.002506)	rpn_cls_loss: 0.000353 (0.001105)	rpn_loc_loss: 0.097685 (0.067220)	kp_hp_loss: 0.819986 (1.067423)	kp_hm_hp_loss: 2.571579 (3.343088)	kp_hp_offset_loss: 0.257538 (0.254066)	kp_loss: 3.649103 (4.664578)	siammask_loss: 3.766678 (4.746347)	kp_avg_acc: 0.000000 (0.008112)
[2019-08-14 16:56:04,500-rk0-val_siamrcnn.py#277] Validation: [159/1899]	batch_time: 0.022225 (0.031375)	data_time: 0.000087 (0.002361)	rpn_cls_loss: 0.000343 (0.001146)	rpn_loc_loss: 0.029661 (0.067352)	kp_hp_loss: 0.853185 (1.064039)	kp_hm_hp_loss: 1.959896 (3.326807)	kp_hp_offset_loss: 0.229263 (0.253855)	kp_loss: 3.042344 (4.644703)	siammask_loss: 3.078280 (4.726670)	kp_avg_acc: 0.000000 (0.008126)
[2019-08-14 16:56:07,090-rk0-val_siamrcnn.py#277] Validation: [169/1899]	batch_time: 0.024695 (0.030916)	data_time: 0.000103 (0.002234)	rpn_cls_loss: 0.000270 (0.001242)	rpn_loc_loss: 0.037931 (0.067275)	kp_hp_loss: 2.039395 (1.065405)	kp_hm_hp_loss: 3.807529 (3.330255)	kp_hp_offset_loss: 0.303839 (0.254582)	kp_loss: 6.150764 (4.650244)	siammask_loss: 6.196551 (4.732215)	kp_avg_acc: 0.000000 (0.008015)
[2019-08-14 16:56:09,244-rk0-val_siamrcnn.py#277] Validation: [179/1899]	batch_time: 0.024663 (0.030595)	data_time: 0.000110 (0.002120)	rpn_cls_loss: 0.000356 (0.001204)	rpn_loc_loss: 0.025554 (0.068058)	kp_hp_loss: 0.918800 (1.079494)	kp_hm_hp_loss: 2.238812 (3.331733)	kp_hp_offset_loss: 0.326041 (0.254473)	kp_loss: 3.483654 (4.665702)	siammask_loss: 3.514675 (4.748573)	kp_avg_acc: 0.000000 (0.008126)
[2019-08-14 16:56:12,403-rk0-val_siamrcnn.py#277] Validation: [189/1899]	batch_time: 0.024589 (0.030323)	data_time: 0.000089 (0.002019)	rpn_cls_loss: 0.000415 (0.001168)	rpn_loc_loss: 0.028311 (0.068969)	kp_hp_loss: 2.019883 (1.074202)	kp_hm_hp_loss: 4.820550 (3.318912)	kp_hp_offset_loss: 0.256386 (0.255361)	kp_loss: 7.096819 (4.648476)	siammask_loss: 7.131207 (4.732405)	kp_avg_acc: 0.000000 (0.008103)
[2019-08-14 16:56:15,700-rk0-val_siamrcnn.py#277] Validation: [199/1899]	batch_time: 0.024518 (0.030043)	data_time: 0.000077 (0.001927)	rpn_cls_loss: 0.000185 (0.001182)	rpn_loc_loss: 0.016457 (0.068895)	kp_hp_loss: 0.712233 (1.067298)	kp_hm_hp_loss: 2.809206 (3.311773)	kp_hp_offset_loss: 0.220019 (0.255551)	kp_loss: 3.741459 (4.634623)	siammask_loss: 3.761393 (4.718479)	kp_avg_acc: 0.000000 (0.008114)
[2019-08-14 16:56:17,997-rk0-val_siamrcnn.py#277] Validation: [209/1899]	batch_time: 0.025250 (0.029874)	data_time: 0.000094 (0.001843)	rpn_cls_loss: 0.000889 (0.001147)	rpn_loc_loss: 0.103157 (0.068837)	kp_hp_loss: 0.923345 (1.062153)	kp_hm_hp_loss: 3.547316 (3.301776)	kp_hp_offset_loss: 0.240100 (0.255741)	kp_loss: 4.710761 (4.619671)	siammask_loss: 4.835439 (4.703421)	kp_avg_acc: 0.000000 (0.008046)
[2019-08-14 16:56:20,483-rk0-val_siamrcnn.py#277] Validation: [219/1899]	batch_time: 0.024545 (0.029669)	data_time: 0.000086 (0.001767)	rpn_cls_loss: 0.000330 (0.001181)	rpn_loc_loss: 0.031171 (0.069607)	kp_hp_loss: 0.839064 (1.060480)	kp_hm_hp_loss: 1.467782 (3.283608)	kp_hp_offset_loss: 0.310873 (0.255965)	kp_loss: 2.617719 (4.600054)	siammask_loss: 2.655453 (4.684762)	kp_avg_acc: 0.062500 (0.007964)
[2019-08-14 16:56:22,623-rk0-val_siamrcnn.py#277] Validation: [229/1899]	batch_time: 0.025721 (0.029495)	data_time: 0.000107 (0.001698)	rpn_cls_loss: 0.001035 (0.001164)	rpn_loc_loss: 0.051383 (0.069085)	kp_hp_loss: 0.832475 (1.047511)	kp_hm_hp_loss: 2.859858 (3.271197)	kp_hp_offset_loss: 0.265018 (0.255772)	kp_loss: 3.957351 (4.574481)	siammask_loss: 4.020046 (4.658546)	kp_avg_acc: 0.000000 (0.008864)
[2019-08-14 16:56:25,711-rk0-val_siamrcnn.py#277] Validation: [239/1899]	batch_time: 0.024664 (0.029336)	data_time: 0.000128 (0.001638)	rpn_cls_loss: 0.000751 (0.001135)	rpn_loc_loss: 0.203775 (0.069510)	kp_hp_loss: 1.033656 (1.042673)	kp_hm_hp_loss: 3.346327 (3.267127)	kp_hp_offset_loss: 0.252077 (0.255490)	kp_loss: 4.632061 (4.565292)	siammask_loss: 4.877342 (4.649838)	kp_avg_acc: 0.000000 (0.008495)
[2019-08-14 16:56:27,793-rk0-val_siamrcnn.py#277] Validation: [249/1899]	batch_time: 0.024503 (0.029187)	data_time: 0.000096 (0.001580)	rpn_cls_loss: 0.000286 (0.001109)	rpn_loc_loss: 0.021403 (0.069043)	kp_hp_loss: 0.941886 (1.037804)	kp_hm_hp_loss: 3.537676 (3.271634)	kp_hp_offset_loss: 0.266722 (0.255249)	kp_loss: 4.746284 (4.564689)	siammask_loss: 4.772253 (4.648648)	kp_avg_acc: 0.000000 (0.008405)
[2019-08-14 16:56:29,959-rk0-val_siamrcnn.py#277] Validation: [259/1899]	batch_time: 0.025738 (0.029020)	data_time: 0.000177 (0.001526)	rpn_cls_loss: 0.000295 (0.001080)	rpn_loc_loss: 0.016068 (0.067789)	kp_hp_loss: 0.907287 (1.032799)	kp_hm_hp_loss: 5.396718 (3.277692)	kp_hp_offset_loss: 0.290351 (0.254908)	kp_loss: 6.594356 (4.565402)	siammask_loss: 6.613932 (4.647826)	kp_avg_acc: 0.000000 (0.008338)
[2019-08-14 16:56:32,215-rk0-val_siamrcnn.py#277] Validation: [269/1899]	batch_time: 0.024605 (0.028867)	data_time: 0.000091 (0.001477)	rpn_cls_loss: 0.001177 (0.001059)	rpn_loc_loss: 0.050202 (0.068166)	kp_hp_loss: 0.777421 (1.033427)	kp_hm_hp_loss: 2.550768 (3.275482)	kp_hp_offset_loss: 0.286184 (0.254938)	kp_loss: 3.614373 (4.563849)	siammask_loss: 3.675793 (4.646705)	kp_avg_acc: 0.000000 (0.008512)
[2019-08-14 16:56:34,281-rk0-val_siamrcnn.py#277] Validation: [279/1899]	batch_time: 0.024652 (0.028719)	data_time: 0.000095 (0.001430)	rpn_cls_loss: 0.000225 (0.001047)	rpn_loc_loss: 0.054104 (0.067493)	kp_hp_loss: 0.976591 (1.031006)	kp_hm_hp_loss: 4.708787 (3.289605)	kp_hp_offset_loss: 0.317888 (0.255506)	kp_loss: 6.003266 (4.576117)	siammask_loss: 6.068416 (4.658155)	kp_avg_acc: 0.000000 (0.008998)
[2019-08-14 16:56:36,061-rk0-val_siamrcnn.py#277] Validation: [289/1899]	batch_time: 0.024573 (0.028581)	data_time: 0.000087 (0.001387)	rpn_cls_loss: 0.000218 (0.001055)	rpn_loc_loss: 0.043598 (0.066820)	kp_hp_loss: 1.690565 (1.030221)	kp_hm_hp_loss: 6.361511 (3.297955)	kp_hp_offset_loss: 0.273447 (0.254885)	kp_loss: 8.325523 (4.583063)	siammask_loss: 8.378059 (4.664300)	kp_avg_acc: 0.000000 (0.009363)
[2019-08-14 16:56:37,814-rk0-val_siamrcnn.py#277] Validation: [299/1899]	batch_time: 0.024628 (0.028455)	data_time: 0.000090 (0.001346)	rpn_cls_loss: 0.001493 (0.001066)	rpn_loc_loss: 0.340431 (0.067194)	kp_hp_loss: 0.716760 (1.028749)	kp_hm_hp_loss: 2.554008 (3.277402)	kp_hp_offset_loss: 0.252378 (0.255216)	kp_loss: 3.523146 (4.561370)	siammask_loss: 3.933156 (4.643067)	kp_avg_acc: 0.000000 (0.009247)
[2019-08-14 16:56:39,774-rk0-val_siamrcnn.py#277] Validation: [309/1899]	batch_time: 0.025503 (0.028343)	data_time: 0.000110 (0.001308)	rpn_cls_loss: 0.000491 (0.001054)	rpn_loc_loss: 0.077421 (0.066992)	kp_hp_loss: 1.170674 (1.024514)	kp_hm_hp_loss: 2.424020 (3.277817)	kp_hp_offset_loss: 0.250318 (0.255584)	kp_loss: 3.845011 (4.557918)	siammask_loss: 3.938408 (4.639360)	kp_avg_acc: 0.000000 (0.008949)
[2019-08-14 16:56:48,684-rk0-val_siamrcnn.py#277] Validation: [319/1899]	batch_time: 0.043408 (0.028857)	data_time: 0.000134 (0.001767)	rpn_cls_loss: 0.002337 (0.001043)	rpn_loc_loss: 0.242927 (0.067974)	kp_hp_loss: 0.822946 (1.025777)	kp_hm_hp_loss: 2.705057 (3.309013)	kp_hp_offset_loss: 0.282350 (0.256268)	kp_loss: 3.810353 (4.591061)	siammask_loss: 4.104203 (4.673670)	kp_avg_acc: 0.000000 (0.008669)
[2019-08-14 16:56:50,659-rk0-val_siamrcnn.py#277] Validation: [329/1899]	batch_time: 0.024618 (0.028731)	data_time: 0.000090 (0.001718)	rpn_cls_loss: 0.000661 (0.001083)	rpn_loc_loss: 0.072786 (0.068160)	kp_hp_loss: 0.657205 (1.026710)	kp_hm_hp_loss: 6.166335 (3.313554)	kp_hp_offset_loss: 0.218335 (0.256244)	kp_loss: 7.041874 (4.596510)	siammask_loss: 7.129878 (4.679384)	kp_avg_acc: 0.000000 (0.008811)
[2019-08-14 16:56:52,782-rk0-val_siamrcnn.py#277] Validation: [339/1899]	batch_time: 0.024545 (0.028619)	data_time: 0.000093 (0.001672)	rpn_cls_loss: 0.000318 (0.001065)	rpn_loc_loss: 0.103214 (0.067320)	kp_hp_loss: 0.935265 (1.024623)	kp_hm_hp_loss: 3.598761 (3.319358)	kp_hp_offset_loss: 0.233544 (0.256712)	kp_loss: 4.767571 (4.600695)	siammask_loss: 4.891746 (4.682543)	kp_avg_acc: 0.000000 (0.008552)
[2019-08-14 16:56:54,582-rk0-val_siamrcnn.py#277] Validation: [349/1899]	batch_time: 0.024585 (0.028506)	data_time: 0.000101 (0.001629)	rpn_cls_loss: 0.000381 (0.001042)	rpn_loc_loss: 0.027282 (0.066964)	kp_hp_loss: 1.388642 (1.018668)	kp_hm_hp_loss: 4.419757 (3.319901)	kp_hp_offset_loss: 0.243949 (0.257071)	kp_loss: 6.052348 (4.595642)	siammask_loss: 6.085468 (4.677039)	kp_avg_acc: 0.000000 (0.008307)
[2019-08-14 16:56:56,428-rk0-val_siamrcnn.py#277] Validation: [359/1899]	batch_time: 0.024979 (0.028405)	data_time: 0.000089 (0.001588)	rpn_cls_loss: 0.000244 (0.001076)	rpn_loc_loss: 0.014598 (0.066663)	kp_hp_loss: 0.910377 (1.019885)	kp_hm_hp_loss: 2.236628 (3.315797)	kp_hp_offset_loss: 0.340970 (0.257213)	kp_loss: 3.487976 (4.592897)	siammask_loss: 3.505738 (4.673967)	kp_avg_acc: 0.000000 (0.008308)
[2019-08-14 16:56:59,793-rk0-val_siamrcnn.py#277] Validation: [369/1899]	batch_time: 0.025281 (0.028319)	data_time: 0.000097 (0.001550)	rpn_cls_loss: 0.000178 (0.001077)	rpn_loc_loss: 0.052191 (0.066204)	kp_hp_loss: 1.356453 (1.016900)	kp_hm_hp_loss: 3.772175 (3.331679)	kp_hp_offset_loss: 0.268028 (0.257227)	kp_loss: 5.396655 (4.605808)	siammask_loss: 5.459462 (4.686328)	kp_avg_acc: 0.000000 (0.008489)
[2019-08-14 16:57:01,696-rk0-val_siamrcnn.py#277] Validation: [379/1899]	batch_time: 0.024436 (0.028226)	data_time: 0.000082 (0.001514)	rpn_cls_loss: 0.000250 (0.001066)	rpn_loc_loss: 0.095905 (0.065863)	kp_hp_loss: 0.760728 (1.021002)	kp_hm_hp_loss: 2.619717 (3.338468)	kp_hp_offset_loss: 0.191374 (0.257462)	kp_loss: 3.571819 (4.616935)	siammask_loss: 3.687156 (4.697035)	kp_avg_acc: 0.083333 (0.009051)
[2019-08-14 16:57:03,404-rk0-val_siamrcnn.py#277] Validation: [389/1899]	batch_time: 0.024456 (0.028135)	data_time: 0.000089 (0.001479)	rpn_cls_loss: 0.001299 (0.001051)	rpn_loc_loss: 0.030637 (0.065215)	kp_hp_loss: 0.959834 (1.021889)	kp_hm_hp_loss: 2.825702 (3.338972)	kp_hp_offset_loss: 0.259950 (0.257143)	kp_loss: 4.045487 (4.618007)	siammask_loss: 4.083550 (4.697314)	kp_avg_acc: 0.000000 (0.008819)
[2019-08-14 16:57:05,132-rk0-val_siamrcnn.py#277] Validation: [399/1899]	batch_time: 0.024489 (0.028051)	data_time: 0.000086 (0.001446)	rpn_cls_loss: 0.000432 (0.001056)	rpn_loc_loss: 0.023200 (0.064984)	kp_hp_loss: 0.591597 (1.023992)	kp_hm_hp_loss: 1.587930 (3.352905)	kp_hp_offset_loss: 0.266814 (0.256933)	kp_loss: 2.446341 (4.633832)	siammask_loss: 2.474613 (4.712867)	kp_avg_acc: 0.000000 (0.008598)
[2019-08-14 17:10:22,173-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 17:10:22,174-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='snapshot_0811/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 17:10:22,189-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 17:10:22,189-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 17:10:22,342-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 17:10:25,734-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 17:10:25,770-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 17:10:25,835-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 17:10:25,836-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 17:10:25,838-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 17:10:25,904-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 17:10:25,904-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 17:10:25,905-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 17:10:25,920-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 17:10:26,099-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 17:10:26,101-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 17:10:26,104-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 17:10:26,104-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 17:10:26,105-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 17:10:26,107-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 17:10:26,108-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 17:10:26,108-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 17:10:34,097-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 17:10:35,794-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 17:10:35,796-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked'}
[2019-08-14 17:10:35,796-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 17:10:35,797-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.bn3.running_mean', 'layer4.0.downsample.0.weight', 'layer4.1.bn2.running_var', 'layer4.2.bn2.weight', 'layer4.2.bn2.running_var', 'layer4.0.downsample.1.weight', 'layer4.0.downsample.1.running_var', 'layer4.0.bn3.running_var', 'layer4.2.bn1.weight', 'layer4.2.bn2.bias', 'layer4.2.bn3.bias', 'layer4.1.conv3.weight', 'layer4.0.bn1.running_mean', 'layer4.1.bn3.weight', 'layer4.2.bn3.running_var', 'layer4.1.bn1.bias', 'layer4.1.bn2.running_mean', 'layer4.1.bn3.bias', 'layer4.1.bn2.bias', 'layer4.0.conv3.weight', 'layer4.1.bn1.weight', 'layer4.1.bn3.running_mean', 'layer4.2.bn1.running_var', 'layer4.0.bn2.running_mean', 'layer4.0.conv1.weight', 'layer4.0.bn3.weight', 'layer4.1.conv2.weight', 'layer4.0.bn3.bias', 'layer4.1.conv1.weight', 'layer4.0.bn2.bias', 'layer4.0.bn1.running_var', 'layer4.2.conv3.weight', 'layer4.1.bn1.running_mean', 'layer4.2.bn1.bias', 'layer4.0.bn1.weight', 'layer4.0.bn2.weight', 'layer4.2.bn3.running_mean', 'layer4.1.bn2.weight', 'layer4.1.bn3.running_var', 'layer4.0.downsample.1.running_mean', 'layer4.0.conv2.weight', 'layer4.1.bn1.running_var', 'layer4.0.bn1.bias', 'layer4.2.conv1.weight', 'layer4.2.bn1.running_mean', 'layer4.0.downsample.1.bias', 'layer4.2.conv2.weight', 'layer4.0.bn2.running_var', 'layer4.2.bn3.weight', 'layer4.2.bn2.running_mean'}
[2019-08-14 17:10:35,797-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 17:10:35,798-rk0-load_helper.py# 18] used keys:215
[2019-08-14 17:10:35,828-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 17:10:35,830-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 17:10:36,038-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 17:10:36,042-rk0-load_helper.py# 40] load pretrained model from snapshot_0811/checkpoint_e99.pth
[2019-08-14 17:10:37,754-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 17:10:37,758-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'features.features.layer4.0.downsample.1.num_batches_tracked', 'features.downsample_p4.downsample.1.running_mean', 'features.downsample_p4.downsample.0.weight', 'features.features.layer4.0.bn3.running_var', 'features.downsample_p4.downsample.1.bias', 'features.features.layer4.0.bn3.bias', 'features.features.layer4.2.bn3.num_batches_tracked', 'features.downsample_p4.downsample.1.weight', 'features.features.layer4.0.downsample.1.running_var', 'features.features.layer4.0.downsample.1.weight', 'features.features.layer4.2.bn3.bias', 'features.features.layer4.0.bn3.running_mean', 'features.features.layer4.0.bn1.running_var', 'features.features.layer4.1.conv1.weight', 'features.features.layer4.2.conv2.weight', 'features.features.layer4.1.conv3.weight', 'features.features.layer4.2.conv3.weight', 'features.features.layer4.1.bn1.num_batches_tracked', 'features.downsample_p4.downsample.1.running_var', 'features.features.layer4.0.conv3.weight', 'features.features.layer4.0.conv1.weight', 'features.features.layer4.0.bn1.bias', 'features.features.layer4.1.bn2.weight', 'features.features.layer4.0.bn2.running_var', 'features.features.layer4.1.bn3.running_mean', 'features.features.layer4.2.bn3.running_mean', 'features.features.layer4.2.conv1.weight', 'features.downsample_p4.downsample.1.num_batches_tracked', 'features.features.layer4.0.bn1.weight', 'features.features.layer4.0.bn2.running_mean', 'features.features.layer4.1.bn3.num_batches_tracked', 'features.features.layer4.1.bn1.bias', 'features.features.layer4.1.bn2.num_batches_tracked', 'features.features.layer4.1.bn3.running_var', 'features.features.layer4.0.conv2.weight', 'features.features.layer4.0.bn3.weight', 'features.features.layer4.1.conv2.weight', 'features.features.layer4.1.bn1.running_mean', 'features.features.layer4.1.bn2.running_var', 'features.features.layer4.2.bn1.weight', 'features.features.layer4.0.downsample.1.running_mean', 'features.features.layer4.0.bn1.num_batches_tracked', 'features.features.layer4.2.bn1.num_batches_tracked', 'features.features.layer4.2.bn1.bias', 'features.features.layer4.2.bn1.running_var', 'features.features.layer4.2.bn2.bias', 'features.features.layer4.2.bn2.running_var', 'features.features.layer4.1.bn1.weight', 'features.features.layer4.0.bn1.running_mean', 'features.features.layer4.2.bn1.running_mean', 'features.features.layer4.2.bn3.weight', 'features.features.layer4.0.downsample.1.bias', 'features.features.layer4.0.bn2.num_batches_tracked', 'features.features.layer4.0.bn2.weight', 'features.features.layer4.0.bn3.num_batches_tracked', 'features.features.layer4.1.bn3.bias', 'features.features.layer4.2.bn2.num_batches_tracked', 'features.features.layer4.1.bn2.running_mean', 'features.features.layer4.2.bn2.running_mean', 'features.features.layer4.2.bn2.weight', 'features.features.layer4.0.bn2.bias', 'features.features.layer4.0.downsample.0.weight', 'features.features.layer4.1.bn1.running_var', 'features.features.layer4.1.bn2.bias', 'features.features.layer4.2.bn3.running_var', 'features.features.layer4.1.bn3.weight'}
[2019-08-14 17:10:37,759-rk0-load_helper.py# 17] unused checkpoint keys:66
[2019-08-14 17:10:37,759-rk0-load_helper.py# 18] used keys:372
[2019-08-14 17:10:37,860-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 17:10:42,043-rk0-val_siamrcnn.py#277] Validation: [9/1899]	batch_time: 0.022950 (0.192979)	data_time: 0.000113 (0.062948)	rpn_cls_loss: 0.000148 (0.000275)	rpn_loc_loss: 0.033212 (0.063731)	kp_hp_loss: 0.519285 (1.107527)	kp_hm_hp_loss: 12.625349 (11.593042)	kp_hp_offset_loss: 0.219060 (0.215339)	kp_loss: 13.363694 (12.915907)	siammask_loss: 13.403696 (12.992659)	kp_avg_acc: 0.928571 (0.659384)
[2019-08-14 17:10:43,930-rk0-val_siamrcnn.py#277] Validation: [19/1899]	batch_time: 0.023371 (0.107956)	data_time: 0.000110 (0.031567)	rpn_cls_loss: 0.000167 (0.000778)	rpn_loc_loss: 0.035711 (0.064351)	kp_hp_loss: 0.590045 (0.860833)	kp_hm_hp_loss: 14.280753 (12.429372)	kp_hp_offset_loss: 0.248634 (0.226111)	kp_loss: 15.119432 (13.516315)	siammask_loss: 15.162453 (13.594314)	kp_avg_acc: 0.857143 (0.752976)
[2019-08-14 17:10:45,618-rk0-val_siamrcnn.py#277] Validation: [29/1899]	batch_time: 0.022259 (0.079518)	data_time: 0.000098 (0.021100)	rpn_cls_loss: 0.000696 (0.000606)	rpn_loc_loss: 0.068990 (0.059761)	kp_hp_loss: 1.040525 (0.788147)	kp_hm_hp_loss: 10.931302 (12.932540)	kp_hp_offset_loss: 0.211878 (0.229267)	kp_loss: 12.183706 (13.949954)	siammask_loss: 12.267191 (14.022272)	kp_avg_acc: 0.636364 (0.775062)
[2019-08-14 17:10:47,405-rk0-val_siamrcnn.py#277] Validation: [39/1899]	batch_time: 0.024084 (0.065883)	data_time: 0.000100 (0.015877)	rpn_cls_loss: 0.000139 (0.000692)	rpn_loc_loss: 0.026116 (0.068251)	kp_hp_loss: 0.892995 (0.761428)	kp_hm_hp_loss: 12.820011 (12.779559)	kp_hp_offset_loss: 0.202048 (0.223277)	kp_loss: 13.915053 (13.764262)	siammask_loss: 13.946532 (13.846856)	kp_avg_acc: 0.909091 (0.778440)
[2019-08-14 17:10:49,166-rk0-val_siamrcnn.py#277] Validation: [49/1899]	batch_time: 0.022515 (0.057673)	data_time: 0.000098 (0.012741)	rpn_cls_loss: 0.000097 (0.000654)	rpn_loc_loss: 0.048415 (0.072026)	kp_hp_loss: 0.729121 (0.754760)	kp_hm_hp_loss: 14.984629 (12.815238)	kp_hp_offset_loss: 0.227354 (0.222553)	kp_loss: 15.941104 (13.792550)	siammask_loss: 15.999299 (13.879635)	kp_avg_acc: 1.000000 (0.786704)
[2019-08-14 17:10:50,888-rk0-val_siamrcnn.py#277] Validation: [59/1899]	batch_time: 0.022640 (0.051854)	data_time: 0.000084 (0.010649)	rpn_cls_loss: 0.000174 (0.000811)	rpn_loc_loss: 0.024814 (0.067606)	kp_hp_loss: 0.377175 (0.793316)	kp_hm_hp_loss: 9.966992 (12.941350)	kp_hp_offset_loss: 0.230963 (0.225262)	kp_loss: 10.575130 (13.959928)	siammask_loss: 10.605080 (14.041867)	kp_avg_acc: 0.882353 (0.780527)
[2019-08-14 17:10:52,690-rk0-val_siamrcnn.py#277] Validation: [69/1899]	batch_time: 0.022457 (0.047692)	data_time: 0.000095 (0.009153)	rpn_cls_loss: 0.000119 (0.000721)	rpn_loc_loss: 0.032224 (0.064634)	kp_hp_loss: 0.434822 (0.776748)	kp_hm_hp_loss: 14.257466 (12.824868)	kp_hp_offset_loss: 0.203459 (0.224777)	kp_loss: 14.895747 (13.826396)	siammask_loss: 14.934534 (13.904677)	kp_avg_acc: 1.000000 (0.781629)
[2019-08-14 17:10:54,437-rk0-val_siamrcnn.py#277] Validation: [79/1899]	batch_time: 0.022853 (0.044790)	data_time: 0.000117 (0.008032)	rpn_cls_loss: 0.000150 (0.000650)	rpn_loc_loss: 0.135588 (0.064193)	kp_hp_loss: 0.951611 (0.753932)	kp_hm_hp_loss: 11.133528 (12.890961)	kp_hp_offset_loss: 0.284126 (0.223694)	kp_loss: 12.369266 (13.868588)	siammask_loss: 12.532121 (13.946270)	kp_avg_acc: 0.533333 (0.792492)
[2019-08-14 17:10:56,182-rk0-val_siamrcnn.py#277] Validation: [89/1899]	batch_time: 0.022286 (0.042317)	data_time: 0.000083 (0.007157)	rpn_cls_loss: 0.000346 (0.000596)	rpn_loc_loss: 0.165428 (0.064525)	kp_hp_loss: 0.887236 (0.759482)	kp_hm_hp_loss: 14.805281 (12.785868)	kp_hp_offset_loss: 0.209967 (0.225814)	kp_loss: 15.902485 (13.771162)	siammask_loss: 16.101345 (13.849190)	kp_avg_acc: 0.818182 (0.788363)
[2019-08-14 17:10:57,965-rk0-val_siamrcnn.py#277] Validation: [99/1899]	batch_time: 0.023081 (0.040340)	data_time: 0.000143 (0.006458)	rpn_cls_loss: 0.000201 (0.000569)	rpn_loc_loss: 0.055903 (0.067677)	kp_hp_loss: 0.765519 (0.799951)	kp_hm_hp_loss: 16.351534 (12.767286)	kp_hp_offset_loss: 0.305340 (0.228669)	kp_loss: 17.422392 (13.795901)	siammask_loss: 17.489677 (13.877686)	kp_avg_acc: 0.909091 (0.776213)
[2019-08-14 17:11:00,109-rk0-val_siamrcnn.py#277] Validation: [109/1899]	batch_time: 0.022433 (0.038967)	data_time: 0.000089 (0.005888)	rpn_cls_loss: 0.000118 (0.000533)	rpn_loc_loss: 0.068932 (0.066739)	kp_hp_loss: 0.231576 (0.788459)	kp_hm_hp_loss: 10.707323 (12.764752)	kp_hp_offset_loss: 0.176002 (0.229356)	kp_loss: 11.114902 (13.782561)	siammask_loss: 11.197737 (13.863184)	kp_avg_acc: 0.866667 (0.781171)
[2019-08-14 17:11:02,308-rk0-val_siamrcnn.py#277] Validation: [119/1899]	batch_time: 0.022381 (0.037821)	data_time: 0.000106 (0.005411)	rpn_cls_loss: 0.000186 (0.000503)	rpn_loc_loss: 0.024383 (0.065236)	kp_hp_loss: 0.826535 (0.781329)	kp_hm_hp_loss: 10.612735 (12.759639)	kp_hp_offset_loss: 0.221058 (0.229066)	kp_loss: 11.660327 (13.770027)	siammask_loss: 11.689773 (13.848817)	kp_avg_acc: 0.750000 (0.788497)
[2019-08-14 17:11:04,157-rk0-val_siamrcnn.py#277] Validation: [129/1899]	batch_time: 0.045389 (0.036923)	data_time: 0.000192 (0.005008)	rpn_cls_loss: 0.000183 (0.000500)	rpn_loc_loss: 0.028596 (0.066380)	kp_hp_loss: 0.849012 (0.781264)	kp_hm_hp_loss: 12.489479 (12.747454)	kp_hp_offset_loss: 0.213881 (0.229923)	kp_loss: 13.552372 (13.758634)	siammask_loss: 13.586869 (13.838793)	kp_avg_acc: 0.833333 (0.786430)
[2019-08-14 17:11:05,915-rk0-val_siamrcnn.py#277] Validation: [139/1899]	batch_time: 0.022334 (0.035892)	data_time: 0.000088 (0.004663)	rpn_cls_loss: 0.000089 (0.000481)	rpn_loc_loss: 0.056926 (0.066721)	kp_hp_loss: 0.611830 (0.770859)	kp_hm_hp_loss: 11.821073 (12.720083)	kp_hp_offset_loss: 0.244259 (0.228020)	kp_loss: 12.677162 (13.718955)	siammask_loss: 12.745563 (13.799505)	kp_avg_acc: 0.846154 (0.787509)
[2019-08-14 17:11:07,739-rk0-val_siamrcnn.py#277] Validation: [149/1899]	batch_time: 0.024574 (0.035189)	data_time: 0.000082 (0.004367)	rpn_cls_loss: 0.000193 (0.000461)	rpn_loc_loss: 0.033520 (0.066093)	kp_hp_loss: 0.717341 (0.785295)	kp_hm_hp_loss: 10.481224 (12.746932)	kp_hp_offset_loss: 0.221097 (0.229545)	kp_loss: 11.419662 (13.761766)	siammask_loss: 11.460078 (13.841541)	kp_avg_acc: 0.714286 (0.784526)
[2019-08-14 17:11:09,583-rk0-val_siamrcnn.py#277] Validation: [159/1899]	batch_time: 0.024530 (0.034531)	data_time: 0.000082 (0.004104)	rpn_cls_loss: 0.000182 (0.000444)	rpn_loc_loss: 0.054954 (0.065326)	kp_hp_loss: 0.484803 (0.774565)	kp_hm_hp_loss: 12.907267 (12.748558)	kp_hp_offset_loss: 0.256569 (0.228778)	kp_loss: 13.648639 (13.751894)	siammask_loss: 13.714766 (13.830733)	kp_avg_acc: 0.750000 (0.785914)
[2019-08-14 17:11:11,417-rk0-val_siamrcnn.py#277] Validation: [169/1899]	batch_time: 0.024540 (0.034023)	data_time: 0.000084 (0.003872)	rpn_cls_loss: 0.000168 (0.000427)	rpn_loc_loss: 0.030429 (0.064626)	kp_hp_loss: 0.490463 (0.773827)	kp_hm_hp_loss: 12.693129 (12.763668)	kp_hp_offset_loss: 0.223528 (0.229801)	kp_loss: 13.407119 (13.767288)	siammask_loss: 13.443801 (13.845270)	kp_avg_acc: 0.857143 (0.781995)
[2019-08-14 17:11:13,137-rk0-val_siamrcnn.py#277] Validation: [179/1899]	batch_time: 0.024518 (0.033517)	data_time: 0.000086 (0.003666)	rpn_cls_loss: 0.000165 (0.000435)	rpn_loc_loss: 0.045706 (0.064901)	kp_hp_loss: 0.303997 (0.768895)	kp_hm_hp_loss: 13.236481 (12.769089)	kp_hp_offset_loss: 0.194228 (0.228770)	kp_loss: 13.734705 (13.766744)	siammask_loss: 13.789718 (13.845067)	kp_avg_acc: 1.000000 (0.784804)
[2019-08-14 17:11:14,972-rk0-val_siamrcnn.py#277] Validation: [189/1899]	batch_time: 0.024469 (0.033062)	data_time: 0.000087 (0.003481)	rpn_cls_loss: 0.000149 (0.000420)	rpn_loc_loss: 0.054319 (0.066293)	kp_hp_loss: 0.322080 (0.769497)	kp_hm_hp_loss: 11.797085 (12.817677)	kp_hp_offset_loss: 0.256179 (0.229584)	kp_loss: 12.375343 (13.816748)	siammask_loss: 12.440675 (13.896725)	kp_avg_acc: 0.900000 (0.789121)
[2019-08-14 17:11:16,710-rk0-val_siamrcnn.py#277] Validation: [199/1899]	batch_time: 0.024638 (0.032668)	data_time: 0.000088 (0.003317)	rpn_cls_loss: 0.000171 (0.000413)	rpn_loc_loss: 0.019615 (0.066141)	kp_hp_loss: 0.706298 (0.766039)	kp_hm_hp_loss: 11.773283 (12.782679)	kp_hp_offset_loss: 0.227822 (0.229852)	kp_loss: 12.707403 (13.778562)	siammask_loss: 12.731112 (13.858348)	kp_avg_acc: 0.800000 (0.786471)
[2019-08-14 17:11:18,430-rk0-val_siamrcnn.py#277] Validation: [209/1899]	batch_time: 0.024581 (0.032288)	data_time: 0.000089 (0.003168)	rpn_cls_loss: 0.000233 (0.000441)	rpn_loc_loss: 0.032343 (0.066990)	kp_hp_loss: 1.429922 (0.763432)	kp_hm_hp_loss: 13.053428 (12.737338)	kp_hp_offset_loss: 0.236624 (0.229268)	kp_loss: 14.719974 (13.730029)	siammask_loss: 14.759019 (13.810864)	kp_avg_acc: 0.533333 (0.785751)
[2019-08-14 17:11:20,242-rk0-val_siamrcnn.py#277] Validation: [219/1899]	batch_time: 0.024520 (0.031942)	data_time: 0.000083 (0.003031)	rpn_cls_loss: 0.005162 (0.000451)	rpn_loc_loss: 0.126025 (0.066809)	kp_hp_loss: 0.648718 (0.759985)	kp_hm_hp_loss: 9.069352 (12.774640)	kp_hp_offset_loss: 0.190549 (0.229014)	kp_loss: 9.908619 (13.763630)	siammask_loss: 10.065011 (13.844257)	kp_avg_acc: 0.833333 (0.787612)
[2019-08-14 17:11:21,981-rk0-val_siamrcnn.py#277] Validation: [229/1899]	batch_time: 0.024540 (0.031624)	data_time: 0.000084 (0.002906)	rpn_cls_loss: 0.000088 (0.000440)	rpn_loc_loss: 0.041221 (0.065937)	kp_hp_loss: 0.699965 (0.760655)	kp_hm_hp_loss: 14.177954 (12.793453)	kp_hp_offset_loss: 0.311561 (0.229135)	kp_loss: 15.189480 (13.783233)	siammask_loss: 15.239033 (13.862803)	kp_avg_acc: 0.916667 (0.791140)
[2019-08-14 17:11:23,769-rk0-val_siamrcnn.py#277] Validation: [239/1899]	batch_time: 0.024591 (0.031344)	data_time: 0.000087 (0.002793)	rpn_cls_loss: 0.000188 (0.000438)	rpn_loc_loss: 0.034271 (0.066048)	kp_hp_loss: 0.525101 (0.761597)	kp_hm_hp_loss: 11.940440 (12.749068)	kp_hp_offset_loss: 0.217955 (0.229632)	kp_loss: 12.683496 (13.740288)	siammask_loss: 12.724810 (13.819988)	kp_avg_acc: 0.928571 (0.788843)
[2019-08-14 17:11:25,476-rk0-val_siamrcnn.py#277] Validation: [249/1899]	batch_time: 0.024489 (0.031078)	data_time: 0.000102 (0.002689)	rpn_cls_loss: 0.000250 (0.000450)	rpn_loc_loss: 0.092536 (0.066752)	kp_hp_loss: 1.547197 (0.773643)	kp_hm_hp_loss: 9.632195 (12.727966)	kp_hp_offset_loss: 0.220627 (0.229386)	kp_loss: 11.400019 (13.730987)	siammask_loss: 11.511312 (13.811543)	kp_avg_acc: 0.500000 (0.782566)
[2019-08-14 17:11:27,326-rk0-val_siamrcnn.py#277] Validation: [259/1899]	batch_time: 0.024800 (0.030854)	data_time: 0.000086 (0.002591)	rpn_cls_loss: 0.000155 (0.000442)	rpn_loc_loss: 0.042261 (0.066605)	kp_hp_loss: 0.595464 (0.770524)	kp_hm_hp_loss: 17.857441 (12.727132)	kp_hp_offset_loss: 0.230830 (0.229456)	kp_loss: 18.683735 (13.727105)	siammask_loss: 18.734604 (13.807476)	kp_avg_acc: 0.937500 (0.782826)
[2019-08-14 17:11:29,096-rk0-val_siamrcnn.py#277] Validation: [269/1899]	batch_time: 0.024616 (0.030627)	data_time: 0.000089 (0.002501)	rpn_cls_loss: 0.000116 (0.000435)	rpn_loc_loss: 0.076887 (0.066670)	kp_hp_loss: 0.684795 (0.765154)	kp_hm_hp_loss: 9.493546 (12.688206)	kp_hp_offset_loss: 0.202353 (0.229402)	kp_loss: 10.380695 (13.682753)	siammask_loss: 10.473076 (13.763196)	kp_avg_acc: 0.857143 (0.785746)
[2019-08-14 17:11:30,919-rk0-val_siamrcnn.py#277] Validation: [279/1899]	batch_time: 0.024574 (0.030419)	data_time: 0.000091 (0.002418)	rpn_cls_loss: 0.000201 (0.000443)	rpn_loc_loss: 0.082142 (0.066593)	kp_hp_loss: 0.538065 (0.761129)	kp_hm_hp_loss: 11.321467 (12.716545)	kp_hp_offset_loss: 0.222123 (0.228804)	kp_loss: 12.081656 (13.706470)	siammask_loss: 12.180428 (13.786827)	kp_avg_acc: 0.785714 (0.788616)
[2019-08-14 17:11:32,645-rk0-val_siamrcnn.py#277] Validation: [289/1899]	batch_time: 0.024760 (0.030222)	data_time: 0.000096 (0.002340)	rpn_cls_loss: 0.000162 (0.000434)	rpn_loc_loss: 0.071017 (0.066346)	kp_hp_loss: 0.291231 (0.757368)	kp_hm_hp_loss: 12.154541 (12.709723)	kp_hp_offset_loss: 0.278995 (0.228644)	kp_loss: 12.724768 (13.695726)	siammask_loss: 12.810149 (13.775778)	kp_avg_acc: 1.000000 (0.789960)
[2019-08-14 17:11:34,438-rk0-val_siamrcnn.py#277] Validation: [299/1899]	batch_time: 0.024599 (0.030037)	data_time: 0.000088 (0.002267)	rpn_cls_loss: 0.000209 (0.000427)	rpn_loc_loss: 0.060602 (0.065678)	kp_hp_loss: 0.807747 (0.761989)	kp_hm_hp_loss: 11.120329 (12.671468)	kp_hp_offset_loss: 0.238508 (0.228655)	kp_loss: 12.166584 (13.662103)	siammask_loss: 12.239515 (13.741347)	kp_avg_acc: 0.785714 (0.788249)
[2019-08-14 17:11:36,226-rk0-val_siamrcnn.py#277] Validation: [309/1899]	batch_time: 0.024609 (0.029869)	data_time: 0.000089 (0.002203)	rpn_cls_loss: 0.000141 (0.000421)	rpn_loc_loss: 0.032359 (0.066179)	kp_hp_loss: 1.176030 (0.763813)	kp_hm_hp_loss: 14.543164 (12.646437)	kp_hp_offset_loss: 0.195919 (0.228565)	kp_loss: 15.915113 (13.638809)	siammask_loss: 15.954086 (13.718646)	kp_avg_acc: 0.866667 (0.786384)
[2019-08-14 17:11:38,060-rk0-val_siamrcnn.py#277] Validation: [319/1899]	batch_time: 0.024542 (0.029720)	data_time: 0.000081 (0.002139)	rpn_cls_loss: 0.000150 (0.000413)	rpn_loc_loss: 0.041964 (0.065894)	kp_hp_loss: 0.682024 (0.763310)	kp_hm_hp_loss: 13.397459 (12.654774)	kp_hp_offset_loss: 0.239715 (0.228342)	kp_loss: 14.319198 (13.646420)	siammask_loss: 14.369704 (13.725908)	kp_avg_acc: 0.923077 (0.786311)
[2019-08-14 17:11:39,863-rk0-val_siamrcnn.py#277] Validation: [329/1899]	batch_time: 0.024565 (0.029575)	data_time: 0.000091 (0.002079)	rpn_cls_loss: 0.000188 (0.000406)	rpn_loc_loss: 0.010195 (0.065466)	kp_hp_loss: 0.484139 (0.785193)	kp_hm_hp_loss: 12.087441 (12.619648)	kp_hp_offset_loss: 0.202901 (0.228537)	kp_loss: 12.774482 (13.633372)	siammask_loss: 12.786904 (13.712339)	kp_avg_acc: 0.833333 (0.778606)
[2019-08-14 17:11:41,741-rk0-val_siamrcnn.py#277] Validation: [339/1899]	batch_time: 0.024672 (0.029431)	data_time: 0.000086 (0.002022)	rpn_cls_loss: 0.000109 (0.000588)	rpn_loc_loss: 0.048335 (0.066418)	kp_hp_loss: 0.512651 (0.788684)	kp_hm_hp_loss: 9.786961 (12.558811)	kp_hp_offset_loss: 0.204418 (0.228858)	kp_loss: 10.504029 (13.576347)	siammask_loss: 10.562140 (13.656638)	kp_avg_acc: 0.875000 (0.774298)
[2019-08-14 17:11:43,484-rk0-val_siamrcnn.py#277] Validation: [349/1899]	batch_time: 0.024669 (0.029296)	data_time: 0.000085 (0.001969)	rpn_cls_loss: 0.000169 (0.000605)	rpn_loc_loss: 0.057674 (0.066304)	kp_hp_loss: 1.392056 (0.794955)	kp_hm_hp_loss: 9.737659 (12.556635)	kp_hp_offset_loss: 0.306480 (0.229058)	kp_loss: 11.436194 (13.580642)	siammask_loss: 11.505572 (13.660811)	kp_avg_acc: 0.533333 (0.772133)
[2019-08-14 17:11:45,205-rk0-val_siamrcnn.py#277] Validation: [359/1899]	batch_time: 0.024521 (0.029166)	data_time: 0.000087 (0.001919)	rpn_cls_loss: 0.000909 (0.000740)	rpn_loc_loss: 0.178057 (0.067136)	kp_hp_loss: 1.429686 (0.806902)	kp_hm_hp_loss: 9.208170 (12.568228)	kp_hp_offset_loss: 0.337524 (0.229188)	kp_loss: 10.975380 (13.604316)	siammask_loss: 11.189958 (13.685615)	kp_avg_acc: 0.400000 (0.768141)
[2019-08-14 17:11:46,979-rk0-val_siamrcnn.py#277] Validation: [369/1899]	batch_time: 0.024632 (0.029048)	data_time: 0.000084 (0.001871)	rpn_cls_loss: 0.000099 (0.000758)	rpn_loc_loss: 0.036181 (0.067379)	kp_hp_loss: 1.226609 (0.818310)	kp_hm_hp_loss: 11.331223 (12.509523)	kp_hp_offset_loss: 0.216002 (0.229124)	kp_loss: 12.773834 (13.556956)	siammask_loss: 12.817350 (13.638567)	kp_avg_acc: 0.714286 (0.763857)
[2019-08-14 17:11:48,709-rk0-val_siamrcnn.py#277] Validation: [379/1899]	batch_time: 0.024737 (0.028932)	data_time: 0.000087 (0.001826)	rpn_cls_loss: 0.000140 (0.000744)	rpn_loc_loss: 0.148657 (0.067809)	kp_hp_loss: 0.394071 (0.823459)	kp_hm_hp_loss: 13.232865 (12.487607)	kp_hp_offset_loss: 0.262292 (0.229553)	kp_loss: 13.889228 (13.540619)	siammask_loss: 14.067756 (13.622732)	kp_avg_acc: 0.923077 (0.762197)
[2019-08-14 17:11:50,465-rk0-val_siamrcnn.py#277] Validation: [389/1899]	batch_time: 0.024547 (0.028823)	data_time: 0.000089 (0.001783)	rpn_cls_loss: 0.000130 (0.000731)	rpn_loc_loss: 0.015119 (0.067703)	kp_hp_loss: 1.834315 (0.820055)	kp_hm_hp_loss: 15.375084 (12.475864)	kp_hp_offset_loss: 0.261284 (0.229386)	kp_loss: 17.470682 (13.525305)	siammask_loss: 17.488955 (13.607278)	kp_avg_acc: 0.615385 (0.762708)
[2019-08-14 17:11:52,229-rk0-val_siamrcnn.py#277] Validation: [399/1899]	batch_time: 0.024593 (0.028720)	data_time: 0.000089 (0.001743)	rpn_cls_loss: 0.000141 (0.000717)	rpn_loc_loss: 0.040798 (0.067399)	kp_hp_loss: 1.263518 (0.815270)	kp_hm_hp_loss: 10.836665 (12.481104)	kp_hp_offset_loss: 0.244748 (0.229153)	kp_loss: 12.344932 (13.525526)	siammask_loss: 12.394030 (13.607122)	kp_avg_acc: 0.588235 (0.764327)
[2019-08-14 17:11:54,038-rk0-val_siamrcnn.py#277] Validation: [409/1899]	batch_time: 0.024547 (0.028621)	data_time: 0.000090 (0.001704)	rpn_cls_loss: 0.000917 (0.000707)	rpn_loc_loss: 0.103506 (0.067483)	kp_hp_loss: 1.471848 (0.815322)	kp_hm_hp_loss: 12.122684 (12.497468)	kp_hp_offset_loss: 0.291644 (0.229189)	kp_loss: 13.886176 (13.541977)	siammask_loss: 14.011300 (13.623662)	kp_avg_acc: 0.545455 (0.764533)
[2019-08-14 17:11:55,806-rk0-val_siamrcnn.py#277] Validation: [419/1899]	batch_time: 0.024480 (0.028540)	data_time: 0.000089 (0.001668)	rpn_cls_loss: 0.000130 (0.000695)	rpn_loc_loss: 0.039850 (0.067529)	kp_hp_loss: 0.306388 (0.832674)	kp_hm_hp_loss: 12.380331 (12.463051)	kp_hp_offset_loss: 0.161856 (0.229111)	kp_loss: 12.848575 (13.524835)	siammask_loss: 12.896524 (13.606565)	kp_avg_acc: 0.846154 (0.757578)
[2019-08-14 17:11:57,795-rk0-val_siamrcnn.py#277] Validation: [429/1899]	batch_time: 0.024666 (0.028451)	data_time: 0.000106 (0.001633)	rpn_cls_loss: 0.000158 (0.000683)	rpn_loc_loss: 0.059374 (0.067492)	kp_hp_loss: 1.174541 (0.833983)	kp_hm_hp_loss: 9.911935 (12.464815)	kp_hp_offset_loss: 0.242000 (0.229048)	kp_loss: 11.328477 (13.527846)	siammask_loss: 11.399883 (13.609520)	kp_avg_acc: 0.647059 (0.757042)
[2019-08-14 17:11:59,535-rk0-val_siamrcnn.py#277] Validation: [439/1899]	batch_time: 0.024483 (0.028365)	data_time: 0.000084 (0.001600)	rpn_cls_loss: 0.000200 (0.000691)	rpn_loc_loss: 0.049996 (0.067645)	kp_hp_loss: 0.859491 (0.835705)	kp_hm_hp_loss: 14.090055 (12.456373)	kp_hp_offset_loss: 0.286199 (0.229158)	kp_loss: 15.235745 (13.521237)	siammask_loss: 15.295940 (13.603101)	kp_avg_acc: 0.900000 (0.758258)
[2019-08-14 17:12:01,299-rk0-val_siamrcnn.py#277] Validation: [449/1899]	batch_time: 0.024572 (0.028284)	data_time: 0.000090 (0.001568)	rpn_cls_loss: 0.000185 (0.000679)	rpn_loc_loss: 0.027334 (0.067640)	kp_hp_loss: 0.469673 (0.836378)	kp_hm_hp_loss: 13.870688 (12.443062)	kp_hp_offset_loss: 0.234415 (0.229840)	kp_loss: 14.574777 (13.509282)	siammask_loss: 14.607762 (13.591127)	kp_avg_acc: 0.833333 (0.757277)
[2019-08-14 17:12:03,157-rk0-val_siamrcnn.py#277] Validation: [459/1899]	batch_time: 0.024553 (0.028210)	data_time: 0.000086 (0.001537)	rpn_cls_loss: 0.000112 (0.000703)	rpn_loc_loss: 0.120562 (0.067750)	kp_hp_loss: 0.470465 (0.830510)	kp_hm_hp_loss: 19.138651 (12.464029)	kp_hp_offset_loss: 0.204958 (0.229696)	kp_loss: 19.814074 (13.524234)	siammask_loss: 19.958860 (13.606237)	kp_avg_acc: 1.000000 (0.758744)
[2019-08-14 17:12:04,927-rk0-val_siamrcnn.py#277] Validation: [469/1899]	batch_time: 0.024647 (0.028135)	data_time: 0.000089 (0.001508)	rpn_cls_loss: 0.000126 (0.000695)	rpn_loc_loss: 0.057450 (0.067401)	kp_hp_loss: 0.732305 (0.829642)	kp_hm_hp_loss: 10.743907 (12.474156)	kp_hp_offset_loss: 0.215620 (0.230112)	kp_loss: 11.691833 (13.533910)	siammask_loss: 11.760898 (13.615485)	kp_avg_acc: 0.666667 (0.758923)
[2019-08-14 17:12:06,747-rk0-val_siamrcnn.py#277] Validation: [479/1899]	batch_time: 0.024715 (0.028064)	data_time: 0.000102 (0.001480)	rpn_cls_loss: 0.023131 (0.000772)	rpn_loc_loss: 0.334371 (0.068934)	kp_hp_loss: 2.839457 (0.832427)	kp_hm_hp_loss: 6.756943 (12.441238)	kp_hp_offset_loss: 0.321990 (0.230184)	kp_loss: 9.918390 (13.503850)	siammask_loss: 10.342767 (13.587341)	kp_avg_acc: 0.100000 (0.757088)
[2019-08-14 17:12:08,571-rk0-val_siamrcnn.py#277] Validation: [489/1899]	batch_time: 0.024618 (0.028037)	data_time: 0.000085 (0.001453)	rpn_cls_loss: 0.000176 (0.000764)	rpn_loc_loss: 0.035287 (0.068786)	kp_hp_loss: 0.749093 (0.828092)	kp_hm_hp_loss: 14.563378 (12.444199)	kp_hp_offset_loss: 0.186726 (0.229685)	kp_loss: 15.499197 (13.501978)	siammask_loss: 15.541718 (13.585284)	kp_avg_acc: 0.857143 (0.758344)
[2019-08-14 17:12:10,729-rk0-val_siamrcnn.py#277] Validation: [499/1899]	batch_time: 0.024529 (0.027973)	data_time: 0.000077 (0.001428)	rpn_cls_loss: 0.000166 (0.000768)	rpn_loc_loss: 0.090251 (0.068881)	kp_hp_loss: 0.556914 (0.824164)	kp_hm_hp_loss: 14.054530 (12.454821)	kp_hp_offset_loss: 0.182357 (0.229635)	kp_loss: 14.793800 (13.508620)	siammask_loss: 14.902267 (13.592046)	kp_avg_acc: 0.833333 (0.759436)
[2019-08-14 17:12:12,491-rk0-val_siamrcnn.py#277] Validation: [509/1899]	batch_time: 0.024707 (0.027923)	data_time: 0.000095 (0.001403)	rpn_cls_loss: 0.000197 (0.000757)	rpn_loc_loss: 0.029339 (0.068554)	kp_hp_loss: 0.804615 (0.824085)	kp_hm_hp_loss: 16.330923 (12.444422)	kp_hp_offset_loss: 0.233077 (0.229564)	kp_loss: 17.368614 (13.498073)	siammask_loss: 17.404018 (13.581093)	kp_avg_acc: 0.866667 (0.759486)
[2019-08-14 17:12:14,223-rk0-val_siamrcnn.py#277] Validation: [519/1899]	batch_time: 0.024616 (0.027860)	data_time: 0.000089 (0.001379)	rpn_cls_loss: 0.000657 (0.000747)	rpn_loc_loss: 0.069466 (0.068414)	kp_hp_loss: 0.442361 (0.828096)	kp_hm_hp_loss: 15.244186 (12.433819)	kp_hp_offset_loss: 0.261871 (0.229840)	kp_loss: 15.948418 (13.491756)	siammask_loss: 16.032434 (13.574599)	kp_avg_acc: 1.000000 (0.758123)
[2019-08-14 17:12:15,998-rk0-val_siamrcnn.py#277] Validation: [529/1899]	batch_time: 0.024639 (0.027800)	data_time: 0.000094 (0.001356)	rpn_cls_loss: 0.000136 (0.000739)	rpn_loc_loss: 0.096638 (0.068924)	kp_hp_loss: 1.781189 (0.831346)	kp_hm_hp_loss: 11.218822 (12.410636)	kp_hp_offset_loss: 0.254405 (0.229882)	kp_loss: 13.254416 (13.471866)	siammask_loss: 13.370518 (13.555313)	kp_avg_acc: 0.666667 (0.757141)
[2019-08-14 17:12:17,741-rk0-val_siamrcnn.py#277] Validation: [539/1899]	batch_time: 0.024483 (0.027744)	data_time: 0.000090 (0.001334)	rpn_cls_loss: 0.000769 (0.000739)	rpn_loc_loss: 0.212242 (0.069004)	kp_hp_loss: 1.342049 (0.835242)	kp_hm_hp_loss: 7.969692 (12.379819)	kp_hp_offset_loss: 0.271249 (0.229853)	kp_loss: 9.582990 (13.444914)	siammask_loss: 9.838449 (13.528458)	kp_avg_acc: 0.363636 (0.755235)
[2019-08-14 17:12:19,523-rk0-val_siamrcnn.py#277] Validation: [549/1899]	batch_time: 0.024541 (0.027690)	data_time: 0.000089 (0.001313)	rpn_cls_loss: 0.000107 (0.000730)	rpn_loc_loss: 0.030634 (0.069541)	kp_hp_loss: 0.682275 (0.837166)	kp_hm_hp_loss: 9.220747 (12.369969)	kp_hp_offset_loss: 0.228885 (0.229844)	kp_loss: 10.131907 (13.436981)	siammask_loss: 10.168776 (13.521159)	kp_avg_acc: 0.666667 (0.755115)
[2019-08-14 17:12:21,300-rk0-val_siamrcnn.py#277] Validation: [559/1899]	batch_time: 0.025288 (0.027639)	data_time: 0.000098 (0.001292)	rpn_cls_loss: 0.000598 (0.000723)	rpn_loc_loss: 0.037019 (0.069137)	kp_hp_loss: 0.770749 (0.833299)	kp_hm_hp_loss: 15.961184 (12.378839)	kp_hp_offset_loss: 0.247666 (0.229857)	kp_loss: 16.979597 (13.441995)	siammask_loss: 17.024618 (13.525682)	kp_avg_acc: 1.000000 (0.757372)
[2019-08-14 17:12:23,095-rk0-val_siamrcnn.py#277] Validation: [569/1899]	batch_time: 0.024577 (0.027588)	data_time: 0.000086 (0.001273)	rpn_cls_loss: 0.000176 (0.000714)	rpn_loc_loss: 0.025088 (0.069096)	kp_hp_loss: 0.653257 (0.832558)	kp_hm_hp_loss: 13.157178 (12.374526)	kp_hp_offset_loss: 0.210965 (0.229806)	kp_loss: 14.021399 (13.436891)	siammask_loss: 14.051681 (13.520520)	kp_avg_acc: 0.769231 (0.757550)
[2019-08-14 17:12:24,999-rk0-val_siamrcnn.py#277] Validation: [579/1899]	batch_time: 0.024526 (0.027539)	data_time: 0.000090 (0.001254)	rpn_cls_loss: 0.000221 (0.000704)	rpn_loc_loss: 0.023739 (0.068667)	kp_hp_loss: 0.585984 (0.833174)	kp_hm_hp_loss: 13.697980 (12.364973)	kp_hp_offset_loss: 0.266193 (0.229927)	kp_loss: 14.550158 (13.428074)	siammask_loss: 14.578865 (13.511178)	kp_avg_acc: 0.545455 (0.756929)
[2019-08-14 17:12:26,671-rk0-val_siamrcnn.py#277] Validation: [589/1899]	batch_time: 0.024632 (0.027490)	data_time: 0.000089 (0.001235)	rpn_cls_loss: 0.000153 (0.000695)	rpn_loc_loss: 0.047510 (0.068763)	kp_hp_loss: 0.536480 (0.830233)	kp_hm_hp_loss: 11.990317 (12.369923)	kp_hp_offset_loss: 0.182231 (0.229731)	kp_loss: 12.709028 (13.429888)	siammask_loss: 12.766193 (13.513097)	kp_avg_acc: 0.882353 (0.757966)
[2019-08-14 17:12:28,505-rk0-val_siamrcnn.py#277] Validation: [599/1899]	batch_time: 0.025281 (0.027448)	data_time: 0.000170 (0.001218)	rpn_cls_loss: 0.000471 (0.000687)	rpn_loc_loss: 0.095759 (0.068734)	kp_hp_loss: 1.292158 (0.832497)	kp_hm_hp_loss: 8.501444 (12.332227)	kp_hp_offset_loss: 0.199683 (0.229819)	kp_loss: 9.993284 (13.394544)	siammask_loss: 10.108666 (13.477710)	kp_avg_acc: 0.454545 (0.755632)
[2019-08-14 17:12:30,188-rk0-val_siamrcnn.py#277] Validation: [609/1899]	batch_time: 0.024759 (0.027410)	data_time: 0.000103 (0.001201)	rpn_cls_loss: 0.000204 (0.000679)	rpn_loc_loss: 0.038570 (0.068754)	kp_hp_loss: 0.705050 (0.833085)	kp_hm_hp_loss: 11.839354 (12.343095)	kp_hp_offset_loss: 0.184062 (0.229730)	kp_loss: 12.728465 (13.405915)	siammask_loss: 12.774953 (13.489095)	kp_avg_acc: 0.866667 (0.757103)
[2019-08-14 17:12:31,878-rk0-val_siamrcnn.py#277] Validation: [619/1899]	batch_time: 0.024824 (0.027368)	data_time: 0.000088 (0.001184)	rpn_cls_loss: 0.000171 (0.001105)	rpn_loc_loss: 0.093993 (0.069154)	kp_hp_loss: 0.331953 (0.846489)	kp_hm_hp_loss: 10.740028 (12.327190)	kp_hp_offset_loss: 0.247462 (0.229881)	kp_loss: 11.319444 (13.403563)	siammask_loss: 11.432406 (13.487650)	kp_avg_acc: 1.000000 (0.754923)
[2019-08-14 17:12:33,721-rk0-val_siamrcnn.py#277] Validation: [629/1899]	batch_time: 0.024593 (0.027326)	data_time: 0.000093 (0.001168)	rpn_cls_loss: 0.000173 (0.001091)	rpn_loc_loss: 0.068088 (0.068982)	kp_hp_loss: 0.770586 (0.852147)	kp_hm_hp_loss: 11.051468 (12.318203)	kp_hp_offset_loss: 0.265356 (0.230101)	kp_loss: 12.087410 (13.400456)	siammask_loss: 12.169289 (13.484322)	kp_avg_acc: 1.000000 (0.753260)
[2019-08-14 17:12:35,538-rk0-val_siamrcnn.py#277] Validation: [639/1899]	batch_time: 0.024635 (0.027318)	data_time: 0.000087 (0.001153)	rpn_cls_loss: 0.000136 (0.001109)	rpn_loc_loss: 0.017920 (0.069022)	kp_hp_loss: 0.888148 (0.853752)	kp_hm_hp_loss: 12.140062 (12.321368)	kp_hp_offset_loss: 0.250658 (0.230035)	kp_loss: 13.278869 (13.405161)	siammask_loss: 13.300508 (13.489093)	kp_avg_acc: 0.785714 (0.752854)
[2019-08-14 17:12:37,348-rk0-val_siamrcnn.py#277] Validation: [649/1899]	batch_time: 0.024765 (0.027298)	data_time: 0.000091 (0.001138)	rpn_cls_loss: 0.000224 (0.001124)	rpn_loc_loss: 0.020436 (0.069351)	kp_hp_loss: 0.521970 (0.861328)	kp_hm_hp_loss: 12.893330 (12.327007)	kp_hp_offset_loss: 0.270526 (0.230259)	kp_loss: 13.685826 (13.418600)	siammask_loss: 13.710574 (13.502940)	kp_avg_acc: 0.937500 (0.750982)
[2019-08-14 17:12:39,084-rk0-val_siamrcnn.py#277] Validation: [659/1899]	batch_time: 0.024695 (0.027265)	data_time: 0.000097 (0.001123)	rpn_cls_loss: 0.000171 (0.001110)	rpn_loc_loss: 0.035389 (0.069172)	kp_hp_loss: 0.460074 (0.856980)	kp_hm_hp_loss: 12.610273 (12.333633)	kp_hp_offset_loss: 0.175414 (0.229994)	kp_loss: 13.245762 (13.420611)	siammask_loss: 13.288400 (13.504723)	kp_avg_acc: 0.937500 (0.753121)
[2019-08-14 17:12:40,855-rk0-val_siamrcnn.py#277] Validation: [669/1899]	batch_time: 0.024586 (0.027228)	data_time: 0.000088 (0.001109)	rpn_cls_loss: 0.000090 (0.001096)	rpn_loc_loss: 0.243192 (0.069295)	kp_hp_loss: 0.493981 (0.856564)	kp_hm_hp_loss: 10.010349 (12.334078)	kp_hp_offset_loss: 0.257594 (0.230213)	kp_loss: 10.761924 (13.420861)	siammask_loss: 11.053843 (13.505105)	kp_avg_acc: 0.307692 (0.752513)
[2019-08-14 17:12:42,691-rk0-val_siamrcnn.py#277] Validation: [679/1899]	batch_time: 0.024853 (0.027195)	data_time: 0.000092 (0.001095)	rpn_cls_loss: 0.000139 (0.001082)	rpn_loc_loss: 0.030349 (0.069050)	kp_hp_loss: 0.886713 (0.854804)	kp_hm_hp_loss: 15.792157 (12.344125)	kp_hp_offset_loss: 0.215399 (0.230470)	kp_loss: 16.894268 (13.429405)	siammask_loss: 16.930824 (13.513343)	kp_avg_acc: 0.916667 (0.754417)
[2019-08-14 17:12:44,441-rk0-val_siamrcnn.py#277] Validation: [689/1899]	batch_time: 0.024474 (0.027159)	data_time: 0.000102 (0.001082)	rpn_cls_loss: 0.000171 (0.001069)	rpn_loc_loss: 0.065169 (0.069170)	kp_hp_loss: 0.326551 (0.850477)	kp_hm_hp_loss: 13.191156 (12.337859)	kp_hp_offset_loss: 0.152639 (0.230123)	kp_loss: 13.670345 (13.418466)	siammask_loss: 13.748719 (13.502533)	kp_avg_acc: 0.916667 (0.755143)
[2019-08-14 17:12:46,191-rk0-val_siamrcnn.py#277] Validation: [699/1899]	batch_time: 0.024638 (0.027126)	data_time: 0.000096 (0.001069)	rpn_cls_loss: 0.000133 (0.001057)	rpn_loc_loss: 0.023839 (0.069095)	kp_hp_loss: 0.339094 (0.852729)	kp_hm_hp_loss: 15.850266 (12.348636)	kp_hp_offset_loss: 0.193646 (0.230347)	kp_loss: 16.383007 (13.431717)	siammask_loss: 16.411747 (13.515684)	kp_avg_acc: 1.000000 (0.753925)
[2019-08-14 17:12:47,813-rk0-val_siamrcnn.py#277] Validation: [709/1899]	batch_time: 0.024589 (0.027091)	data_time: 0.000090 (0.001056)	rpn_cls_loss: 0.000223 (0.001046)	rpn_loc_loss: 0.036505 (0.068770)	kp_hp_loss: 0.813549 (0.851339)	kp_hm_hp_loss: 17.597137 (12.358660)	kp_hp_offset_loss: 0.227866 (0.230519)	kp_loss: 18.638554 (13.440525)	siammask_loss: 18.682583 (13.524089)	kp_avg_acc: 0.714286 (0.753996)
[2019-08-14 17:12:49,501-rk0-val_siamrcnn.py#277] Validation: [719/1899]	batch_time: 0.024812 (0.027063)	data_time: 0.000092 (0.001044)	rpn_cls_loss: 0.000164 (0.001034)	rpn_loc_loss: 0.100233 (0.068561)	kp_hp_loss: 0.560128 (0.850017)	kp_hm_hp_loss: 8.634389 (12.344638)	kp_hp_offset_loss: 0.212842 (0.230450)	kp_loss: 9.407359 (13.425110)	siammask_loss: 9.527803 (13.508411)	kp_avg_acc: 0.875000 (0.754193)
[2019-08-14 17:12:51,182-rk0-val_siamrcnn.py#277] Validation: [729/1899]	batch_time: 0.025151 (0.027033)	data_time: 0.000113 (0.001032)	rpn_cls_loss: 0.000158 (0.001024)	rpn_loc_loss: 0.032919 (0.068676)	kp_hp_loss: 0.454801 (0.851230)	kp_hm_hp_loss: 11.281528 (12.348165)	kp_hp_offset_loss: 0.219375 (0.230554)	kp_loss: 11.955703 (13.429955)	siammask_loss: 11.995364 (13.513384)	kp_avg_acc: 0.857143 (0.753106)
[2019-08-14 17:12:52,873-rk0-val_siamrcnn.py#277] Validation: [739/1899]	batch_time: 0.024647 (0.027006)	data_time: 0.000090 (0.001020)	rpn_cls_loss: 0.000167 (0.001015)	rpn_loc_loss: 0.011284 (0.068496)	kp_hp_loss: 0.518574 (0.849994)	kp_hm_hp_loss: 14.954298 (12.348102)	kp_hp_offset_loss: 0.231031 (0.230543)	kp_loss: 15.703902 (13.428645)	siammask_loss: 15.717610 (13.511850)	kp_avg_acc: 1.000000 (0.752799)
[2019-08-14 17:12:54,593-rk0-val_siamrcnn.py#277] Validation: [749/1899]	batch_time: 0.024778 (0.026975)	data_time: 0.000095 (0.001009)	rpn_cls_loss: 0.000193 (0.001877)	rpn_loc_loss: 0.045221 (0.069023)	kp_hp_loss: 0.378960 (0.852630)	kp_hm_hp_loss: 10.079118 (12.385576)	kp_hp_offset_loss: 0.188328 (0.230366)	kp_loss: 10.646407 (13.468577)	siammask_loss: 10.700866 (13.553274)	kp_avg_acc: 0.769231 (0.752265)
[2019-08-14 17:12:56,266-rk0-val_siamrcnn.py#277] Validation: [759/1899]	batch_time: 0.024910 (0.026953)	data_time: 0.000094 (0.000998)	rpn_cls_loss: 0.000725 (0.001856)	rpn_loc_loss: 0.115953 (0.069020)	kp_hp_loss: 0.383534 (0.851790)	kp_hm_hp_loss: 12.853036 (12.391079)	kp_hp_offset_loss: 0.230688 (0.230091)	kp_loss: 13.467257 (13.472963)	siammask_loss: 13.607125 (13.557637)	kp_avg_acc: 0.818182 (0.752682)
[2019-08-14 17:12:58,041-rk0-val_siamrcnn.py#277] Validation: [769/1899]	batch_time: 0.024512 (0.026924)	data_time: 0.000080 (0.000987)	rpn_cls_loss: 0.000263 (0.001835)	rpn_loc_loss: 0.018439 (0.068863)	kp_hp_loss: 0.709404 (0.851468)	kp_hm_hp_loss: 14.227822 (12.394047)	kp_hp_offset_loss: 0.277066 (0.230133)	kp_loss: 15.214293 (13.475652)	siammask_loss: 15.236682 (13.560116)	kp_avg_acc: 0.818182 (0.752832)
[2019-08-14 17:12:59,704-rk0-val_siamrcnn.py#277] Validation: [779/1899]	batch_time: 0.024698 (0.026895)	data_time: 0.000087 (0.000976)	rpn_cls_loss: 0.000159 (0.001813)	rpn_loc_loss: 0.028357 (0.068599)	kp_hp_loss: 0.886736 (0.848406)	kp_hm_hp_loss: 11.798094 (12.425346)	kp_hp_offset_loss: 0.303876 (0.230204)	kp_loss: 12.988706 (13.503960)	siammask_loss: 13.022893 (13.588086)	kp_avg_acc: 0.866667 (0.754173)
[2019-08-14 17:13:01,384-rk0-val_siamrcnn.py#277] Validation: [789/1899]	batch_time: 0.024546 (0.026868)	data_time: 0.000095 (0.000966)	rpn_cls_loss: 0.000123 (0.001794)	rpn_loc_loss: 0.081199 (0.068951)	kp_hp_loss: 0.428592 (0.845595)	kp_hm_hp_loss: 14.867315 (12.418935)	kp_hp_offset_loss: 0.184530 (0.230248)	kp_loss: 15.480438 (13.494782)	siammask_loss: 15.578000 (13.579311)	kp_avg_acc: 1.000000 (0.754675)
[2019-08-14 17:13:03,016-rk0-val_siamrcnn.py#277] Validation: [799/1899]	batch_time: 0.024665 (0.026842)	data_time: 0.000088 (0.000956)	rpn_cls_loss: 0.000142 (0.001774)	rpn_loc_loss: 0.083129 (0.068641)	kp_hp_loss: 0.368507 (0.842431)	kp_hm_hp_loss: 11.960205 (12.436057)	kp_hp_offset_loss: 0.204131 (0.230237)	kp_loss: 12.532844 (13.508728)	siammask_loss: 12.632741 (13.592866)	kp_avg_acc: 0.937500 (0.756430)
[2019-08-14 17:13:04,673-rk0-val_siamrcnn.py#277] Validation: [809/1899]	batch_time: 0.024832 (0.026818)	data_time: 0.000090 (0.000947)	rpn_cls_loss: 0.000233 (0.001754)	rpn_loc_loss: 0.079144 (0.068416)	kp_hp_loss: 1.085734 (0.845325)	kp_hm_hp_loss: 9.440042 (12.427373)	kp_hp_offset_loss: 0.298029 (0.230324)	kp_loss: 10.823805 (13.503026)	siammask_loss: 10.919010 (13.586872)	kp_avg_acc: 0.533333 (0.755348)
[2019-08-14 17:13:06,422-rk0-val_siamrcnn.py#277] Validation: [819/1899]	batch_time: 0.025098 (0.026794)	data_time: 0.000088 (0.000937)	rpn_cls_loss: 0.000239 (0.001736)	rpn_loc_loss: 0.043825 (0.068557)	kp_hp_loss: 0.828383 (0.845536)	kp_hm_hp_loss: 7.587406 (12.404387)	kp_hp_offset_loss: 0.185901 (0.230067)	kp_loss: 8.601689 (13.479996)	siammask_loss: 8.654518 (13.563993)	kp_avg_acc: 0.583333 (0.755032)
[2019-08-14 17:13:08,134-rk0-val_siamrcnn.py#277] Validation: [829/1899]	batch_time: 0.025070 (0.026770)	data_time: 0.000091 (0.000928)	rpn_cls_loss: 0.000100 (0.001734)	rpn_loc_loss: 0.090566 (0.068222)	kp_hp_loss: 1.170393 (0.846197)	kp_hm_hp_loss: 11.835961 (12.408015)	kp_hp_offset_loss: 0.250628 (0.230017)	kp_loss: 13.256983 (13.484231)	siammask_loss: 13.365762 (13.567826)	kp_avg_acc: 0.642857 (0.755101)
[2019-08-14 17:13:09,816-rk0-val_siamrcnn.py#277] Validation: [839/1899]	batch_time: 0.024577 (0.026745)	data_time: 0.000099 (0.000919)	rpn_cls_loss: 0.000160 (0.001716)	rpn_loc_loss: 0.147795 (0.068246)	kp_hp_loss: 1.000927 (0.845499)	kp_hm_hp_loss: 9.330852 (12.409574)	kp_hp_offset_loss: 0.207314 (0.230136)	kp_loss: 10.539093 (13.485210)	siammask_loss: 10.716607 (13.568816)	kp_avg_acc: 0.666667 (0.756512)
[2019-08-14 17:13:11,524-rk0-val_siamrcnn.py#277] Validation: [849/1899]	batch_time: 0.024612 (0.026727)	data_time: 0.000083 (0.000910)	rpn_cls_loss: 0.000184 (0.001698)	rpn_loc_loss: 0.064294 (0.067986)	kp_hp_loss: 1.268840 (0.843832)	kp_hm_hp_loss: 11.981957 (12.403948)	kp_hp_offset_loss: 0.216846 (0.230129)	kp_loss: 13.467643 (13.477909)	siammask_loss: 13.544980 (13.561185)	kp_avg_acc: 0.571429 (0.756966)
[2019-08-14 17:13:13,143-rk0-val_siamrcnn.py#277] Validation: [859/1899]	batch_time: 0.024589 (0.026703)	data_time: 0.000085 (0.000901)	rpn_cls_loss: 0.000089 (0.001680)	rpn_loc_loss: 0.125861 (0.067763)	kp_hp_loss: 2.790738 (0.843831)	kp_hm_hp_loss: 16.059637 (12.424328)	kp_hp_offset_loss: 0.271470 (0.230072)	kp_loss: 19.121845 (13.498230)	siammask_loss: 19.272966 (13.581221)	kp_avg_acc: 0.153846 (0.757342)
[2019-08-14 17:13:15,131-rk0-val_siamrcnn.py#277] Validation: [869/1899]	batch_time: 0.024613 (0.026681)	data_time: 0.000088 (0.000893)	rpn_cls_loss: 0.000345 (0.001666)	rpn_loc_loss: 0.056763 (0.067782)	kp_hp_loss: 0.850947 (0.847258)	kp_hm_hp_loss: 9.913935 (12.416626)	kp_hp_offset_loss: 0.234498 (0.230163)	kp_loss: 10.999378 (13.494043)	siammask_loss: 11.067840 (13.577045)	kp_avg_acc: 0.750000 (0.756386)
[2019-08-14 17:13:16,852-rk0-val_siamrcnn.py#277] Validation: [879/1899]	batch_time: 0.024562 (0.026659)	data_time: 0.000091 (0.000885)	rpn_cls_loss: 0.000211 (0.001649)	rpn_loc_loss: 0.018355 (0.067795)	kp_hp_loss: 0.408611 (0.844249)	kp_hm_hp_loss: 13.194310 (12.411695)	kp_hp_offset_loss: 0.229602 (0.230050)	kp_loss: 13.832522 (13.485990)	siammask_loss: 13.854758 (13.568991)	kp_avg_acc: 0.769231 (0.757289)
[2019-08-14 17:13:18,618-rk0-val_siamrcnn.py#277] Validation: [889/1899]	batch_time: 0.024503 (0.026638)	data_time: 0.000088 (0.000876)	rpn_cls_loss: 0.000348 (0.001634)	rpn_loc_loss: 0.031195 (0.067683)	kp_hp_loss: 2.702435 (0.845956)	kp_hm_hp_loss: 13.812500 (12.396996)	kp_hp_offset_loss: 0.236612 (0.230143)	kp_loss: 16.751547 (13.473089)	siammask_loss: 16.789330 (13.555940)	kp_avg_acc: 0.333333 (0.756594)
[2019-08-14 17:13:20,392-rk0-val_siamrcnn.py#277] Validation: [899/1899]	batch_time: 0.024815 (0.026619)	data_time: 0.000093 (0.000868)	rpn_cls_loss: 0.000199 (0.001624)	rpn_loc_loss: 0.024962 (0.067628)	kp_hp_loss: 0.584366 (0.844427)	kp_hm_hp_loss: 11.935717 (12.394104)	kp_hp_offset_loss: 0.292431 (0.230234)	kp_loss: 12.812513 (13.468761)	siammask_loss: 12.842668 (13.551535)	kp_avg_acc: 0.923077 (0.757630)
[2019-08-14 17:13:22,037-rk0-val_siamrcnn.py#277] Validation: [909/1899]	batch_time: 0.024658 (0.026600)	data_time: 0.000091 (0.000861)	rpn_cls_loss: 0.000113 (0.001616)	rpn_loc_loss: 0.014194 (0.067867)	kp_hp_loss: 0.523683 (0.845076)	kp_hm_hp_loss: 12.588139 (12.370696)	kp_hp_offset_loss: 0.241553 (0.230223)	kp_loss: 13.353374 (13.445990)	siammask_loss: 13.370521 (13.529044)	kp_avg_acc: 0.937500 (0.756451)
[2019-08-14 17:13:23,715-rk0-val_siamrcnn.py#277] Validation: [919/1899]	batch_time: 0.024551 (0.026580)	data_time: 0.000089 (0.000853)	rpn_cls_loss: 0.000151 (0.001615)	rpn_loc_loss: 0.039075 (0.067823)	kp_hp_loss: 1.279434 (0.846642)	kp_hm_hp_loss: 15.251781 (12.364823)	kp_hp_offset_loss: 0.196139 (0.229978)	kp_loss: 16.727352 (13.441438)	siammask_loss: 16.774393 (13.524439)	kp_avg_acc: 0.714286 (0.755535)
[2019-08-14 17:13:25,388-rk0-val_siamrcnn.py#277] Validation: [929/1899]	batch_time: 0.024470 (0.026577)	data_time: 0.000090 (0.000846)	rpn_cls_loss: 0.000437 (0.001607)	rpn_loc_loss: 0.089727 (0.068272)	kp_hp_loss: 0.684539 (0.850945)	kp_hm_hp_loss: 9.677349 (12.356336)	kp_hp_offset_loss: 0.199708 (0.230176)	kp_loss: 10.561596 (13.437453)	siammask_loss: 10.669704 (13.520984)	kp_avg_acc: 0.636364 (0.754586)
[2019-08-14 17:13:27,106-rk0-val_siamrcnn.py#277] Validation: [939/1899]	batch_time: 0.024835 (0.026563)	data_time: 0.000093 (0.000839)	rpn_cls_loss: 0.000156 (0.001592)	rpn_loc_loss: 0.036253 (0.068055)	kp_hp_loss: 0.411981 (0.850617)	kp_hm_hp_loss: 15.726666 (12.368793)	kp_hp_offset_loss: 0.186586 (0.230146)	kp_loss: 16.325233 (13.449551)	siammask_loss: 16.368893 (13.532807)	kp_avg_acc: 1.000000 (0.755480)
[2019-08-14 17:13:28,755-rk0-val_siamrcnn.py#277] Validation: [949/1899]	batch_time: 0.024589 (0.026545)	data_time: 0.000088 (0.000832)	rpn_cls_loss: 0.000171 (0.001596)	rpn_loc_loss: 0.100225 (0.068206)	kp_hp_loss: 0.731652 (0.849942)	kp_hm_hp_loss: 13.475560 (12.365781)	kp_hp_offset_loss: 0.264734 (0.230265)	kp_loss: 14.471947 (13.445982)	siammask_loss: 14.592388 (13.529423)	kp_avg_acc: 0.800000 (0.755732)
[2019-08-14 17:13:30,472-rk0-val_siamrcnn.py#277] Validation: [959/1899]	batch_time: 0.024644 (0.026529)	data_time: 0.000091 (0.000825)	rpn_cls_loss: 0.000157 (0.001582)	rpn_loc_loss: 0.021355 (0.068382)	kp_hp_loss: 0.942607 (0.851608)	kp_hm_hp_loss: 12.156918 (12.361413)	kp_hp_offset_loss: 0.290151 (0.230237)	kp_loss: 13.389676 (13.443251)	siammask_loss: 13.415460 (13.526888)	kp_avg_acc: 0.733333 (0.755174)
[2019-08-14 17:13:32,189-rk0-val_siamrcnn.py#277] Validation: [969/1899]	batch_time: 0.024465 (0.026509)	data_time: 0.000095 (0.000818)	rpn_cls_loss: 0.000116 (0.001569)	rpn_loc_loss: 0.035913 (0.068729)	kp_hp_loss: 0.551285 (0.855508)	kp_hm_hp_loss: 15.860673 (12.347838)	kp_hp_offset_loss: 0.245896 (0.230343)	kp_loss: 16.657852 (13.433685)	siammask_loss: 16.701063 (13.517724)	kp_avg_acc: 1.000000 (0.752945)
[2019-08-14 17:13:33,938-rk0-val_siamrcnn.py#277] Validation: [979/1899]	batch_time: 0.024865 (0.026495)	data_time: 0.000092 (0.000811)	rpn_cls_loss: 0.000212 (0.001554)	rpn_loc_loss: 0.036074 (0.068552)	kp_hp_loss: 0.677145 (0.853736)	kp_hm_hp_loss: 12.995032 (12.349546)	kp_hp_offset_loss: 0.264027 (0.230404)	kp_loss: 13.936204 (13.433680)	siammask_loss: 13.979705 (13.517492)	kp_avg_acc: 1.000000 (0.753871)
[2019-08-14 17:13:35,646-rk0-val_siamrcnn.py#277] Validation: [989/1899]	batch_time: 0.024605 (0.026477)	data_time: 0.000089 (0.000805)	rpn_cls_loss: 0.000182 (0.001541)	rpn_loc_loss: 0.060030 (0.068555)	kp_hp_loss: 0.369051 (0.854464)	kp_hm_hp_loss: 12.753939 (12.354706)	kp_hp_offset_loss: 0.208780 (0.230219)	kp_loss: 13.331769 (13.439384)	siammask_loss: 13.403987 (13.523186)	kp_avg_acc: 0.857143 (0.753439)
[2019-08-14 17:13:37,276-rk0-val_siamrcnn.py#277] Validation: [999/1899]	batch_time: 0.024479 (0.026459)	data_time: 0.000090 (0.000798)	rpn_cls_loss: 0.000284 (0.001529)	rpn_loc_loss: 0.034402 (0.068672)	kp_hp_loss: 0.635621 (0.851855)	kp_hm_hp_loss: 16.994434 (12.362877)	kp_hp_offset_loss: 0.308855 (0.230243)	kp_loss: 17.938911 (13.444968)	siammask_loss: 17.980478 (13.528899)	kp_avg_acc: 0.800000 (0.754449)
[2019-08-14 17:13:39,062-rk0-val_siamrcnn.py#277] Validation: [1009/1899]	batch_time: 0.024540 (0.026442)	data_time: 0.000100 (0.000792)	rpn_cls_loss: 0.000207 (0.001516)	rpn_loc_loss: 0.017643 (0.068485)	kp_hp_loss: 0.877541 (0.852639)	kp_hm_hp_loss: 13.910304 (12.358029)	kp_hp_offset_loss: 0.209281 (0.230260)	kp_loss: 14.997126 (13.440922)	siammask_loss: 15.018504 (13.524615)	kp_avg_acc: 0.923077 (0.754504)
[2019-08-14 17:13:40,766-rk0-val_siamrcnn.py#277] Validation: [1019/1899]	batch_time: 0.024646 (0.026430)	data_time: 0.000078 (0.000786)	rpn_cls_loss: 0.000146 (0.001503)	rpn_loc_loss: 0.022978 (0.068426)	kp_hp_loss: 0.417877 (0.853614)	kp_hm_hp_loss: 10.260421 (12.348168)	kp_hp_offset_loss: 0.193540 (0.230219)	kp_loss: 10.871838 (13.431994)	siammask_loss: 10.899557 (13.515602)	kp_avg_acc: 0.941176 (0.754802)
[2019-08-14 17:13:42,400-rk0-val_siamrcnn.py#277] Validation: [1029/1899]	batch_time: 0.024533 (0.026412)	data_time: 0.000091 (0.000780)	rpn_cls_loss: 0.000144 (0.001495)	rpn_loc_loss: 0.036064 (0.068729)	kp_hp_loss: 1.867010 (0.854992)	kp_hm_hp_loss: 8.963335 (12.357816)	kp_hp_offset_loss: 0.226355 (0.230307)	kp_loss: 11.056700 (13.443111)	siammask_loss: 11.100121 (13.527074)	kp_avg_acc: 0.166667 (0.754311)
[2019-08-14 17:13:44,072-rk0-val_siamrcnn.py#277] Validation: [1039/1899]	batch_time: 0.024637 (0.026395)	data_time: 0.000086 (0.000774)	rpn_cls_loss: 0.000201 (0.001485)	rpn_loc_loss: 0.188677 (0.068819)	kp_hp_loss: 0.501171 (0.856632)	kp_hm_hp_loss: 9.349238 (12.346638)	kp_hp_offset_loss: 0.202448 (0.230365)	kp_loss: 10.052857 (13.433630)	siammask_loss: 10.279471 (13.517692)	kp_avg_acc: 0.812500 (0.753980)
[2019-08-14 17:13:45,734-rk0-val_siamrcnn.py#277] Validation: [1049/1899]	batch_time: 0.024499 (0.026379)	data_time: 0.000091 (0.000768)	rpn_cls_loss: 0.000134 (0.001480)	rpn_loc_loss: 0.061796 (0.068789)	kp_hp_loss: 0.796063 (0.857217)	kp_hm_hp_loss: 10.998458 (12.340619)	kp_hp_offset_loss: 0.199002 (0.230288)	kp_loss: 11.993524 (13.428119)	siammask_loss: 12.067813 (13.512141)	kp_avg_acc: 0.818182 (0.753889)
[2019-08-14 17:13:47,376-rk0-val_siamrcnn.py#277] Validation: [1059/1899]	batch_time: 0.024582 (0.026363)	data_time: 0.000088 (0.000763)	rpn_cls_loss: 0.000139 (0.001468)	rpn_loc_loss: 0.067718 (0.068694)	kp_hp_loss: 0.549212 (0.855926)	kp_hm_hp_loss: 10.195165 (12.324018)	kp_hp_offset_loss: 0.199322 (0.230186)	kp_loss: 10.943698 (13.410123)	siammask_loss: 11.025098 (13.494020)	kp_avg_acc: 0.812500 (0.754536)
[2019-08-14 17:13:49,107-rk0-val_siamrcnn.py#277] Validation: [1069/1899]	batch_time: 0.024628 (0.026347)	data_time: 0.000090 (0.000757)	rpn_cls_loss: 0.000109 (0.001458)	rpn_loc_loss: 0.044216 (0.068700)	kp_hp_loss: 0.842773 (0.855000)	kp_hm_hp_loss: 13.387694 (12.318089)	kp_hp_offset_loss: 0.314143 (0.230230)	kp_loss: 14.544611 (13.403313)	siammask_loss: 14.597779 (13.487206)	kp_avg_acc: 0.923077 (0.755105)
[2019-08-14 17:13:50,777-rk0-val_siamrcnn.py#277] Validation: [1079/1899]	batch_time: 0.024594 (0.026331)	data_time: 0.000093 (0.000752)	rpn_cls_loss: 0.000104 (0.001446)	rpn_loc_loss: 0.116132 (0.069104)	kp_hp_loss: 1.974170 (0.859869)	kp_hm_hp_loss: 17.462292 (12.315453)	kp_hp_offset_loss: 0.235487 (0.230233)	kp_loss: 19.671949 (13.405548)	siammask_loss: 19.811411 (13.489916)	kp_avg_acc: 0.538462 (0.753647)
[2019-08-14 17:13:52,489-rk0-val_siamrcnn.py#277] Validation: [1089/1899]	batch_time: 0.024671 (0.026327)	data_time: 0.000096 (0.000746)	rpn_cls_loss: 0.000161 (0.001435)	rpn_loc_loss: 0.176580 (0.069428)	kp_hp_loss: 0.726872 (0.859742)	kp_hm_hp_loss: 12.038729 (12.307315)	kp_hp_offset_loss: 0.213001 (0.230128)	kp_loss: 12.978601 (13.397178)	siammask_loss: 13.190658 (13.481922)	kp_avg_acc: 0.823529 (0.753315)
[2019-08-14 17:13:54,318-rk0-val_siamrcnn.py#277] Validation: [1099/1899]	batch_time: 0.024575 (0.026326)	data_time: 0.000090 (0.000741)	rpn_cls_loss: 0.000192 (0.001423)	rpn_loc_loss: 0.098518 (0.069271)	kp_hp_loss: 2.762870 (0.862434)	kp_hm_hp_loss: 11.407566 (12.322897)	kp_hp_offset_loss: 0.288052 (0.230123)	kp_loss: 14.458488 (13.415445)	siammask_loss: 14.576900 (13.499991)	kp_avg_acc: 0.166667 (0.752776)
[2019-08-14 17:13:56,042-rk0-val_siamrcnn.py#277] Validation: [1109/1899]	batch_time: 0.024647 (0.026312)	data_time: 0.000091 (0.000736)	rpn_cls_loss: 0.000232 (0.001412)	rpn_loc_loss: 0.032303 (0.069180)	kp_hp_loss: 0.448154 (0.861222)	kp_hm_hp_loss: 13.062594 (12.325673)	kp_hp_offset_loss: 0.279301 (0.230072)	kp_loss: 13.790049 (13.416958)	siammask_loss: 13.829044 (13.501385)	kp_avg_acc: 0.900000 (0.753295)
[2019-08-14 17:13:57,735-rk0-val_siamrcnn.py#277] Validation: [1119/1899]	batch_time: 0.024503 (0.026298)	data_time: 0.000092 (0.000731)	rpn_cls_loss: 0.000145 (0.001401)	rpn_loc_loss: 0.084742 (0.069042)	kp_hp_loss: 1.573823 (0.859854)	kp_hm_hp_loss: 10.989150 (12.323988)	kp_hp_offset_loss: 0.235626 (0.229891)	kp_loss: 12.798599 (13.413723)	siammask_loss: 12.900434 (13.497974)	kp_avg_acc: 0.750000 (0.754028)
[2019-08-14 17:13:59,436-rk0-val_siamrcnn.py#277] Validation: [1129/1899]	batch_time: 0.024583 (0.026283)	data_time: 0.000091 (0.000726)	rpn_cls_loss: 0.000170 (0.001391)	rpn_loc_loss: 0.011301 (0.068954)	kp_hp_loss: 0.525833 (0.859671)	kp_hm_hp_loss: 10.539581 (12.311879)	kp_hp_offset_loss: 0.211961 (0.230037)	kp_loss: 11.277375 (13.401576)	siammask_loss: 11.291106 (13.485712)	kp_avg_acc: 1.000000 (0.753800)
[2019-08-14 17:14:01,127-rk0-val_siamrcnn.py#277] Validation: [1139/1899]	batch_time: 0.024580 (0.026269)	data_time: 0.000086 (0.000721)	rpn_cls_loss: 0.000171 (0.001381)	rpn_loc_loss: 0.161696 (0.068943)	kp_hp_loss: 0.734649 (0.859470)	kp_hm_hp_loss: 15.291573 (12.321044)	kp_hp_offset_loss: 0.205272 (0.230040)	kp_loss: 16.231491 (13.410543)	siammask_loss: 16.425697 (13.494654)	kp_avg_acc: 0.857143 (0.753892)
[2019-08-14 17:14:02,833-rk0-val_siamrcnn.py#277] Validation: [1149/1899]	batch_time: 0.024626 (0.026265)	data_time: 0.000089 (0.000716)	rpn_cls_loss: 0.000280 (0.001371)	rpn_loc_loss: 0.015861 (0.068858)	kp_hp_loss: 0.671392 (0.858826)	kp_hm_hp_loss: 15.867370 (12.318432)	kp_hp_offset_loss: 0.238529 (0.229890)	kp_loss: 16.777290 (13.407136)	siammask_loss: 16.796604 (13.491137)	kp_avg_acc: 0.769231 (0.754555)
[2019-08-14 17:14:04,510-rk0-val_siamrcnn.py#277] Validation: [1159/1899]	batch_time: 0.024662 (0.026251)	data_time: 0.000090 (0.000711)	rpn_cls_loss: 0.000224 (0.001376)	rpn_loc_loss: 0.109736 (0.069061)	kp_hp_loss: 0.682438 (0.858615)	kp_hm_hp_loss: 14.297938 (12.311779)	kp_hp_offset_loss: 0.275661 (0.229937)	kp_loss: 15.256039 (13.400318)	siammask_loss: 15.387945 (13.484570)	kp_avg_acc: 0.933333 (0.753953)
[2019-08-14 17:14:06,201-rk0-val_siamrcnn.py#277] Validation: [1169/1899]	batch_time: 0.024542 (0.026238)	data_time: 0.000091 (0.000707)	rpn_cls_loss: 0.000221 (0.001366)	rpn_loc_loss: 0.009705 (0.068910)	kp_hp_loss: 0.640358 (0.858804)	kp_hm_hp_loss: 13.661038 (12.322342)	kp_hp_offset_loss: 0.255731 (0.230052)	kp_loss: 14.557127 (13.411185)	siammask_loss: 14.568995 (13.495245)	kp_avg_acc: 0.818182 (0.753854)
[2019-08-14 17:14:07,910-rk0-val_siamrcnn.py#277] Validation: [1179/1899]	batch_time: 0.024559 (0.026224)	data_time: 0.000088 (0.000702)	rpn_cls_loss: 0.000209 (0.001357)	rpn_loc_loss: 0.030579 (0.068886)	kp_hp_loss: 0.710771 (0.858928)	kp_hm_hp_loss: 11.658178 (12.319027)	kp_hp_offset_loss: 0.281761 (0.230003)	kp_loss: 12.650709 (13.407943)	siammask_loss: 12.687613 (13.491966)	kp_avg_acc: 0.909091 (0.753987)
[2019-08-14 17:14:09,665-rk0-val_siamrcnn.py#277] Validation: [1189/1899]	batch_time: 0.024642 (0.026212)	data_time: 0.000092 (0.000698)	rpn_cls_loss: 0.000147 (0.001347)	rpn_loc_loss: 0.027561 (0.068859)	kp_hp_loss: 0.359046 (0.860213)	kp_hm_hp_loss: 12.789388 (12.318575)	kp_hp_offset_loss: 0.230614 (0.230079)	kp_loss: 13.379048 (13.408854)	siammask_loss: 13.412269 (13.492834)	kp_avg_acc: 0.941176 (0.753664)
[2019-08-14 17:14:11,354-rk0-val_siamrcnn.py#277] Validation: [1199/1899]	batch_time: 0.024558 (0.026214)	data_time: 0.000090 (0.000693)	rpn_cls_loss: 0.000193 (0.001344)	rpn_loc_loss: 0.061591 (0.068741)	kp_hp_loss: 0.357235 (0.859915)	kp_hm_hp_loss: 9.604788 (12.313808)	kp_hp_offset_loss: 0.236694 (0.229986)	kp_loss: 10.198717 (13.403695)	siammask_loss: 10.272820 (13.487530)	kp_avg_acc: 0.733333 (0.752900)
[2019-08-14 17:14:13,011-rk0-val_siamrcnn.py#277] Validation: [1209/1899]	batch_time: 0.024525 (0.026202)	data_time: 0.000092 (0.000689)	rpn_cls_loss: 0.000185 (0.001334)	rpn_loc_loss: 0.125293 (0.068729)	kp_hp_loss: 0.753745 (0.858929)	kp_hm_hp_loss: 10.678493 (12.314371)	kp_hp_offset_loss: 0.271117 (0.229948)	kp_loss: 11.703355 (13.403232)	siammask_loss: 11.853892 (13.487043)	kp_avg_acc: 0.461538 (0.753271)
[2019-08-14 17:14:15,075-rk0-val_siamrcnn.py#277] Validation: [1219/1899]	batch_time: 0.024523 (0.026189)	data_time: 0.000087 (0.000684)	rpn_cls_loss: 0.000164 (0.001325)	rpn_loc_loss: 0.033067 (0.068770)	kp_hp_loss: 0.430189 (0.857575)	kp_hm_hp_loss: 17.029928 (12.318795)	kp_hp_offset_loss: 0.236956 (0.229946)	kp_loss: 17.697073 (13.406300)	siammask_loss: 17.736917 (13.490152)	kp_avg_acc: 1.000000 (0.753193)
[2019-08-14 17:14:16,840-rk0-val_siamrcnn.py#277] Validation: [1229/1899]	batch_time: 0.024786 (0.026177)	data_time: 0.000088 (0.000680)	rpn_cls_loss: 0.000137 (0.001318)	rpn_loc_loss: 0.034820 (0.068655)	kp_hp_loss: 0.515155 (0.856533)	kp_hm_hp_loss: 11.897705 (12.317011)	kp_hp_offset_loss: 0.225466 (0.229984)	kp_loss: 12.638326 (13.403512)	siammask_loss: 12.680247 (13.487218)	kp_avg_acc: 0.937500 (0.753320)
[2019-08-14 17:14:18,582-rk0-val_siamrcnn.py#277] Validation: [1239/1899]	batch_time: 0.024657 (0.026165)	data_time: 0.000088 (0.000676)	rpn_cls_loss: 0.000210 (0.001310)	rpn_loc_loss: 0.223109 (0.068838)	kp_hp_loss: 1.283961 (0.856546)	kp_hm_hp_loss: 15.802332 (12.314163)	kp_hp_offset_loss: 0.238477 (0.229964)	kp_loss: 17.324768 (13.400657)	siammask_loss: 17.592709 (13.484573)	kp_avg_acc: 0.615385 (0.752933)
[2019-08-14 17:14:20,567-rk0-val_siamrcnn.py#277] Validation: [1249/1899]	batch_time: 0.024504 (0.026153)	data_time: 0.000081 (0.000672)	rpn_cls_loss: 0.000167 (0.001302)	rpn_loc_loss: 0.032087 (0.068822)	kp_hp_loss: 0.644651 (0.854673)	kp_hm_hp_loss: 12.357088 (12.315155)	kp_hp_offset_loss: 0.247449 (0.229945)	kp_loss: 13.249187 (13.399755)	siammask_loss: 13.287859 (13.483646)	kp_avg_acc: 1.000000 (0.753775)
[2019-08-14 17:14:22,333-rk0-val_siamrcnn.py#277] Validation: [1259/1899]	batch_time: 0.024581 (0.026141)	data_time: 0.000087 (0.000668)	rpn_cls_loss: 0.000872 (0.001293)	rpn_loc_loss: 0.232992 (0.068839)	kp_hp_loss: 1.807916 (0.856507)	kp_hm_hp_loss: 7.777766 (12.305238)	kp_hp_offset_loss: 0.266729 (0.229978)	kp_loss: 9.852411 (13.391705)	siammask_loss: 10.132874 (13.475608)	kp_avg_acc: 0.000000 (0.752811)
[2019-08-14 17:14:24,022-rk0-val_siamrcnn.py#277] Validation: [1269/1899]	batch_time: 0.024586 (0.026130)	data_time: 0.000095 (0.000664)	rpn_cls_loss: 0.000155 (0.001285)	rpn_loc_loss: 0.147676 (0.068867)	kp_hp_loss: 0.354755 (0.855035)	kp_hm_hp_loss: 10.952619 (12.312512)	kp_hp_offset_loss: 0.202221 (0.230003)	kp_loss: 11.509595 (13.397533)	siammask_loss: 11.686961 (13.481463)	kp_avg_acc: 0.857143 (0.753902)
[2019-08-14 17:14:25,768-rk0-val_siamrcnn.py#277] Validation: [1279/1899]	batch_time: 0.024549 (0.026119)	data_time: 0.000090 (0.000660)	rpn_cls_loss: 0.000278 (0.001281)	rpn_loc_loss: 0.099482 (0.069165)	kp_hp_loss: 0.834983 (0.856391)	kp_hm_hp_loss: 13.638674 (12.310535)	kp_hp_offset_loss: 0.278424 (0.230220)	kp_loss: 14.752080 (13.397128)	siammask_loss: 14.871737 (13.481411)	kp_avg_acc: 1.000000 (0.753449)
[2019-08-14 17:14:27,444-rk0-val_siamrcnn.py#277] Validation: [1289/1899]	batch_time: 0.024665 (0.026111)	data_time: 0.000096 (0.000656)	rpn_cls_loss: 0.000169 (0.001273)	rpn_loc_loss: 0.059606 (0.069125)	kp_hp_loss: 0.404297 (0.854633)	kp_hm_hp_loss: 12.792087 (12.313888)	kp_hp_offset_loss: 0.165184 (0.230110)	kp_loss: 13.361567 (13.398616)	siammask_loss: 13.433264 (13.482841)	kp_avg_acc: 0.941176 (0.754068)
[2019-08-14 17:14:29,188-rk0-val_siamrcnn.py#277] Validation: [1299/1899]	batch_time: 0.024609 (0.026100)	data_time: 0.000095 (0.000652)	rpn_cls_loss: 0.000165 (0.001265)	rpn_loc_loss: 0.254425 (0.069184)	kp_hp_loss: 1.151289 (0.852715)	kp_hm_hp_loss: 11.282580 (12.309885)	kp_hp_offset_loss: 0.299254 (0.230191)	kp_loss: 12.733124 (13.392778)	siammask_loss: 13.038599 (13.477064)	kp_avg_acc: 0.733333 (0.754621)
[2019-08-14 17:14:30,863-rk0-val_siamrcnn.py#277] Validation: [1309/1899]	batch_time: 0.024965 (0.026091)	data_time: 0.000091 (0.000649)	rpn_cls_loss: 0.000158 (0.001257)	rpn_loc_loss: 0.043937 (0.069104)	kp_hp_loss: 0.315455 (0.851348)	kp_hm_hp_loss: 12.137344 (12.303586)	kp_hp_offset_loss: 0.207933 (0.230202)	kp_loss: 12.660732 (13.385122)	siammask_loss: 12.713614 (13.469304)	kp_avg_acc: 0.714286 (0.754827)
[2019-08-14 17:14:32,604-rk0-val_siamrcnn.py#277] Validation: [1319/1899]	batch_time: 0.024658 (0.026083)	data_time: 0.000086 (0.000645)	rpn_cls_loss: 0.000165 (0.001248)	rpn_loc_loss: 0.023360 (0.068998)	kp_hp_loss: 0.690482 (0.849696)	kp_hm_hp_loss: 12.241451 (12.308453)	kp_hp_offset_loss: 0.237144 (0.230139)	kp_loss: 13.169077 (13.388275)	siammask_loss: 13.197273 (13.472322)	kp_avg_acc: 0.727273 (0.755184)
[2019-08-14 17:14:34,383-rk0-val_siamrcnn.py#277] Validation: [1329/1899]	batch_time: 0.024521 (0.026074)	data_time: 0.000089 (0.000642)	rpn_cls_loss: 0.000206 (0.001240)	rpn_loc_loss: 0.070064 (0.068890)	kp_hp_loss: 0.646908 (0.849331)	kp_hm_hp_loss: 15.191370 (12.311117)	kp_hp_offset_loss: 0.237265 (0.230125)	kp_loss: 16.075542 (13.390563)	siammask_loss: 16.159824 (13.474469)	kp_avg_acc: 0.818182 (0.755068)
[2019-08-14 17:14:36,095-rk0-val_siamrcnn.py#277] Validation: [1339/1899]	batch_time: 0.024573 (0.026065)	data_time: 0.000097 (0.000638)	rpn_cls_loss: 0.000244 (0.001233)	rpn_loc_loss: 0.022465 (0.068869)	kp_hp_loss: 0.535903 (0.848152)	kp_hm_hp_loss: 12.780214 (12.318378)	kp_hp_offset_loss: 0.262088 (0.230128)	kp_loss: 13.578205 (13.396652)	siammask_loss: 13.605407 (13.480526)	kp_avg_acc: 0.800000 (0.755530)
[2019-08-14 17:14:37,760-rk0-val_siamrcnn.py#277] Validation: [1349/1899]	batch_time: 0.024682 (0.026056)	data_time: 0.000089 (0.000635)	rpn_cls_loss: 0.000104 (0.001260)	rpn_loc_loss: 0.049973 (0.069322)	kp_hp_loss: 1.290351 (0.849861)	kp_hm_hp_loss: 11.501324 (12.312714)	kp_hp_offset_loss: 0.269357 (0.230137)	kp_loss: 13.061031 (13.392705)	siammask_loss: 13.121102 (13.477149)	kp_avg_acc: 0.818182 (0.755250)
[2019-08-14 17:14:39,488-rk0-val_siamrcnn.py#277] Validation: [1359/1899]	batch_time: 0.024746 (0.026048)	data_time: 0.000088 (0.000631)	rpn_cls_loss: 0.000163 (0.001325)	rpn_loc_loss: 0.120959 (0.069825)	kp_hp_loss: 0.486860 (0.850732)	kp_hm_hp_loss: 10.676549 (12.318042)	kp_hp_offset_loss: 0.210733 (0.230003)	kp_loss: 11.374142 (13.398771)	siammask_loss: 11.519455 (13.483882)	kp_avg_acc: 0.769231 (0.755271)
[2019-08-14 17:14:41,120-rk0-val_siamrcnn.py#277] Validation: [1369/1899]	batch_time: 0.024601 (0.026038)	data_time: 0.000092 (0.000628)	rpn_cls_loss: 0.000200 (0.001317)	rpn_loc_loss: 0.034408 (0.069740)	kp_hp_loss: 0.738905 (0.852443)	kp_hm_hp_loss: 13.141099 (12.311660)	kp_hp_offset_loss: 0.262835 (0.229998)	kp_loss: 14.142839 (13.394095)	siammask_loss: 14.184330 (13.479096)	kp_avg_acc: 0.846154 (0.754353)
[2019-08-14 17:14:42,779-rk0-val_siamrcnn.py#277] Validation: [1379/1899]	batch_time: 0.024587 (0.026030)	data_time: 0.000094 (0.000625)	rpn_cls_loss: 0.000147 (0.001309)	rpn_loc_loss: 0.053391 (0.069945)	kp_hp_loss: 2.482201 (0.853181)	kp_hm_hp_loss: 14.303751 (12.312279)	kp_hp_offset_loss: 0.222897 (0.229972)	kp_loss: 17.008848 (13.395427)	siammask_loss: 17.073065 (13.480666)	kp_avg_acc: 0.538462 (0.754622)
[2019-08-14 17:14:44,441-rk0-val_siamrcnn.py#277] Validation: [1389/1899]	batch_time: 0.024770 (0.026021)	data_time: 0.000090 (0.000622)	rpn_cls_loss: 0.000170 (0.001301)	rpn_loc_loss: 0.108571 (0.070034)	kp_hp_loss: 0.984714 (0.855119)	kp_hm_hp_loss: 9.942871 (12.307886)	kp_hp_offset_loss: 0.180537 (0.229999)	kp_loss: 11.108122 (13.392997)	siammask_loss: 11.238578 (13.478333)	kp_avg_acc: 0.933333 (0.754328)
[2019-08-14 17:14:46,112-rk0-val_siamrcnn.py#277] Validation: [1399/1899]	batch_time: 0.024739 (0.026012)	data_time: 0.000089 (0.000618)	rpn_cls_loss: 0.000189 (0.001293)	rpn_loc_loss: 0.033415 (0.070142)	kp_hp_loss: 0.567023 (0.854514)	kp_hm_hp_loss: 14.402909 (12.307708)	kp_hp_offset_loss: 0.197993 (0.229854)	kp_loss: 15.167925 (13.392073)	siammask_loss: 15.208212 (13.477528)	kp_avg_acc: 1.000000 (0.754465)
[2019-08-14 17:14:47,843-rk0-val_siamrcnn.py#277] Validation: [1409/1899]	batch_time: 0.024693 (0.026003)	data_time: 0.000095 (0.000615)	rpn_cls_loss: 0.000237 (0.001285)	rpn_loc_loss: 0.038272 (0.070063)	kp_hp_loss: 0.606820 (0.853809)	kp_hm_hp_loss: 13.798788 (12.303528)	kp_hp_offset_loss: 0.181630 (0.229891)	kp_loss: 14.587236 (13.387227)	siammask_loss: 14.633400 (13.472580)	kp_avg_acc: 1.000000 (0.755143)
[2019-08-14 17:14:49,510-rk0-val_siamrcnn.py#277] Validation: [1419/1899]	batch_time: 0.024615 (0.025995)	data_time: 0.000094 (0.000612)	rpn_cls_loss: 0.000104 (0.001290)	rpn_loc_loss: 0.044530 (0.070197)	kp_hp_loss: 1.342051 (0.854999)	kp_hm_hp_loss: 8.228305 (12.293822)	kp_hp_offset_loss: 0.179893 (0.229946)	kp_loss: 9.750249 (13.378765)	siammask_loss: 9.803789 (13.464284)	kp_avg_acc: 0.250000 (0.754228)
[2019-08-14 17:14:51,129-rk0-val_siamrcnn.py#277] Validation: [1429/1899]	batch_time: 0.024781 (0.025986)	data_time: 0.000090 (0.000609)	rpn_cls_loss: 0.000190 (0.001283)	rpn_loc_loss: 0.021651 (0.070164)	kp_hp_loss: 0.435863 (0.852713)	kp_hm_hp_loss: 12.861857 (12.297419)	kp_hp_offset_loss: 0.196775 (0.229912)	kp_loss: 13.494495 (13.380041)	siammask_loss: 13.520666 (13.465515)	kp_avg_acc: 1.000000 (0.755169)
[2019-08-14 17:14:52,826-rk0-val_siamrcnn.py#277] Validation: [1439/1899]	batch_time: 0.024679 (0.025978)	data_time: 0.000089 (0.000606)	rpn_cls_loss: 0.000128 (0.001275)	rpn_loc_loss: 0.024730 (0.069959)	kp_hp_loss: 0.304889 (0.852285)	kp_hm_hp_loss: 10.426272 (12.296552)	kp_hp_offset_loss: 0.234677 (0.229962)	kp_loss: 10.965838 (13.378798)	siammask_loss: 10.995642 (13.464016)	kp_avg_acc: 0.882353 (0.755569)
[2019-08-14 17:14:54,490-rk0-val_siamrcnn.py#277] Validation: [1449/1899]	batch_time: 0.024675 (0.025969)	data_time: 0.000093 (0.000603)	rpn_cls_loss: 0.000138 (0.001268)	rpn_loc_loss: 0.051455 (0.069759)	kp_hp_loss: 1.186166 (0.852370)	kp_hm_hp_loss: 11.551933 (12.289040)	kp_hp_offset_loss: 0.296971 (0.229913)	kp_loss: 13.035070 (13.371319)	siammask_loss: 13.096954 (13.456290)	kp_avg_acc: 0.750000 (0.755611)
[2019-08-14 17:14:56,162-rk0-val_siamrcnn.py#277] Validation: [1459/1899]	batch_time: 0.024679 (0.025961)	data_time: 0.000091 (0.000600)	rpn_cls_loss: 0.000145 (0.001261)	rpn_loc_loss: 0.085839 (0.069661)	kp_hp_loss: 0.518814 (0.850828)	kp_hm_hp_loss: 16.559673 (12.291774)	kp_hp_offset_loss: 0.240529 (0.229963)	kp_loss: 17.319017 (13.372560)	siammask_loss: 17.422169 (13.457407)	kp_avg_acc: 1.000000 (0.756390)
[2019-08-14 17:14:57,817-rk0-val_siamrcnn.py#277] Validation: [1469/1899]	batch_time: 0.024682 (0.025953)	data_time: 0.000090 (0.000597)	rpn_cls_loss: 0.000400 (0.001255)	rpn_loc_loss: 0.023739 (0.069620)	kp_hp_loss: 0.522908 (0.851701)	kp_hm_hp_loss: 15.623072 (12.290766)	kp_hp_offset_loss: 0.213816 (0.230027)	kp_loss: 16.359797 (13.372486)	siammask_loss: 16.388683 (13.457279)	kp_avg_acc: 0.875000 (0.755660)
[2019-08-14 17:14:59,484-rk0-val_siamrcnn.py#277] Validation: [1479/1899]	batch_time: 0.024561 (0.025944)	data_time: 0.000088 (0.000594)	rpn_cls_loss: 0.000433 (0.001248)	rpn_loc_loss: 0.046479 (0.069599)	kp_hp_loss: 0.895915 (0.854796)	kp_hm_hp_loss: 14.350577 (12.303597)	kp_hp_offset_loss: 0.274152 (0.230074)	kp_loss: 15.520644 (13.388461)	siammask_loss: 15.576851 (13.473221)	kp_avg_acc: 0.818182 (0.754909)
[2019-08-14 17:15:01,145-rk0-val_siamrcnn.py#277] Validation: [1489/1899]	batch_time: 0.024613 (0.025935)	data_time: 0.000091 (0.000591)	rpn_cls_loss: 0.000251 (0.001241)	rpn_loc_loss: 0.028012 (0.069592)	kp_hp_loss: 0.954742 (0.853923)	kp_hm_hp_loss: 8.106663 (12.301197)	kp_hp_offset_loss: 0.253724 (0.230005)	kp_loss: 9.315129 (13.385118)	siammask_loss: 9.348995 (13.469862)	kp_avg_acc: 0.846154 (0.755165)
[2019-08-14 17:15:02,919-rk0-val_siamrcnn.py#277] Validation: [1499/1899]	batch_time: 0.024702 (0.025928)	data_time: 0.000089 (0.000588)	rpn_cls_loss: 0.000369 (0.001236)	rpn_loc_loss: 0.030180 (0.069487)	kp_hp_loss: 0.431719 (0.853592)	kp_hm_hp_loss: 10.746137 (12.302332)	kp_hp_offset_loss: 0.199853 (0.230041)	kp_loss: 11.377708 (13.385957)	siammask_loss: 11.414293 (13.470572)	kp_avg_acc: 0.933333 (0.755373)
[2019-08-14 17:15:04,653-rk0-val_siamrcnn.py#277] Validation: [1509/1899]	batch_time: 0.026085 (0.025922)	data_time: 0.000091 (0.000586)	rpn_cls_loss: 0.000107 (0.001229)	rpn_loc_loss: 0.111602 (0.069409)	kp_hp_loss: 1.078081 (0.852906)	kp_hm_hp_loss: 10.592697 (12.304080)	kp_hp_offset_loss: 0.203089 (0.230063)	kp_loss: 11.873867 (13.387042)	siammask_loss: 12.007897 (13.471557)	kp_avg_acc: 0.928571 (0.755787)
[2019-08-14 17:15:06,313-rk0-val_siamrcnn.py#277] Validation: [1519/1899]	batch_time: 0.024566 (0.025913)	data_time: 0.000087 (0.000583)	rpn_cls_loss: 0.000400 (0.001223)	rpn_loc_loss: 0.015856 (0.069588)	kp_hp_loss: 0.806512 (0.854555)	kp_hm_hp_loss: 11.466211 (12.302890)	kp_hp_offset_loss: 0.216308 (0.230026)	kp_loss: 12.489032 (13.387465)	siammask_loss: 12.508459 (13.472188)	kp_avg_acc: 0.857143 (0.755271)
[2019-08-14 17:15:08,025-rk0-val_siamrcnn.py#277] Validation: [1529/1899]	batch_time: 0.024577 (0.025905)	data_time: 0.000090 (0.000580)	rpn_cls_loss: 0.000160 (0.001216)	rpn_loc_loss: 0.024615 (0.069719)	kp_hp_loss: 1.006647 (0.854845)	kp_hm_hp_loss: 11.600554 (12.304693)	kp_hp_offset_loss: 0.229289 (0.230023)	kp_loss: 12.836489 (13.389554)	siammask_loss: 12.866187 (13.474429)	kp_avg_acc: 0.705882 (0.754897)
[2019-08-14 17:15:09,741-rk0-val_siamrcnn.py#277] Validation: [1539/1899]	batch_time: 0.024578 (0.025898)	data_time: 0.000089 (0.000577)	rpn_cls_loss: 0.000100 (0.001210)	rpn_loc_loss: 0.059245 (0.069576)	kp_hp_loss: 0.779557 (0.854377)	kp_hm_hp_loss: 16.831669 (12.308088)	kp_hp_offset_loss: 0.261277 (0.229973)	kp_loss: 17.872501 (13.392435)	siammask_loss: 17.943695 (13.477129)	kp_avg_acc: 0.900000 (0.755218)
[2019-08-14 17:15:11,470-rk0-val_siamrcnn.py#277] Validation: [1549/1899]	batch_time: 0.024505 (0.025893)	data_time: 0.000087 (0.000575)	rpn_cls_loss: 0.008999 (0.001219)	rpn_loc_loss: 0.069798 (0.069632)	kp_hp_loss: 0.234632 (0.854596)	kp_hm_hp_loss: 10.274202 (12.297625)	kp_hp_offset_loss: 0.191120 (0.229945)	kp_loss: 10.699954 (13.382161)	siammask_loss: 10.792710 (13.466933)	kp_avg_acc: 0.700000 (0.754533)
[2019-08-14 17:15:13,123-rk0-val_siamrcnn.py#277] Validation: [1559/1899]	batch_time: 0.024585 (0.025885)	data_time: 0.000091 (0.000572)	rpn_cls_loss: 0.000203 (0.001212)	rpn_loc_loss: 0.034710 (0.069718)	kp_hp_loss: 2.044704 (0.854751)	kp_hm_hp_loss: 11.194946 (12.296646)	kp_hp_offset_loss: 0.281099 (0.229938)	kp_loss: 13.520750 (13.381331)	siammask_loss: 13.562606 (13.466201)	kp_avg_acc: 0.500000 (0.754847)
[2019-08-14 17:15:14,787-rk0-val_siamrcnn.py#277] Validation: [1569/1899]	batch_time: 0.024692 (0.025878)	data_time: 0.000091 (0.000570)	rpn_cls_loss: 0.000115 (0.001206)	rpn_loc_loss: 0.033824 (0.069553)	kp_hp_loss: 1.044303 (0.853296)	kp_hm_hp_loss: 9.108569 (12.293877)	kp_hp_offset_loss: 0.223938 (0.229970)	kp_loss: 10.376810 (13.377138)	siammask_loss: 10.417514 (13.461806)	kp_avg_acc: 0.533333 (0.755289)
[2019-08-14 17:15:16,505-rk0-val_siamrcnn.py#277] Validation: [1579/1899]	batch_time: 0.024629 (0.025871)	data_time: 0.000089 (0.000567)	rpn_cls_loss: 0.000510 (0.001234)	rpn_loc_loss: 0.089560 (0.069635)	kp_hp_loss: 0.770087 (0.853974)	kp_hm_hp_loss: 10.814170 (12.284442)	kp_hp_offset_loss: 0.222279 (0.230198)	kp_loss: 11.806536 (13.368607)	siammask_loss: 11.914517 (13.453402)	kp_avg_acc: 0.692308 (0.755267)
[2019-08-14 17:15:18,189-rk0-val_siamrcnn.py#277] Validation: [1589/1899]	batch_time: 0.024634 (0.025864)	data_time: 0.000090 (0.000564)	rpn_cls_loss: 0.000092 (0.001238)	rpn_loc_loss: 0.194349 (0.069765)	kp_hp_loss: 0.678337 (0.853200)	kp_hm_hp_loss: 7.779677 (12.280805)	kp_hp_offset_loss: 0.241579 (0.230255)	kp_loss: 8.699593 (13.364254)	siammask_loss: 8.932903 (13.449209)	kp_avg_acc: 0.428571 (0.755193)
[2019-08-14 17:15:19,909-rk0-val_siamrcnn.py#277] Validation: [1599/1899]	batch_time: 0.024557 (0.025856)	data_time: 0.000099 (0.000562)	rpn_cls_loss: 0.000200 (0.001232)	rpn_loc_loss: 0.090954 (0.069843)	kp_hp_loss: 0.354674 (0.852464)	kp_hm_hp_loss: 12.301821 (12.279213)	kp_hp_offset_loss: 0.223290 (0.230245)	kp_loss: 12.879786 (13.361912)	siammask_loss: 12.989130 (13.446955)	kp_avg_acc: 0.818182 (0.755203)
[2019-08-14 17:15:22,270-rk0-val_siamrcnn.py#277] Validation: [1609/1899]	batch_time: 0.024481 (0.025849)	data_time: 0.000071 (0.000559)	rpn_cls_loss: 0.000166 (0.001227)	rpn_loc_loss: 0.020390 (0.069790)	kp_hp_loss: 0.346195 (0.850542)	kp_hm_hp_loss: 13.818474 (12.280152)	kp_hp_offset_loss: 0.242000 (0.230283)	kp_loss: 14.406668 (13.360968)	siammask_loss: 14.431301 (13.445943)	kp_avg_acc: 0.750000 (0.755829)
[2019-08-14 17:15:24,116-rk0-val_siamrcnn.py#277] Validation: [1619/1899]	batch_time: 0.024506 (0.025843)	data_time: 0.000083 (0.000557)	rpn_cls_loss: 0.000320 (0.001220)	rpn_loc_loss: 0.136268 (0.069726)	kp_hp_loss: 1.834641 (0.851462)	kp_hm_hp_loss: 8.907299 (12.283829)	kp_hp_offset_loss: 0.277091 (0.230339)	kp_loss: 11.019031 (13.365619)	siammask_loss: 11.182872 (13.450510)	kp_avg_acc: 0.416667 (0.755796)
[2019-08-14 17:15:25,836-rk0-val_siamrcnn.py#277] Validation: [1629/1899]	batch_time: 0.024618 (0.025836)	data_time: 0.000088 (0.000554)	rpn_cls_loss: 0.000308 (0.001216)	rpn_loc_loss: 0.327760 (0.069985)	kp_hp_loss: 0.579753 (0.853725)	kp_hm_hp_loss: 13.969584 (12.283200)	kp_hp_offset_loss: 0.251350 (0.230372)	kp_loss: 14.800686 (13.367286)	siammask_loss: 15.194306 (13.452484)	kp_avg_acc: 0.636364 (0.754832)
[2019-08-14 17:15:27,575-rk0-val_siamrcnn.py#277] Validation: [1639/1899]	batch_time: 0.024684 (0.025839)	data_time: 0.000093 (0.000552)	rpn_cls_loss: 0.000196 (0.001210)	rpn_loc_loss: 0.102975 (0.070070)	kp_hp_loss: 0.961200 (0.852600)	kp_hm_hp_loss: 10.266478 (12.281647)	kp_hp_offset_loss: 0.192155 (0.230389)	kp_loss: 11.419832 (13.364626)	siammask_loss: 11.543598 (13.449919)	kp_avg_acc: 0.800000 (0.755426)
[2019-08-14 17:15:29,272-rk0-val_siamrcnn.py#277] Validation: [1649/1899]	batch_time: 0.024465 (0.025833)	data_time: 0.000092 (0.000550)	rpn_cls_loss: 0.000603 (0.001205)	rpn_loc_loss: 0.048197 (0.070295)	kp_hp_loss: 0.660672 (0.853063)	kp_hm_hp_loss: 9.941187 (12.282467)	kp_hp_offset_loss: 0.206549 (0.230423)	kp_loss: 10.808408 (13.365945)	siammask_loss: 10.866847 (13.451503)	kp_avg_acc: 0.727273 (0.754855)
[2019-08-14 17:15:30,967-rk0-val_siamrcnn.py#277] Validation: [1659/1899]	batch_time: 0.024742 (0.025826)	data_time: 0.000089 (0.000548)	rpn_cls_loss: 0.000518 (0.001199)	rpn_loc_loss: 0.036336 (0.070271)	kp_hp_loss: 0.899097 (0.854294)	kp_hm_hp_loss: 9.357841 (12.275785)	kp_hp_offset_loss: 0.182457 (0.230402)	kp_loss: 10.439394 (13.360474)	siammask_loss: 10.483516 (13.445996)	kp_avg_acc: 0.812500 (0.754458)
[2019-08-14 17:15:32,597-rk0-val_siamrcnn.py#277] Validation: [1669/1899]	batch_time: 0.024570 (0.025820)	data_time: 0.000092 (0.000545)	rpn_cls_loss: 0.000136 (0.001194)	rpn_loc_loss: 0.035099 (0.070175)	kp_hp_loss: 0.429235 (0.852272)	kp_hm_hp_loss: 14.555561 (12.280332)	kp_hp_offset_loss: 0.193200 (0.230403)	kp_loss: 15.177996 (13.362999)	siammask_loss: 15.220250 (13.448401)	kp_avg_acc: 0.916667 (0.755237)
[2019-08-14 17:15:34,293-rk0-val_siamrcnn.py#277] Validation: [1679/1899]	batch_time: 0.024563 (0.025814)	data_time: 0.000091 (0.000543)	rpn_cls_loss: 0.000116 (0.001191)	rpn_loc_loss: 0.114158 (0.070182)	kp_hp_loss: 0.833822 (0.851694)	kp_hm_hp_loss: 12.007918 (12.281128)	kp_hp_offset_loss: 0.241523 (0.230472)	kp_loss: 13.083262 (13.363285)	siammask_loss: 13.220367 (13.448693)	kp_avg_acc: 0.923077 (0.755340)
[2019-08-14 17:15:36,097-rk0-val_siamrcnn.py#277] Validation: [1689/1899]	batch_time: 0.024649 (0.025807)	data_time: 0.000084 (0.000541)	rpn_cls_loss: 0.000172 (0.001187)	rpn_loc_loss: 0.159747 (0.070167)	kp_hp_loss: 1.192714 (0.851837)	kp_hm_hp_loss: 13.547462 (12.274841)	kp_hp_offset_loss: 0.287874 (0.230472)	kp_loss: 15.028051 (13.357142)	siammask_loss: 15.219919 (13.442529)	kp_avg_acc: 0.687500 (0.754942)
[2019-08-14 17:15:37,866-rk0-val_siamrcnn.py#277] Validation: [1699/1899]	batch_time: 0.024577 (0.025801)	data_time: 0.000097 (0.000539)	rpn_cls_loss: 0.000314 (0.001183)	rpn_loc_loss: 0.039218 (0.070122)	kp_hp_loss: 2.469278 (0.852718)	kp_hm_hp_loss: 7.588931 (12.284644)	kp_hp_offset_loss: 0.318119 (0.230577)	kp_loss: 10.376328 (13.367934)	siammask_loss: 10.423703 (13.453260)	kp_avg_acc: 0.000000 (0.754912)
[2019-08-14 17:15:39,664-rk0-val_siamrcnn.py#277] Validation: [1709/1899]	batch_time: 0.024701 (0.025795)	data_time: 0.000094 (0.000536)	rpn_cls_loss: 0.000166 (0.001178)	rpn_loc_loss: 0.046783 (0.069981)	kp_hp_loss: 0.209857 (0.852088)	kp_hm_hp_loss: 13.632634 (12.299256)	kp_hp_offset_loss: 0.203499 (0.230685)	kp_loss: 14.045990 (13.382028)	siammask_loss: 14.102295 (13.467176)	kp_avg_acc: 0.823529 (0.755531)
[2019-08-14 17:15:41,384-rk0-val_siamrcnn.py#277] Validation: [1719/1899]	batch_time: 0.024632 (0.025788)	data_time: 0.000097 (0.000534)	rpn_cls_loss: 0.000152 (0.001172)	rpn_loc_loss: 0.067509 (0.069873)	kp_hp_loss: 0.378527 (0.851601)	kp_hm_hp_loss: 11.501994 (12.313228)	kp_hp_offset_loss: 0.234080 (0.230613)	kp_loss: 12.114601 (13.395444)	siammask_loss: 12.195764 (13.480455)	kp_avg_acc: 0.785714 (0.755957)
[2019-08-14 17:15:43,144-rk0-val_siamrcnn.py#277] Validation: [1729/1899]	batch_time: 0.024447 (0.025782)	data_time: 0.000088 (0.000532)	rpn_cls_loss: 0.000196 (0.001166)	rpn_loc_loss: 0.028040 (0.069971)	kp_hp_loss: 0.697963 (0.850850)	kp_hm_hp_loss: 11.482165 (12.311963)	kp_hp_offset_loss: 0.198564 (0.230577)	kp_loss: 12.378693 (13.393392)	siammask_loss: 12.412538 (13.478516)	kp_avg_acc: 0.800000 (0.756272)
[2019-08-14 17:15:44,885-rk0-val_siamrcnn.py#277] Validation: [1739/1899]	batch_time: 0.024570 (0.025776)	data_time: 0.000088 (0.000530)	rpn_cls_loss: 0.000795 (0.001166)	rpn_loc_loss: 0.350561 (0.070208)	kp_hp_loss: 0.605719 (0.850295)	kp_hm_hp_loss: 12.912047 (12.311012)	kp_hp_offset_loss: 0.220918 (0.230592)	kp_loss: 13.738685 (13.391901)	siammask_loss: 14.160153 (13.477309)	kp_avg_acc: 0.692308 (0.756393)
[2019-08-14 17:15:46,870-rk0-val_siamrcnn.py#277] Validation: [1749/1899]	batch_time: 0.024633 (0.025777)	data_time: 0.000106 (0.000528)	rpn_cls_loss: 0.000145 (0.001161)	rpn_loc_loss: 0.065629 (0.070228)	kp_hp_loss: 0.440342 (0.849118)	kp_hm_hp_loss: 11.423399 (12.325531)	kp_hp_offset_loss: 0.276855 (0.230681)	kp_loss: 12.140596 (13.405333)	siammask_loss: 12.219496 (13.490758)	kp_avg_acc: 1.000000 (0.756919)
[2019-08-14 17:15:48,593-rk0-val_siamrcnn.py#277] Validation: [1759/1899]	batch_time: 0.024591 (0.025772)	data_time: 0.000090 (0.000526)	rpn_cls_loss: 0.000366 (0.001155)	rpn_loc_loss: 0.064942 (0.070168)	kp_hp_loss: 0.344941 (0.848090)	kp_hm_hp_loss: 12.721139 (12.326521)	kp_hp_offset_loss: 0.226831 (0.230625)	kp_loss: 13.292911 (13.405239)	siammask_loss: 13.371207 (13.490587)	kp_avg_acc: 0.909091 (0.756849)
[2019-08-14 17:15:50,401-rk0-val_siamrcnn.py#277] Validation: [1769/1899]	batch_time: 0.024644 (0.025768)	data_time: 0.000085 (0.000524)	rpn_cls_loss: 0.000183 (0.001150)	rpn_loc_loss: 0.036030 (0.070223)	kp_hp_loss: 0.690998 (0.847866)	kp_hm_hp_loss: 11.740709 (12.327194)	kp_hp_offset_loss: 0.291776 (0.230640)	kp_loss: 12.723482 (13.405702)	siammask_loss: 12.766901 (13.491111)	kp_avg_acc: 0.800000 (0.756504)
[2019-08-14 17:15:52,105-rk0-val_siamrcnn.py#277] Validation: [1779/1899]	batch_time: 0.024620 (0.025763)	data_time: 0.000090 (0.000522)	rpn_cls_loss: 0.000175 (0.001145)	rpn_loc_loss: 0.089015 (0.070314)	kp_hp_loss: 1.116602 (0.848121)	kp_hm_hp_loss: 15.671963 (12.336085)	kp_hp_offset_loss: 0.243129 (0.230683)	kp_loss: 17.031694 (13.414890)	siammask_loss: 17.138687 (13.500403)	kp_avg_acc: 0.750000 (0.756545)
[2019-08-14 17:15:53,825-rk0-val_siamrcnn.py#277] Validation: [1789/1899]	batch_time: 0.024597 (0.025757)	data_time: 0.000086 (0.000520)	rpn_cls_loss: 0.000135 (0.001142)	rpn_loc_loss: 0.031928 (0.070264)	kp_hp_loss: 0.552813 (0.847544)	kp_hm_hp_loss: 12.602138 (12.334090)	kp_hp_offset_loss: 0.226658 (0.230634)	kp_loss: 13.381609 (13.412269)	siammask_loss: 13.420057 (13.497720)	kp_avg_acc: 1.000000 (0.756682)
[2019-08-14 17:15:55,565-rk0-val_siamrcnn.py#277] Validation: [1799/1899]	batch_time: 0.024637 (0.025751)	data_time: 0.000088 (0.000518)	rpn_cls_loss: 0.000135 (0.001137)	rpn_loc_loss: 0.072754 (0.070094)	kp_hp_loss: 0.295365 (0.846885)	kp_hm_hp_loss: 11.327354 (12.333494)	kp_hp_offset_loss: 0.209323 (0.230566)	kp_loss: 11.832043 (13.410946)	siammask_loss: 11.919482 (13.496189)	kp_avg_acc: 0.941176 (0.756945)
[2019-08-14 17:15:57,309-rk0-val_siamrcnn.py#277] Validation: [1809/1899]	batch_time: 0.024534 (0.025745)	data_time: 0.000089 (0.000516)	rpn_cls_loss: 0.000168 (0.001132)	rpn_loc_loss: 0.031399 (0.070057)	kp_hp_loss: 0.463194 (0.847229)	kp_hm_hp_loss: 17.057098 (12.331238)	kp_hp_offset_loss: 0.168633 (0.230527)	kp_loss: 17.688925 (13.408997)	siammask_loss: 17.726772 (13.494188)	kp_avg_acc: 1.000000 (0.756670)
[2019-08-14 17:15:59,032-rk0-val_siamrcnn.py#277] Validation: [1819/1899]	batch_time: 0.024784 (0.025739)	data_time: 0.000097 (0.000514)	rpn_cls_loss: 0.000178 (0.001127)	rpn_loc_loss: 0.053452 (0.069993)	kp_hp_loss: 0.219739 (0.846464)	kp_hm_hp_loss: 14.919849 (12.331626)	kp_hp_offset_loss: 0.163363 (0.230529)	kp_loss: 15.302951 (13.408623)	siammask_loss: 15.367272 (13.493731)	kp_avg_acc: 1.000000 (0.756928)
[2019-08-14 17:16:00,811-rk0-val_siamrcnn.py#277] Validation: [1829/1899]	batch_time: 0.024668 (0.025741)	data_time: 0.000086 (0.000512)	rpn_cls_loss: 0.000106 (0.001122)	rpn_loc_loss: 0.057231 (0.070104)	kp_hp_loss: 0.553480 (0.849676)	kp_hm_hp_loss: 11.027447 (12.329560)	kp_hp_offset_loss: 0.249518 (0.230481)	kp_loss: 11.830443 (13.409722)	siammask_loss: 11.899226 (13.494959)	kp_avg_acc: 0.823529 (0.756328)
[2019-08-14 17:16:02,595-rk0-val_siamrcnn.py#277] Validation: [1839/1899]	batch_time: 0.024585 (0.025735)	data_time: 0.000070 (0.000510)	rpn_cls_loss: 0.000139 (0.001117)	rpn_loc_loss: 0.046238 (0.070146)	kp_hp_loss: 1.658864 (0.849646)	kp_hm_hp_loss: 13.188223 (12.324553)	kp_hp_offset_loss: 0.224350 (0.230407)	kp_loss: 15.071438 (13.404611)	siammask_loss: 15.127063 (13.489895)	kp_avg_acc: 0.461538 (0.756164)
[2019-08-14 17:16:04,287-rk0-val_siamrcnn.py#277] Validation: [1849/1899]	batch_time: 0.024633 (0.025730)	data_time: 0.000086 (0.000508)	rpn_cls_loss: 0.000443 (0.001118)	rpn_loc_loss: 0.038250 (0.070123)	kp_hp_loss: 0.358816 (0.849080)	kp_hm_hp_loss: 12.245950 (12.329738)	kp_hp_offset_loss: 0.217423 (0.230423)	kp_loss: 12.822188 (13.409245)	siammask_loss: 12.868531 (13.494502)	kp_avg_acc: 1.000000 (0.756350)
[2019-08-14 17:16:06,038-rk0-val_siamrcnn.py#277] Validation: [1859/1899]	batch_time: 0.024544 (0.025724)	data_time: 0.000088 (0.000507)	rpn_cls_loss: 0.000112 (0.001114)	rpn_loc_loss: 0.025241 (0.070275)	kp_hp_loss: 0.610717 (0.849420)	kp_hm_hp_loss: 16.568590 (12.334710)	kp_hp_offset_loss: 0.261539 (0.230357)	kp_loss: 17.440847 (13.414489)	siammask_loss: 17.471249 (13.499924)	kp_avg_acc: 0.846154 (0.756209)
[2019-08-14 17:16:07,742-rk0-val_siamrcnn.py#277] Validation: [1869/1899]	batch_time: 0.024597 (0.025719)	data_time: 0.000089 (0.000505)	rpn_cls_loss: 0.000177 (0.001109)	rpn_loc_loss: 0.042130 (0.070228)	kp_hp_loss: 0.530027 (0.849621)	kp_hm_hp_loss: 16.017277 (12.338046)	kp_hp_offset_loss: 0.219399 (0.230353)	kp_loss: 16.766703 (13.418023)	siammask_loss: 16.817436 (13.503398)	kp_avg_acc: 1.000000 (0.756113)
[2019-08-14 17:16:09,552-rk0-val_siamrcnn.py#277] Validation: [1879/1899]	batch_time: 0.024580 (0.025714)	data_time: 0.000086 (0.000503)	rpn_cls_loss: 0.000211 (0.001104)	rpn_loc_loss: 0.052662 (0.070220)	kp_hp_loss: 0.787663 (0.849491)	kp_hm_hp_loss: 16.256748 (12.345365)	kp_hp_offset_loss: 0.211809 (0.230325)	kp_loss: 17.256220 (13.425185)	siammask_loss: 17.319626 (13.510544)	kp_avg_acc: 0.933333 (0.756082)
[2019-08-14 17:16:11,236-rk0-val_siamrcnn.py#277] Validation: [1889/1899]	batch_time: 0.024470 (0.025709)	data_time: 0.000090 (0.000501)	rpn_cls_loss: 0.000192 (0.001099)	rpn_loc_loss: 0.036497 (0.070097)	kp_hp_loss: 0.379730 (0.849473)	kp_hm_hp_loss: 12.794576 (12.344954)	kp_hp_offset_loss: 0.230058 (0.230325)	kp_loss: 13.404364 (13.424757)	siammask_loss: 13.448352 (13.509965)	kp_avg_acc: 1.000000 (0.756032)
[2019-08-14 18:13:49,528-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 18:13:49,537-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='snapshot_0811/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 18:13:49,559-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 18:13:49,559-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 18:13:49,678-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 18:13:53,289-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 18:13:53,324-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 18:13:53,391-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:13:53,391-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 18:13:53,393-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 18:13:53,459-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:13:53,459-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 18:13:53,460-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 18:13:53,474-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 18:13:53,651-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 18:13:53,653-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 18:13:53,656-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:13:53,656-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 18:13:53,656-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 18:13:53,659-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:13:53,660-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 18:13:53,660-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 18:14:38,997-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-14 18:14:38,998-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='snapshot_0811/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-14 18:14:38,999-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-14 18:14:39,000-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-14 18:14:39,002-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-14 18:14:41,841-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-14 18:14:41,876-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-14 18:14:41,943-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:14:41,943-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 18:14:41,945-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-14 18:14:42,011-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:14:42,012-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-14 18:14:42,012-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-14 18:14:42,013-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-14 18:14:42,105-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-14 18:14:42,107-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-14 18:14:42,110-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:14:42,110-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 18:14:42,111-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-14 18:14:42,114-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-14 18:14:42,114-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-14 18:14:42,114-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-14 18:15:00,436-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-14 18:15:02,546-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 18:15:02,548-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.downsample.1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked'}
[2019-08-14 18:15:02,548-rk0-load_helper.py# 14] missing keys:43
[2019-08-14 18:15:02,549-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.2.bn1.weight', 'layer4.2.bn1.running_mean', 'layer4.2.conv2.weight', 'layer4.2.bn2.bias', 'layer4.2.bn1.bias', 'layer4.1.bn2.running_var', 'layer4.0.bn1.running_var', 'layer4.2.conv1.weight', 'layer4.1.bn1.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.conv3.weight', 'layer4.0.downsample.0.weight', 'layer4.1.conv2.weight', 'layer4.0.bn3.bias', 'layer4.1.bn3.running_mean', 'layer4.2.bn2.weight', 'layer4.1.bn2.weight', 'layer4.0.bn1.weight', 'layer4.1.bn3.running_var', 'layer4.1.bn3.weight', 'layer4.0.conv3.weight', 'layer4.2.conv3.weight', 'layer4.2.bn2.running_var', 'layer4.2.bn3.running_mean', 'layer4.0.bn2.bias', 'layer4.1.bn1.running_mean', 'layer4.1.conv1.weight', 'layer4.2.bn3.running_var', 'layer4.0.bn1.bias', 'layer4.0.conv2.weight', 'layer4.0.bn2.running_var', 'layer4.0.conv1.weight', 'layer4.1.bn2.running_mean', 'layer4.0.downsample.1.weight', 'layer4.0.bn1.running_mean', 'layer4.0.bn3.weight', 'layer4.0.bn2.running_mean', 'layer4.0.downsample.1.running_mean', 'layer4.1.bn1.running_var', 'layer4.0.bn3.running_var', 'layer4.2.bn1.running_var', 'layer4.1.bn2.bias', 'layer4.0.downsample.1.bias', 'layer4.0.bn2.weight', 'layer4.1.bn3.bias', 'layer4.2.bn3.weight', 'layer4.2.bn3.bias', 'layer4.0.bn3.running_mean', 'layer4.1.bn1.bias', 'layer4.2.bn2.running_mean'}
[2019-08-14 18:15:02,549-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-14 18:15:02,550-rk0-load_helper.py# 18] used keys:215
[2019-08-14 18:15:02,584-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-14 18:15:02,587-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-14 18:15:02,804-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): ModulatedDeformConvPack(
        (conv_offset_mask): Conv2d(512, 54, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): ModulatedDeformConvPack(
        (conv_offset_mask): Conv2d(512, 54, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): ModulatedDeformConvPack(
        (conv_offset_mask): Conv2d(256, 54, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-14 18:15:02,808-rk0-load_helper.py# 40] load pretrained model from snapshot_0811/checkpoint_e99.pth
[2019-08-14 18:15:05,414-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-14 18:15:05,418-rk0-load_helper.py# 13] [Warning] missing keys: {'kp_model.deconv_layers_new.12.conv_offset_mask.weight', 'kp_model.deconv_layers_new.6.bias', 'kp_model.deconv_layers_new.6.conv_offset_mask.bias', 'kp_model.deconv_layers_new.12.bias', 'kp_model.deconv_layers_new.0.conv_offset_mask.weight', 'kp_model.deconv_layers_new.0.bias', 'kp_model.deconv_layers_new.12.conv_offset_mask.bias', 'kp_model.deconv_layers_new.6.conv_offset_mask.weight', 'kp_model.deconv_layers_new.0.conv_offset_mask.bias'}
[2019-08-14 18:15:05,419-rk0-load_helper.py# 14] missing keys:9
[2019-08-14 18:15:05,419-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'features.downsample_p4.downsample.1.running_var', 'features.features.layer4.0.bn1.weight', 'features.features.layer4.0.bn3.running_var', 'features.features.layer4.1.bn3.running_var', 'features.features.layer4.0.conv2.weight', 'features.features.layer4.1.bn2.running_mean', 'features.features.layer4.0.bn1.running_mean', 'features.features.layer4.2.bn2.weight', 'features.features.layer4.2.bn1.num_batches_tracked', 'features.features.layer4.2.bn3.num_batches_tracked', 'features.features.layer4.1.bn3.weight', 'features.downsample_p4.downsample.1.running_mean', 'features.features.layer4.1.conv3.weight', 'features.features.layer4.0.downsample.1.num_batches_tracked', 'features.features.layer4.0.bn2.num_batches_tracked', 'features.features.layer4.2.bn1.running_var', 'features.features.layer4.2.bn2.num_batches_tracked', 'features.features.layer4.2.bn2.running_mean', 'features.features.layer4.0.bn2.weight', 'features.features.layer4.2.bn3.running_var', 'features.features.layer4.0.bn3.running_mean', 'features.features.layer4.1.bn1.running_mean', 'features.features.layer4.1.bn1.running_var', 'features.features.layer4.0.downsample.1.running_var', 'features.features.layer4.1.bn2.bias', 'features.features.layer4.2.bn1.bias', 'features.features.layer4.0.bn3.weight', 'features.features.layer4.1.bn3.running_mean', 'features.features.layer4.2.bn2.running_var', 'features.features.layer4.1.bn2.running_var', 'features.features.layer4.1.conv1.weight', 'features.features.layer4.0.downsample.1.weight', 'features.features.layer4.1.bn2.weight', 'features.features.layer4.2.conv1.weight', 'features.features.layer4.0.bn2.bias', 'features.features.layer4.2.conv2.weight', 'features.features.layer4.1.bn1.bias', 'features.features.layer4.0.bn1.running_var', 'features.features.layer4.1.bn3.num_batches_tracked', 'features.features.layer4.0.bn1.bias', 'features.downsample_p4.downsample.1.num_batches_tracked', 'features.features.layer4.0.conv1.weight', 'features.features.layer4.0.downsample.1.bias', 'features.features.layer4.2.bn1.weight', 'features.downsample_p4.downsample.0.weight', 'features.features.layer4.2.bn3.bias', 'features.features.layer4.2.bn2.bias', 'features.features.layer4.1.bn3.bias', 'features.features.layer4.0.bn3.num_batches_tracked', 'features.features.layer4.1.bn2.num_batches_tracked', 'features.features.layer4.1.bn1.weight', 'features.features.layer4.2.bn3.running_mean', 'features.downsample_p4.downsample.1.weight', 'features.features.layer4.0.bn1.num_batches_tracked', 'features.features.layer4.0.downsample.0.weight', 'features.features.layer4.0.bn2.running_mean', 'features.features.layer4.2.bn3.weight', 'features.features.layer4.1.bn1.num_batches_tracked', 'features.features.layer4.0.bn3.bias', 'features.features.layer4.0.downsample.1.running_mean', 'features.features.layer4.0.conv3.weight', 'features.features.layer4.0.bn2.running_var', 'features.features.layer4.1.conv2.weight', 'features.features.layer4.2.bn1.running_mean', 'features.features.layer4.2.conv3.weight', 'features.downsample_p4.downsample.1.bias'}
[2019-08-14 18:15:05,420-rk0-load_helper.py# 17] unused checkpoint keys:66
[2019-08-14 18:15:05,420-rk0-load_helper.py# 18] used keys:372
[2019-08-14 18:15:05,525-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-14 18:15:10,932-rk0-val_siamrcnn.py#277] Validation: [9/1899]	batch_time: 0.022944 (0.244635)	data_time: 0.000095 (0.095619)	rpn_cls_loss: 0.000169 (0.000272)	rpn_loc_loss: 0.011016 (0.076290)	kp_hp_loss: 1.167152 (1.547602)	kp_hm_hp_loss: 6.550444 (6.714816)	kp_hp_offset_loss: 0.241224 (0.248419)	kp_loss: 7.958820 (8.510838)	siammask_loss: 7.972208 (8.602657)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:13,056-rk0-val_siamrcnn.py#277] Validation: [19/1899]	batch_time: 0.025973 (0.134083)	data_time: 0.000121 (0.047910)	rpn_cls_loss: 0.000133 (0.000235)	rpn_loc_loss: 0.052898 (0.072619)	kp_hp_loss: 2.278801 (1.595373)	kp_hm_hp_loss: 6.618496 (6.676028)	kp_hp_offset_loss: 0.239117 (0.244155)	kp_loss: 9.136415 (8.515556)	siammask_loss: 9.200026 (8.602935)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:14,829-rk0-val_siamrcnn.py#277] Validation: [29/1899]	batch_time: 0.025506 (0.097267)	data_time: 0.000129 (0.032003)	rpn_cls_loss: 0.000156 (0.000787)	rpn_loc_loss: 0.056730 (0.073013)	kp_hp_loss: 1.219577 (1.611217)	kp_hm_hp_loss: 6.321588 (6.628558)	kp_hp_offset_loss: 0.237003 (0.245140)	kp_loss: 7.778167 (8.484915)	siammask_loss: 7.846399 (8.573319)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:16,574-rk0-val_siamrcnn.py#277] Validation: [39/1899]	batch_time: 0.022760 (0.078816)	data_time: 0.000078 (0.024045)	rpn_cls_loss: 0.000165 (0.000646)	rpn_loc_loss: 0.040824 (0.073924)	kp_hp_loss: 1.051051 (1.607163)	kp_hm_hp_loss: 6.022239 (6.617587)	kp_hp_offset_loss: 0.268402 (0.243910)	kp_loss: 7.341692 (8.468658)	siammask_loss: 7.390846 (8.558014)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:18,382-rk0-val_siamrcnn.py#277] Validation: [49/1899]	batch_time: 0.022935 (0.067901)	data_time: 0.000088 (0.019269)	rpn_cls_loss: 0.000627 (0.000559)	rpn_loc_loss: 0.037050 (0.072931)	kp_hp_loss: 1.918274 (1.590602)	kp_hm_hp_loss: 6.746069 (6.619194)	kp_hp_offset_loss: 0.272554 (0.244716)	kp_loss: 8.936896 (8.454511)	siammask_loss: 8.981983 (8.542588)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:20,178-rk0-val_siamrcnn.py#277] Validation: [59/1899]	batch_time: 0.022863 (0.060475)	data_time: 0.000077 (0.016086)	rpn_cls_loss: 0.000184 (0.000500)	rpn_loc_loss: 0.022881 (0.074950)	kp_hp_loss: 1.448477 (1.622830)	kp_hm_hp_loss: 6.622006 (6.588390)	kp_hp_offset_loss: 0.241184 (0.242426)	kp_loss: 8.311666 (8.453646)	siammask_loss: 8.339309 (8.544086)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:21,989-rk0-val_siamrcnn.py#277] Validation: [69/1899]	batch_time: 0.024589 (0.055171)	data_time: 0.000126 (0.013815)	rpn_cls_loss: 0.000118 (0.000454)	rpn_loc_loss: 0.069217 (0.073160)	kp_hp_loss: 1.198444 (1.623945)	kp_hm_hp_loss: 6.954116 (6.594431)	kp_hp_offset_loss: 0.265158 (0.242635)	kp_loss: 8.417718 (8.461012)	siammask_loss: 8.500896 (8.549257)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:23,725-rk0-val_siamrcnn.py#277] Validation: [79/1899]	batch_time: 0.023927 (0.051186)	data_time: 0.000217 (0.012112)	rpn_cls_loss: 0.000128 (0.001102)	rpn_loc_loss: 0.102374 (0.074550)	kp_hp_loss: 1.178130 (1.633880)	kp_hm_hp_loss: 6.066284 (6.570294)	kp_hp_offset_loss: 0.242150 (0.244523)	kp_loss: 7.486564 (8.448698)	siammask_loss: 7.609540 (8.539261)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:25,471-rk0-val_siamrcnn.py#277] Validation: [89/1899]	batch_time: 0.022923 (0.048068)	data_time: 0.000088 (0.010785)	rpn_cls_loss: 0.000113 (0.001342)	rpn_loc_loss: 0.062251 (0.072080)	kp_hp_loss: 1.253323 (1.655708)	kp_hm_hp_loss: 6.877305 (6.585627)	kp_hp_offset_loss: 0.248102 (0.244478)	kp_loss: 8.378730 (8.485815)	siammask_loss: 8.453545 (8.573651)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:27,280-rk0-val_siamrcnn.py#277] Validation: [99/1899]	batch_time: 0.023034 (0.045575)	data_time: 0.000087 (0.009722)	rpn_cls_loss: 0.000171 (0.001274)	rpn_loc_loss: 0.040835 (0.074351)	kp_hp_loss: 0.997543 (1.653361)	kp_hm_hp_loss: 6.401027 (6.569165)	kp_hp_offset_loss: 0.224888 (0.244672)	kp_loss: 7.623458 (8.467200)	siammask_loss: 7.672631 (8.557694)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:29,380-rk0-val_siamrcnn.py#277] Validation: [109/1899]	batch_time: 0.022748 (0.043543)	data_time: 0.000109 (0.008854)	rpn_cls_loss: 0.000192 (0.001184)	rpn_loc_loss: 0.032046 (0.074701)	kp_hp_loss: 1.497680 (1.647790)	kp_hm_hp_loss: 7.258506 (6.603275)	kp_hp_offset_loss: 0.247447 (0.245327)	kp_loss: 9.003633 (8.496394)	siammask_loss: 9.042280 (8.587219)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:31,209-rk0-val_siamrcnn.py#277] Validation: [119/1899]	batch_time: 0.025179 (0.041848)	data_time: 0.000118 (0.008132)	rpn_cls_loss: 0.000175 (0.001161)	rpn_loc_loss: 0.073522 (0.074654)	kp_hp_loss: 2.024994 (1.657799)	kp_hm_hp_loss: 6.815976 (6.599660)	kp_hp_offset_loss: 0.250272 (0.246407)	kp_loss: 9.091243 (8.503869)	siammask_loss: 9.179644 (8.594614)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:33,021-rk0-val_siamrcnn.py#277] Validation: [129/1899]	batch_time: 0.024908 (0.040521)	data_time: 0.000089 (0.007519)	rpn_cls_loss: 0.000136 (0.001092)	rpn_loc_loss: 0.091092 (0.072642)	kp_hp_loss: 1.368710 (1.646228)	kp_hm_hp_loss: 6.459084 (6.593518)	kp_hp_offset_loss: 0.293861 (0.247799)	kp_loss: 8.121655 (8.487548)	siammask_loss: 8.231102 (8.575808)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:34,922-rk0-val_siamrcnn.py#277] Validation: [139/1899]	batch_time: 0.024854 (0.039454)	data_time: 0.000087 (0.006994)	rpn_cls_loss: 0.000423 (0.001040)	rpn_loc_loss: 0.114325 (0.072664)	kp_hp_loss: 3.272715 (1.641478)	kp_hm_hp_loss: 7.848262 (6.595107)	kp_hp_offset_loss: 0.245134 (0.246887)	kp_loss: 11.366111 (8.483473)	siammask_loss: 11.503724 (8.571710)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:36,739-rk0-val_siamrcnn.py#277] Validation: [149/1899]	batch_time: 0.025059 (0.038501)	data_time: 0.000093 (0.006539)	rpn_cls_loss: 0.000844 (0.000988)	rpn_loc_loss: 0.187054 (0.072997)	kp_hp_loss: 2.027919 (1.630848)	kp_hm_hp_loss: 5.529684 (6.586100)	kp_hp_offset_loss: 0.187274 (0.247022)	kp_loss: 7.744876 (8.463971)	siammask_loss: 7.970184 (8.552555)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:38,539-rk0-val_siamrcnn.py#277] Validation: [159/1899]	batch_time: 0.025017 (0.037677)	data_time: 0.000089 (0.006140)	rpn_cls_loss: 0.000733 (0.000942)	rpn_loc_loss: 0.076674 (0.074037)	kp_hp_loss: 1.219847 (1.618790)	kp_hm_hp_loss: 6.727608 (6.577145)	kp_hp_offset_loss: 0.241964 (0.247023)	kp_loss: 8.189420 (8.442960)	siammask_loss: 8.282162 (8.532745)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:40,762-rk0-val_siamrcnn.py#277] Validation: [169/1899]	batch_time: 0.026205 (0.036966)	data_time: 0.000087 (0.005788)	rpn_cls_loss: 0.000526 (0.000903)	rpn_loc_loss: 0.032319 (0.075036)	kp_hp_loss: 1.807778 (1.624047)	kp_hm_hp_loss: 6.817784 (6.586230)	kp_hp_offset_loss: 0.199059 (0.246808)	kp_loss: 8.824621 (8.457087)	siammask_loss: 8.863931 (8.548033)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:42,497-rk0-val_siamrcnn.py#277] Validation: [179/1899]	batch_time: 0.025078 (0.036354)	data_time: 0.000098 (0.005477)	rpn_cls_loss: 0.000129 (0.000904)	rpn_loc_loss: 0.066801 (0.074410)	kp_hp_loss: 2.089896 (1.609097)	kp_hm_hp_loss: 6.156209 (6.575326)	kp_hp_offset_loss: 0.240821 (0.246967)	kp_loss: 8.486926 (8.431392)	siammask_loss: 8.567217 (8.521587)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:44,288-rk0-val_siamrcnn.py#277] Validation: [189/1899]	batch_time: 0.024982 (0.035799)	data_time: 0.000092 (0.005198)	rpn_cls_loss: 0.000118 (0.001476)	rpn_loc_loss: 0.123488 (0.076937)	kp_hp_loss: 1.232566 (1.612854)	kp_hm_hp_loss: 6.700288 (6.582160)	kp_hp_offset_loss: 0.249769 (0.247758)	kp_loss: 8.182622 (8.442773)	siammask_loss: 8.330925 (8.536572)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:45,950-rk0-val_siamrcnn.py#277] Validation: [199/1899]	batch_time: 0.024965 (0.035259)	data_time: 0.000083 (0.004946)	rpn_cls_loss: 0.000123 (0.001416)	rpn_loc_loss: 0.027329 (0.075539)	kp_hp_loss: 1.176280 (1.600954)	kp_hm_hp_loss: 6.087848 (6.576940)	kp_hp_offset_loss: 0.218049 (0.248202)	kp_loss: 7.482177 (8.426097)	siammask_loss: 7.515094 (8.518159)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:47,729-rk0-val_siamrcnn.py#277] Validation: [209/1899]	batch_time: 0.025052 (0.034799)	data_time: 0.000091 (0.004719)	rpn_cls_loss: 0.000113 (0.001360)	rpn_loc_loss: 0.045748 (0.074431)	kp_hp_loss: 1.834828 (1.590737)	kp_hm_hp_loss: 6.371109 (6.572758)	kp_hp_offset_loss: 0.260364 (0.248246)	kp_loss: 8.466300 (8.411741)	siammask_loss: 8.521312 (8.502417)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:49,484-rk0-val_siamrcnn.py#277] Validation: [219/1899]	batch_time: 0.026197 (0.034384)	data_time: 0.000084 (0.004513)	rpn_cls_loss: 0.000204 (0.001309)	rpn_loc_loss: 0.062878 (0.072814)	kp_hp_loss: 1.206135 (1.586937)	kp_hm_hp_loss: 6.467932 (6.565877)	kp_hp_offset_loss: 0.252278 (0.247652)	kp_loss: 7.926345 (8.400468)	siammask_loss: 8.002003 (8.489152)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:51,217-rk0-val_siamrcnn.py#277] Validation: [229/1899]	batch_time: 0.025023 (0.034003)	data_time: 0.000089 (0.004325)	rpn_cls_loss: 0.000153 (0.001261)	rpn_loc_loss: 0.046314 (0.072107)	kp_hp_loss: 1.381634 (1.578199)	kp_hm_hp_loss: 6.558826 (6.565653)	kp_hp_offset_loss: 0.234722 (0.247049)	kp_loss: 8.175181 (8.390902)	siammask_loss: 8.230911 (8.478691)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:52,890-rk0-val_siamrcnn.py#277] Validation: [239/1899]	batch_time: 0.024878 (0.033637)	data_time: 0.000087 (0.004152)	rpn_cls_loss: 0.000156 (0.001217)	rpn_loc_loss: 0.095285 (0.071625)	kp_hp_loss: 0.947873 (1.579360)	kp_hm_hp_loss: 6.023304 (6.568416)	kp_hp_offset_loss: 0.259320 (0.246982)	kp_loss: 7.230497 (8.394759)	siammask_loss: 7.344995 (8.481925)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:54,545-rk0-val_siamrcnn.py#277] Validation: [249/1899]	batch_time: 0.024920 (0.033299)	data_time: 0.000082 (0.003992)	rpn_cls_loss: 0.000266 (0.001180)	rpn_loc_loss: 0.140695 (0.071860)	kp_hp_loss: 1.136898 (1.578816)	kp_hm_hp_loss: 6.392839 (6.566004)	kp_hp_offset_loss: 0.243602 (0.246840)	kp_loss: 7.773340 (8.391660)	siammask_loss: 7.942440 (8.479072)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:56,182-rk0-val_siamrcnn.py#277] Validation: [259/1899]	batch_time: 0.025337 (0.033002)	data_time: 0.000083 (0.003845)	rpn_cls_loss: 0.000152 (0.001148)	rpn_loc_loss: 0.064420 (0.073331)	kp_hp_loss: 1.577993 (1.580163)	kp_hm_hp_loss: 6.295362 (6.566427)	kp_hp_offset_loss: 0.248159 (0.246602)	kp_loss: 8.121513 (8.393192)	siammask_loss: 8.198970 (8.482337)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:57,891-rk0-val_siamrcnn.py#277] Validation: [269/1899]	batch_time: 0.025022 (0.032718)	data_time: 0.000087 (0.003710)	rpn_cls_loss: 0.000090 (0.001112)	rpn_loc_loss: 0.023280 (0.073852)	kp_hp_loss: 3.127615 (1.588378)	kp_hm_hp_loss: 6.919730 (6.577640)	kp_hp_offset_loss: 0.227551 (0.246542)	kp_loss: 10.274897 (8.412561)	siammask_loss: 10.302922 (8.502295)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:15:59,598-rk0-val_siamrcnn.py#277] Validation: [279/1899]	batch_time: 0.025001 (0.032462)	data_time: 0.000090 (0.003583)	rpn_cls_loss: 0.000392 (0.001090)	rpn_loc_loss: 0.127558 (0.073826)	kp_hp_loss: 1.460106 (1.585343)	kp_hm_hp_loss: 6.274163 (6.580349)	kp_hp_offset_loss: 0.251633 (0.246349)	kp_loss: 7.985902 (8.412040)	siammask_loss: 8.139364 (8.501723)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:01,290-rk0-val_siamrcnn.py#277] Validation: [289/1899]	batch_time: 0.026711 (0.032224)	data_time: 0.000099 (0.003466)	rpn_cls_loss: 0.000197 (0.001059)	rpn_loc_loss: 0.056407 (0.074173)	kp_hp_loss: 1.840360 (1.589367)	kp_hm_hp_loss: 6.331353 (6.578503)	kp_hp_offset_loss: 0.263222 (0.246769)	kp_loss: 8.434935 (8.414639)	siammask_loss: 8.502820 (8.504706)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:02,938-rk0-val_siamrcnn.py#277] Validation: [299/1899]	batch_time: 0.025016 (0.031985)	data_time: 0.000093 (0.003356)	rpn_cls_loss: 0.000183 (0.001031)	rpn_loc_loss: 0.031146 (0.073703)	kp_hp_loss: 1.786610 (1.584276)	kp_hm_hp_loss: 6.497946 (6.575392)	kp_hp_offset_loss: 0.221495 (0.246559)	kp_loss: 8.506051 (8.406227)	siammask_loss: 8.543610 (8.495703)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:04,629-rk0-val_siamrcnn.py#277] Validation: [309/1899]	batch_time: 0.024945 (0.031767)	data_time: 0.000081 (0.003253)	rpn_cls_loss: 0.000381 (0.001005)	rpn_loc_loss: 0.097822 (0.073639)	kp_hp_loss: 1.098828 (1.583658)	kp_hm_hp_loss: 6.330022 (6.575135)	kp_hp_offset_loss: 0.232181 (0.246549)	kp_loss: 7.661032 (8.405341)	siammask_loss: 7.778799 (8.494715)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:06,303-rk0-val_siamrcnn.py#277] Validation: [319/1899]	batch_time: 0.025070 (0.031561)	data_time: 0.000086 (0.003156)	rpn_cls_loss: 0.000184 (0.000986)	rpn_loc_loss: 0.028362 (0.073460)	kp_hp_loss: 1.708081 (1.583240)	kp_hm_hp_loss: 6.794814 (6.579839)	kp_hp_offset_loss: 0.217069 (0.246625)	kp_loss: 8.719963 (8.409702)	siammask_loss: 8.754182 (8.498842)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:08,008-rk0-val_siamrcnn.py#277] Validation: [329/1899]	batch_time: 0.024856 (0.031363)	data_time: 0.000103 (0.003066)	rpn_cls_loss: 0.000214 (0.000962)	rpn_loc_loss: 0.092654 (0.072545)	kp_hp_loss: 1.322369 (1.575098)	kp_hm_hp_loss: 6.217155 (6.572499)	kp_hp_offset_loss: 0.240667 (0.246487)	kp_loss: 7.780191 (8.394083)	siammask_loss: 7.891591 (8.482102)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:09,716-rk0-val_siamrcnn.py#277] Validation: [339/1899]	batch_time: 0.027097 (0.031203)	data_time: 0.000096 (0.002981)	rpn_cls_loss: 0.000639 (0.000942)	rpn_loc_loss: 0.097043 (0.072702)	kp_hp_loss: 1.698139 (1.572969)	kp_hm_hp_loss: 6.625768 (6.570348)	kp_hp_offset_loss: 0.264878 (0.246624)	kp_loss: 8.588785 (8.389940)	siammask_loss: 8.705875 (8.478127)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:11,390-rk0-val_siamrcnn.py#277] Validation: [349/1899]	batch_time: 0.024967 (0.031031)	data_time: 0.000086 (0.002901)	rpn_cls_loss: 0.000173 (0.000920)	rpn_loc_loss: 0.021872 (0.072697)	kp_hp_loss: 1.112072 (1.575771)	kp_hm_hp_loss: 6.741416 (6.577581)	kp_hp_offset_loss: 0.237155 (0.246702)	kp_loss: 8.090643 (8.400053)	siammask_loss: 8.117063 (8.488213)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:13,068-rk0-val_siamrcnn.py#277] Validation: [359/1899]	batch_time: 0.025050 (0.030866)	data_time: 0.000087 (0.002824)	rpn_cls_loss: 0.000162 (0.000901)	rpn_loc_loss: 0.126507 (0.073361)	kp_hp_loss: 2.365865 (1.585933)	kp_hm_hp_loss: 6.210824 (6.573481)	kp_hp_offset_loss: 0.206145 (0.246951)	kp_loss: 8.782834 (8.406363)	siammask_loss: 8.934804 (8.495300)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:14,770-rk0-val_siamrcnn.py#277] Validation: [369/1899]	batch_time: 0.025918 (0.030714)	data_time: 0.000167 (0.002753)	rpn_cls_loss: 0.000154 (0.000884)	rpn_loc_loss: 0.084136 (0.072836)	kp_hp_loss: 1.060164 (1.588198)	kp_hm_hp_loss: 7.105544 (6.570078)	kp_hp_offset_loss: 0.266329 (0.246763)	kp_loss: 8.432036 (8.405034)	siammask_loss: 8.533153 (8.493325)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:16,453-rk0-val_siamrcnn.py#277] Validation: [379/1899]	batch_time: 0.025233 (0.030570)	data_time: 0.000092 (0.002685)	rpn_cls_loss: 0.000255 (0.000866)	rpn_loc_loss: 0.130110 (0.072754)	kp_hp_loss: 1.606963 (1.591245)	kp_hm_hp_loss: 6.464578 (6.572501)	kp_hp_offset_loss: 0.286246 (0.246416)	kp_loss: 8.357787 (8.410157)	siammask_loss: 8.514174 (8.498332)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:18,076-rk0-val_siamrcnn.py#277] Validation: [389/1899]	batch_time: 0.025115 (0.030428)	data_time: 0.000083 (0.002620)	rpn_cls_loss: 0.000174 (0.000849)	rpn_loc_loss: 0.064938 (0.072505)	kp_hp_loss: 1.219836 (1.592275)	kp_hm_hp_loss: 6.104371 (6.579440)	kp_hp_offset_loss: 0.221546 (0.246457)	kp_loss: 7.545752 (8.418166)	siammask_loss: 7.623852 (8.506027)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:19,759-rk0-val_siamrcnn.py#277] Validation: [399/1899]	batch_time: 0.024899 (0.030306)	data_time: 0.000092 (0.002559)	rpn_cls_loss: 0.000112 (0.000833)	rpn_loc_loss: 0.031309 (0.073021)	kp_hp_loss: 1.404317 (1.591007)	kp_hm_hp_loss: 7.069176 (6.574371)	kp_hp_offset_loss: 0.315684 (0.246874)	kp_loss: 8.789178 (8.412247)	siammask_loss: 8.826861 (8.500711)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:21,453-rk0-val_siamrcnn.py#277] Validation: [409/1899]	batch_time: 0.024944 (0.030177)	data_time: 0.000088 (0.002501)	rpn_cls_loss: 0.000130 (0.000818)	rpn_loc_loss: 0.107904 (0.072805)	kp_hp_loss: 1.485471 (1.594686)	kp_hm_hp_loss: 6.832977 (6.574016)	kp_hp_offset_loss: 0.235375 (0.246877)	kp_loss: 8.553823 (8.415573)	siammask_loss: 8.683438 (8.503764)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:23,135-rk0-val_siamrcnn.py#277] Validation: [419/1899]	batch_time: 0.024960 (0.030059)	data_time: 0.000089 (0.002445)	rpn_cls_loss: 0.000096 (0.000809)	rpn_loc_loss: 0.104930 (0.072807)	kp_hp_loss: 1.272617 (1.594280)	kp_hm_hp_loss: 6.533758 (6.577489)	kp_hp_offset_loss: 0.197184 (0.247205)	kp_loss: 8.003558 (8.418968)	siammask_loss: 8.129569 (8.507152)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:24,836-rk0-val_siamrcnn.py#277] Validation: [429/1899]	batch_time: 0.024962 (0.029974)	data_time: 0.000088 (0.002392)	rpn_cls_loss: 0.001104 (0.000801)	rpn_loc_loss: 0.106873 (0.073091)	kp_hp_loss: 2.124038 (1.595271)	kp_hm_hp_loss: 6.181955 (6.576691)	kp_hp_offset_loss: 0.227857 (0.247035)	kp_loss: 8.533850 (8.418992)	siammask_loss: 8.663201 (8.507507)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:26,489-rk0-val_siamrcnn.py#277] Validation: [439/1899]	batch_time: 0.024820 (0.029862)	data_time: 0.000089 (0.002341)	rpn_cls_loss: 0.000158 (0.000787)	rpn_loc_loss: 0.015741 (0.073143)	kp_hp_loss: 1.310161 (1.592227)	kp_hm_hp_loss: 7.116393 (6.579716)	kp_hp_offset_loss: 0.243333 (0.246919)	kp_loss: 8.669887 (8.418857)	siammask_loss: 8.688933 (8.507422)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:28,145-rk0-val_siamrcnn.py#277] Validation: [449/1899]	batch_time: 0.024933 (0.029760)	data_time: 0.000087 (0.002293)	rpn_cls_loss: 0.000288 (0.000776)	rpn_loc_loss: 0.088033 (0.073272)	kp_hp_loss: 1.803333 (1.595032)	kp_hm_hp_loss: 6.217054 (6.582471)	kp_hp_offset_loss: 0.253069 (0.246805)	kp_loss: 8.273457 (8.424303)	siammask_loss: 8.379385 (8.513011)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:29,830-rk0-val_siamrcnn.py#277] Validation: [459/1899]	batch_time: 0.024806 (0.029659)	data_time: 0.000089 (0.002247)	rpn_cls_loss: 0.000273 (0.000766)	rpn_loc_loss: 0.087676 (0.073396)	kp_hp_loss: 1.668172 (1.597144)	kp_hm_hp_loss: 6.951354 (6.588709)	kp_hp_offset_loss: 0.256001 (0.246752)	kp_loss: 8.875527 (8.432600)	siammask_loss: 8.981012 (8.521447)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:31,484-rk0-val_siamrcnn.py#277] Validation: [469/1899]	batch_time: 0.025013 (0.029565)	data_time: 0.000085 (0.002202)	rpn_cls_loss: 0.000256 (0.000753)	rpn_loc_loss: 0.170103 (0.073824)	kp_hp_loss: 1.379447 (1.603465)	kp_hm_hp_loss: 6.070054 (6.585290)	kp_hp_offset_loss: 0.213111 (0.246563)	kp_loss: 7.662611 (8.435313)	siammask_loss: 7.866991 (8.524660)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:33,195-rk0-val_siamrcnn.py#277] Validation: [479/1899]	batch_time: 0.024891 (0.029484)	data_time: 0.000096 (0.002160)	rpn_cls_loss: 0.000143 (0.000742)	rpn_loc_loss: 0.035845 (0.073426)	kp_hp_loss: 1.198797 (1.603553)	kp_hm_hp_loss: 7.201461 (6.587196)	kp_hp_offset_loss: 0.229547 (0.246746)	kp_loss: 8.629806 (8.437490)	siammask_loss: 8.672963 (8.526348)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:34,882-rk0-val_siamrcnn.py#277] Validation: [489/1899]	batch_time: 0.024974 (0.029396)	data_time: 0.000093 (0.002119)	rpn_cls_loss: 0.001661 (0.000740)	rpn_loc_loss: 0.022602 (0.073714)	kp_hp_loss: 1.303838 (1.602769)	kp_hm_hp_loss: 6.408043 (6.582721)	kp_hp_offset_loss: 0.289237 (0.246908)	kp_loss: 8.001118 (8.432394)	siammask_loss: 8.029902 (8.521594)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:36,579-rk0-val_siamrcnn.py#277] Validation: [499/1899]	batch_time: 0.024913 (0.029308)	data_time: 0.000087 (0.002080)	rpn_cls_loss: 0.000127 (0.000734)	rpn_loc_loss: 0.040028 (0.073991)	kp_hp_loss: 1.168390 (1.602847)	kp_hm_hp_loss: 7.175318 (6.583242)	kp_hp_offset_loss: 0.283032 (0.247027)	kp_loss: 8.626740 (8.433113)	siammask_loss: 8.674899 (8.522640)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:38,229-rk0-val_siamrcnn.py#277] Validation: [509/1899]	batch_time: 0.025057 (0.029226)	data_time: 0.000090 (0.002042)	rpn_cls_loss: 0.000180 (0.000805)	rpn_loc_loss: 0.157475 (0.074943)	kp_hp_loss: 1.834451 (1.611428)	kp_hm_hp_loss: 6.345850 (6.585228)	kp_hp_offset_loss: 0.250651 (0.247241)	kp_loss: 8.430951 (8.443894)	siammask_loss: 8.620101 (8.534634)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:39,851-rk0-val_siamrcnn.py#277] Validation: [519/1899]	batch_time: 0.024871 (0.029145)	data_time: 0.000086 (0.002006)	rpn_cls_loss: 0.000364 (0.000794)	rpn_loc_loss: 0.132675 (0.074892)	kp_hp_loss: 2.657774 (1.611276)	kp_hm_hp_loss: 6.265202 (6.583213)	kp_hp_offset_loss: 0.249101 (0.246802)	kp_loss: 9.172077 (8.441289)	siammask_loss: 9.331652 (8.531956)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:41,935-rk0-val_siamrcnn.py#277] Validation: [529/1899]	batch_time: 0.026966 (0.029071)	data_time: 0.000086 (0.001972)	rpn_cls_loss: 0.000154 (0.000782)	rpn_loc_loss: 0.065559 (0.074895)	kp_hp_loss: 1.128493 (1.610814)	kp_hm_hp_loss: 6.905432 (6.582000)	kp_hp_offset_loss: 0.214852 (0.246692)	kp_loss: 8.248775 (8.439504)	siammask_loss: 8.327600 (8.530163)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:43,585-rk0-val_siamrcnn.py#277] Validation: [539/1899]	batch_time: 0.024969 (0.028996)	data_time: 0.000089 (0.001938)	rpn_cls_loss: 0.000167 (0.000772)	rpn_loc_loss: 0.056910 (0.074369)	kp_hp_loss: 1.551653 (1.607720)	kp_hm_hp_loss: 7.342949 (6.580957)	kp_hp_offset_loss: 0.243043 (0.246698)	kp_loss: 9.137646 (8.435374)	siammask_loss: 9.206104 (8.525393)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:45,232-rk0-val_siamrcnn.py#277] Validation: [549/1899]	batch_time: 0.025058 (0.028924)	data_time: 0.000090 (0.001906)	rpn_cls_loss: 0.000177 (0.000764)	rpn_loc_loss: 0.096871 (0.074040)	kp_hp_loss: 1.527057 (1.606825)	kp_hm_hp_loss: 6.807874 (6.580368)	kp_hp_offset_loss: 0.262916 (0.246778)	kp_loss: 8.597847 (8.433968)	siammask_loss: 8.714270 (8.523584)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:46,863-rk0-val_siamrcnn.py#277] Validation: [559/1899]	batch_time: 0.024972 (0.028854)	data_time: 0.000090 (0.001875)	rpn_cls_loss: 0.000192 (0.000753)	rpn_loc_loss: 0.111258 (0.074306)	kp_hp_loss: 1.308370 (1.607139)	kp_hm_hp_loss: 6.433567 (6.579081)	kp_hp_offset_loss: 0.235844 (0.246973)	kp_loss: 7.977781 (8.433190)	siammask_loss: 8.111483 (8.523115)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:48,550-rk0-val_siamrcnn.py#277] Validation: [569/1899]	batch_time: 0.027747 (0.028792)	data_time: 0.000098 (0.001845)	rpn_cls_loss: 0.000185 (0.000774)	rpn_loc_loss: 0.059108 (0.075071)	kp_hp_loss: 2.195115 (1.614086)	kp_hm_hp_loss: 6.709358 (6.581115)	kp_hp_offset_loss: 0.211065 (0.246953)	kp_loss: 9.115539 (8.442152)	siammask_loss: 9.186653 (8.533015)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:50,202-rk0-val_siamrcnn.py#277] Validation: [579/1899]	batch_time: 0.024915 (0.028728)	data_time: 0.000091 (0.001816)	rpn_cls_loss: 0.000169 (0.000765)	rpn_loc_loss: 0.014828 (0.075103)	kp_hp_loss: 2.305691 (1.613299)	kp_hm_hp_loss: 6.128002 (6.580424)	kp_hp_offset_loss: 0.239168 (0.246729)	kp_loss: 8.672860 (8.440451)	siammask_loss: 8.690824 (8.531343)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:51,864-rk0-val_siamrcnn.py#277] Validation: [589/1899]	batch_time: 0.024929 (0.028672)	data_time: 0.000092 (0.001788)	rpn_cls_loss: 0.000250 (0.000758)	rpn_loc_loss: 0.044118 (0.074901)	kp_hp_loss: 1.115345 (1.608742)	kp_hm_hp_loss: 6.091419 (6.576810)	kp_hp_offset_loss: 0.286142 (0.246534)	kp_loss: 7.492905 (8.432085)	siammask_loss: 7.546095 (8.522729)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:53,533-rk0-val_siamrcnn.py#277] Validation: [599/1899]	batch_time: 0.024991 (0.028620)	data_time: 0.000091 (0.001761)	rpn_cls_loss: 0.000240 (0.000750)	rpn_loc_loss: 0.046047 (0.074797)	kp_hp_loss: 1.616762 (1.607635)	kp_hm_hp_loss: 6.521749 (6.575510)	kp_hp_offset_loss: 0.307246 (0.246837)	kp_loss: 8.445757 (8.429980)	siammask_loss: 8.501253 (8.520491)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:55,189-rk0-val_siamrcnn.py#277] Validation: [609/1899]	batch_time: 0.024894 (0.028561)	data_time: 0.000095 (0.001735)	rpn_cls_loss: 0.000219 (0.000741)	rpn_loc_loss: 0.405089 (0.075051)	kp_hp_loss: 2.459848 (1.607462)	kp_hm_hp_loss: 6.215012 (6.573923)	kp_hp_offset_loss: 0.255190 (0.247076)	kp_loss: 8.930050 (8.428459)	siammask_loss: 9.416375 (8.519264)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:56,873-rk0-val_siamrcnn.py#277] Validation: [619/1899]	batch_time: 0.024974 (0.028504)	data_time: 0.000093 (0.001709)	rpn_cls_loss: 0.000172 (0.000734)	rpn_loc_loss: 0.041559 (0.074658)	kp_hp_loss: 1.804096 (1.607419)	kp_hm_hp_loss: 6.554019 (6.571670)	kp_hp_offset_loss: 0.228490 (0.246865)	kp_loss: 8.586606 (8.425951)	siammask_loss: 8.636648 (8.516278)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:16:58,590-rk0-val_siamrcnn.py#277] Validation: [629/1899]	batch_time: 0.025021 (0.028449)	data_time: 0.000091 (0.001685)	rpn_cls_loss: 0.000131 (0.000726)	rpn_loc_loss: 0.068359 (0.074242)	kp_hp_loss: 1.344858 (1.605771)	kp_hm_hp_loss: 6.016366 (6.568815)	kp_hp_offset_loss: 0.214753 (0.246851)	kp_loss: 7.575977 (8.421433)	siammask_loss: 7.658139 (8.511255)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:00,241-rk0-val_siamrcnn.py#277] Validation: [639/1899]	batch_time: 0.024888 (0.028395)	data_time: 0.000088 (0.001661)	rpn_cls_loss: 0.000184 (0.000759)	rpn_loc_loss: 0.014800 (0.074049)	kp_hp_loss: 1.092260 (1.605063)	kp_hm_hp_loss: 6.773859 (6.569018)	kp_hp_offset_loss: 0.261270 (0.246704)	kp_loss: 8.127390 (8.420780)	siammask_loss: 8.145333 (8.510403)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:01,915-rk0-val_siamrcnn.py#277] Validation: [649/1899]	batch_time: 0.025000 (0.028345)	data_time: 0.000088 (0.001638)	rpn_cls_loss: 0.002050 (0.000753)	rpn_loc_loss: 0.134325 (0.073972)	kp_hp_loss: 1.349530 (1.603507)	kp_hm_hp_loss: 6.717454 (6.572639)	kp_hp_offset_loss: 0.241837 (0.246591)	kp_loss: 8.308820 (8.422731)	siammask_loss: 8.472060 (8.512257)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:03,550-rk0-val_siamrcnn.py#277] Validation: [659/1899]	batch_time: 0.024885 (0.028298)	data_time: 0.000090 (0.001616)	rpn_cls_loss: 0.000173 (0.000744)	rpn_loc_loss: 0.072098 (0.073721)	kp_hp_loss: 1.614355 (1.601455)	kp_hm_hp_loss: 7.225533 (6.571106)	kp_hp_offset_loss: 0.230993 (0.246569)	kp_loss: 9.070881 (8.419124)	siammask_loss: 9.157572 (8.508341)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:05,240-rk0-val_siamrcnn.py#277] Validation: [669/1899]	batch_time: 0.024945 (0.028253)	data_time: 0.000091 (0.001595)	rpn_cls_loss: 0.000350 (0.000741)	rpn_loc_loss: 0.070601 (0.073782)	kp_hp_loss: 2.038716 (1.604266)	kp_hm_hp_loss: 6.953941 (6.570963)	kp_hp_offset_loss: 0.240130 (0.246444)	kp_loss: 9.232787 (8.421667)	siammask_loss: 9.317858 (8.510954)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:06,907-rk0-val_siamrcnn.py#277] Validation: [679/1899]	batch_time: 0.024982 (0.028208)	data_time: 0.000091 (0.001574)	rpn_cls_loss: 0.000173 (0.000735)	rpn_loc_loss: 0.240804 (0.073733)	kp_hp_loss: 2.204853 (1.601928)	kp_hm_hp_loss: 6.968068 (6.570038)	kp_hp_offset_loss: 0.278598 (0.246300)	kp_loss: 9.451518 (8.418260)	siammask_loss: 9.740656 (8.507481)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:09,045-rk0-val_siamrcnn.py#277] Validation: [689/1899]	batch_time: 0.027361 (0.028170)	data_time: 0.000092 (0.001553)	rpn_cls_loss: 0.000151 (0.000731)	rpn_loc_loss: 0.025171 (0.073509)	kp_hp_loss: 0.896898 (1.602791)	kp_hm_hp_loss: 6.199201 (6.569669)	kp_hp_offset_loss: 0.248210 (0.246429)	kp_loss: 7.344309 (8.418882)	siammask_loss: 7.374666 (8.507831)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:10,730-rk0-val_siamrcnn.py#277] Validation: [699/1899]	batch_time: 0.025150 (0.028133)	data_time: 0.000088 (0.001533)	rpn_cls_loss: 0.000371 (0.000724)	rpn_loc_loss: 0.044653 (0.073317)	kp_hp_loss: 1.352230 (1.599828)	kp_hm_hp_loss: 6.118704 (6.570811)	kp_hp_offset_loss: 0.240696 (0.246334)	kp_loss: 7.711630 (8.416966)	siammask_loss: 7.765585 (8.505678)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:12,366-rk0-val_siamrcnn.py#277] Validation: [709/1899]	batch_time: 0.025018 (0.028089)	data_time: 0.000089 (0.001514)	rpn_cls_loss: 0.000133 (0.000716)	rpn_loc_loss: 0.294661 (0.073835)	kp_hp_loss: 3.505425 (1.604272)	kp_hm_hp_loss: 6.591261 (6.572425)	kp_hp_offset_loss: 0.267752 (0.246305)	kp_loss: 10.364440 (8.422995)	siammask_loss: 10.718166 (8.512320)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:14,061-rk0-val_siamrcnn.py#277] Validation: [719/1899]	batch_time: 0.024887 (0.028052)	data_time: 0.000087 (0.001495)	rpn_cls_loss: 0.000146 (0.000716)	rpn_loc_loss: 0.085637 (0.073870)	kp_hp_loss: 1.655205 (1.605507)	kp_hm_hp_loss: 6.774002 (6.572325)	kp_hp_offset_loss: 0.249503 (0.246358)	kp_loss: 8.678709 (8.424182)	siammask_loss: 8.781619 (8.513552)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:15,724-rk0-val_siamrcnn.py#277] Validation: [729/1899]	batch_time: 0.025030 (0.028014)	data_time: 0.000093 (0.001477)	rpn_cls_loss: 0.000172 (0.000710)	rpn_loc_loss: 0.062571 (0.073767)	kp_hp_loss: 1.885812 (1.606737)	kp_hm_hp_loss: 6.559233 (6.573145)	kp_hp_offset_loss: 0.235812 (0.246337)	kp_loss: 8.680857 (8.426211)	siammask_loss: 8.756114 (8.515451)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:17,499-rk0-val_siamrcnn.py#277] Validation: [739/1899]	batch_time: 0.024954 (0.027976)	data_time: 0.000093 (0.001460)	rpn_cls_loss: 0.000167 (0.000703)	rpn_loc_loss: 0.072026 (0.073995)	kp_hp_loss: 1.571658 (1.611864)	kp_hm_hp_loss: 7.047421 (6.570982)	kp_hp_offset_loss: 0.256172 (0.246138)	kp_loss: 8.875250 (8.428978)	siammask_loss: 8.961847 (8.518483)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:19,130-rk0-val_siamrcnn.py#277] Validation: [749/1899]	batch_time: 0.024906 (0.027940)	data_time: 0.000090 (0.001443)	rpn_cls_loss: 0.000139 (0.000702)	rpn_loc_loss: 0.040834 (0.073885)	kp_hp_loss: 2.228273 (1.612042)	kp_hm_hp_loss: 6.950634 (6.572536)	kp_hp_offset_loss: 0.237414 (0.246290)	kp_loss: 9.416321 (8.430862)	siammask_loss: 9.465460 (8.520234)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:20,791-rk0-val_siamrcnn.py#277] Validation: [759/1899]	batch_time: 0.024873 (0.027902)	data_time: 0.000089 (0.001426)	rpn_cls_loss: 0.000740 (0.000696)	rpn_loc_loss: 0.074598 (0.073790)	kp_hp_loss: 1.778276 (1.611711)	kp_hm_hp_loss: 6.220589 (6.569434)	kp_hp_offset_loss: 0.220574 (0.246149)	kp_loss: 8.219440 (8.427288)	siammask_loss: 8.309697 (8.516541)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:22,417-rk0-val_siamrcnn.py#277] Validation: [769/1899]	batch_time: 0.025095 (0.027870)	data_time: 0.000094 (0.001409)	rpn_cls_loss: 0.000212 (0.000693)	rpn_loc_loss: 0.041514 (0.073458)	kp_hp_loss: 1.462353 (1.611590)	kp_hm_hp_loss: 6.667703 (6.570572)	kp_hp_offset_loss: 0.195560 (0.246226)	kp_loss: 8.325615 (8.428384)	siammask_loss: 8.375644 (8.517235)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:24,075-rk0-val_siamrcnn.py#277] Validation: [779/1899]	batch_time: 0.025147 (0.027836)	data_time: 0.000086 (0.001393)	rpn_cls_loss: 0.000274 (0.000687)	rpn_loc_loss: 0.057448 (0.073536)	kp_hp_loss: 0.832789 (1.608886)	kp_hm_hp_loss: 6.253191 (6.571749)	kp_hp_offset_loss: 0.239032 (0.246038)	kp_loss: 7.325013 (8.426670)	siammask_loss: 7.394224 (8.515607)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:25,751-rk0-val_siamrcnn.py#277] Validation: [789/1899]	batch_time: 0.024840 (0.027800)	data_time: 0.000091 (0.001378)	rpn_cls_loss: 0.000159 (0.000681)	rpn_loc_loss: 0.046008 (0.073104)	kp_hp_loss: 1.568670 (1.609159)	kp_hm_hp_loss: 6.530302 (6.572311)	kp_hp_offset_loss: 0.240969 (0.245886)	kp_loss: 8.339940 (8.427351)	siammask_loss: 8.395309 (8.515765)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:27,409-rk0-val_siamrcnn.py#277] Validation: [799/1899]	batch_time: 0.025009 (0.027766)	data_time: 0.000089 (0.001363)	rpn_cls_loss: 0.000185 (0.000675)	rpn_loc_loss: 0.144623 (0.073387)	kp_hp_loss: 1.114994 (1.609765)	kp_hm_hp_loss: 6.620924 (6.574257)	kp_hp_offset_loss: 0.228573 (0.245753)	kp_loss: 7.964492 (8.429770)	siammask_loss: 8.138225 (8.518517)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:29,060-rk0-val_siamrcnn.py#277] Validation: [809/1899]	batch_time: 0.024877 (0.027732)	data_time: 0.000089 (0.001348)	rpn_cls_loss: 0.000187 (0.000669)	rpn_loc_loss: 0.040027 (0.073221)	kp_hp_loss: 1.512874 (1.607762)	kp_hm_hp_loss: 6.180866 (6.573172)	kp_hp_offset_loss: 0.316545 (0.245845)	kp_loss: 8.010285 (8.426774)	siammask_loss: 8.058504 (8.515317)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:30,776-rk0-val_siamrcnn.py#277] Validation: [819/1899]	batch_time: 0.025003 (0.027700)	data_time: 0.000091 (0.001334)	rpn_cls_loss: 0.000243 (0.000751)	rpn_loc_loss: 0.105762 (0.073374)	kp_hp_loss: 1.207822 (1.605115)	kp_hm_hp_loss: 6.493038 (6.571355)	kp_hp_offset_loss: 0.174105 (0.245874)	kp_loss: 7.874964 (8.422339)	siammask_loss: 8.002121 (8.511149)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:32,531-rk0-val_siamrcnn.py#277] Validation: [829/1899]	batch_time: 0.024875 (0.027668)	data_time: 0.000093 (0.001320)	rpn_cls_loss: 0.000165 (0.000750)	rpn_loc_loss: 0.045742 (0.073315)	kp_hp_loss: 1.696470 (1.603259)	kp_hm_hp_loss: 7.010783 (6.571120)	kp_hp_offset_loss: 0.194348 (0.245935)	kp_loss: 8.901601 (8.420308)	siammask_loss: 8.956656 (8.509046)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:34,184-rk0-val_siamrcnn.py#277] Validation: [839/1899]	batch_time: 0.024891 (0.027637)	data_time: 0.000092 (0.001306)	rpn_cls_loss: 0.000213 (0.000747)	rpn_loc_loss: 0.231582 (0.073224)	kp_hp_loss: 2.065343 (1.604952)	kp_hm_hp_loss: 6.526349 (6.572092)	kp_hp_offset_loss: 0.196794 (0.245938)	kp_loss: 8.788486 (8.422976)	siammask_loss: 9.066598 (8.511601)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:35,838-rk0-val_siamrcnn.py#277] Validation: [849/1899]	batch_time: 0.025025 (0.027606)	data_time: 0.000089 (0.001293)	rpn_cls_loss: 0.000122 (0.000741)	rpn_loc_loss: 0.019495 (0.073210)	kp_hp_loss: 0.962952 (1.603797)	kp_hm_hp_loss: 6.961815 (6.575043)	kp_hp_offset_loss: 0.280968 (0.245866)	kp_loss: 8.205734 (8.424699)	siammask_loss: 8.229250 (8.513301)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:37,494-rk0-val_siamrcnn.py#277] Validation: [859/1899]	batch_time: 0.024866 (0.027577)	data_time: 0.000093 (0.001279)	rpn_cls_loss: 0.000246 (0.000735)	rpn_loc_loss: 0.064281 (0.072981)	kp_hp_loss: 2.461024 (1.602673)	kp_hm_hp_loss: 7.389313 (6.575957)	kp_hp_offset_loss: 0.248806 (0.245822)	kp_loss: 10.099143 (8.424446)	siammask_loss: 10.176526 (8.512767)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:39,227-rk0-val_siamrcnn.py#277] Validation: [869/1899]	batch_time: 0.024902 (0.027550)	data_time: 0.000097 (0.001267)	rpn_cls_loss: 0.002406 (0.000739)	rpn_loc_loss: 0.045523 (0.072943)	kp_hp_loss: 2.017989 (1.607427)	kp_hm_hp_loss: 6.751938 (6.576831)	kp_hp_offset_loss: 0.267139 (0.245915)	kp_loss: 9.037065 (8.430167)	siammask_loss: 9.094098 (8.518447)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:40,943-rk0-val_siamrcnn.py#277] Validation: [879/1899]	batch_time: 0.024848 (0.027522)	data_time: 0.000088 (0.001254)	rpn_cls_loss: 0.000201 (0.000732)	rpn_loc_loss: 0.025413 (0.072848)	kp_hp_loss: 1.421674 (1.605912)	kp_hm_hp_loss: 6.183947 (6.575744)	kp_hp_offset_loss: 0.297727 (0.245904)	kp_loss: 7.903348 (8.427555)	siammask_loss: 7.934044 (8.515714)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:42,620-rk0-val_siamrcnn.py#277] Validation: [889/1899]	batch_time: 0.024851 (0.027494)	data_time: 0.000089 (0.001242)	rpn_cls_loss: 0.000246 (0.000726)	rpn_loc_loss: 0.051930 (0.072518)	kp_hp_loss: 2.048411 (1.606608)	kp_hm_hp_loss: 6.988147 (6.576695)	kp_hp_offset_loss: 0.265661 (0.245936)	kp_loss: 9.302219 (8.429233)	siammask_loss: 9.364780 (8.516991)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:44,327-rk0-val_siamrcnn.py#277] Validation: [899/1899]	batch_time: 0.024969 (0.027467)	data_time: 0.000093 (0.001230)	rpn_cls_loss: 0.000129 (0.000720)	rpn_loc_loss: 0.051453 (0.072575)	kp_hp_loss: 1.738475 (1.606518)	kp_hm_hp_loss: 6.750900 (6.577210)	kp_hp_offset_loss: 0.254008 (0.245968)	kp_loss: 8.743383 (8.429691)	siammask_loss: 8.805256 (8.517510)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:45,973-rk0-val_siamrcnn.py#277] Validation: [909/1899]	batch_time: 0.024971 (0.027440)	data_time: 0.000091 (0.001218)	rpn_cls_loss: 0.000127 (0.001442)	rpn_loc_loss: 0.092042 (0.072570)	kp_hp_loss: 1.093107 (1.607633)	kp_hm_hp_loss: 6.219806 (6.577733)	kp_hp_offset_loss: 0.275098 (0.245998)	kp_loss: 7.588011 (8.431358)	siammask_loss: 7.698588 (8.519894)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:47,635-rk0-val_siamrcnn.py#277] Validation: [919/1899]	batch_time: 0.024942 (0.027417)	data_time: 0.000088 (0.001207)	rpn_cls_loss: 0.000232 (0.001429)	rpn_loc_loss: 0.164703 (0.072545)	kp_hp_loss: 2.176222 (1.608729)	kp_hm_hp_loss: 6.370147 (6.576141)	kp_hp_offset_loss: 0.262075 (0.245745)	kp_loss: 8.808444 (8.430609)	siammask_loss: 9.006319 (8.519102)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:49,271-rk0-val_siamrcnn.py#277] Validation: [929/1899]	batch_time: 0.025046 (0.027391)	data_time: 0.000104 (0.001196)	rpn_cls_loss: 0.000129 (0.001424)	rpn_loc_loss: 0.181461 (0.072640)	kp_hp_loss: 1.358953 (1.609681)	kp_hm_hp_loss: 6.812893 (6.576630)	kp_hp_offset_loss: 0.228654 (0.245840)	kp_loss: 8.400500 (8.432146)	siammask_loss: 8.618382 (8.520748)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:51,012-rk0-val_siamrcnn.py#277] Validation: [939/1899]	batch_time: 0.024963 (0.027369)	data_time: 0.000087 (0.001185)	rpn_cls_loss: 0.001210 (0.001412)	rpn_loc_loss: 0.020568 (0.072312)	kp_hp_loss: 1.250689 (1.607314)	kp_hm_hp_loss: 6.170739 (6.576512)	kp_hp_offset_loss: 0.221792 (0.245710)	kp_loss: 7.643219 (8.429529)	siammask_loss: 7.669111 (8.517724)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:52,668-rk0-val_siamrcnn.py#277] Validation: [949/1899]	batch_time: 0.025002 (0.027345)	data_time: 0.000087 (0.001174)	rpn_cls_loss: 0.000125 (0.001399)	rpn_loc_loss: 0.062415 (0.072318)	kp_hp_loss: 1.441320 (1.606640)	kp_hm_hp_loss: 6.560858 (6.577790)	kp_hp_offset_loss: 0.208662 (0.245634)	kp_loss: 8.210840 (8.430058)	siammask_loss: 8.285863 (8.518248)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:54,335-rk0-val_siamrcnn.py#277] Validation: [959/1899]	batch_time: 0.025027 (0.027324)	data_time: 0.000096 (0.001164)	rpn_cls_loss: 0.021971 (0.001411)	rpn_loc_loss: 0.197026 (0.072141)	kp_hp_loss: 1.777764 (1.604506)	kp_hm_hp_loss: 5.809339 (6.575560)	kp_hp_offset_loss: 0.278072 (0.245640)	kp_loss: 7.865175 (8.425698)	siammask_loss: 8.123576 (8.513687)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:55,993-rk0-val_siamrcnn.py#277] Validation: [969/1899]	batch_time: 0.025014 (0.027300)	data_time: 0.000097 (0.001153)	rpn_cls_loss: 0.000143 (0.001398)	rpn_loc_loss: 0.028760 (0.072076)	kp_hp_loss: 1.044337 (1.603881)	kp_hm_hp_loss: 6.764512 (6.574303)	kp_hp_offset_loss: 0.257182 (0.245636)	kp_loss: 8.066031 (8.423812)	siammask_loss: 8.100685 (8.511711)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:57,693-rk0-val_siamrcnn.py#277] Validation: [979/1899]	batch_time: 0.025140 (0.027279)	data_time: 0.000099 (0.001143)	rpn_cls_loss: 0.000203 (0.001386)	rpn_loc_loss: 0.013460 (0.071719)	kp_hp_loss: 1.642501 (1.603595)	kp_hm_hp_loss: 6.138190 (6.576242)	kp_hp_offset_loss: 0.266959 (0.245625)	kp_loss: 8.047650 (8.425455)	siammask_loss: 8.064006 (8.512913)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:17:59,407-rk0-val_siamrcnn.py#277] Validation: [989/1899]	batch_time: 0.025889 (0.027258)	data_time: 0.000103 (0.001134)	rpn_cls_loss: 0.000179 (0.001373)	rpn_loc_loss: 0.024766 (0.071562)	kp_hp_loss: 1.367060 (1.602539)	kp_hm_hp_loss: 6.108012 (6.575495)	kp_hp_offset_loss: 0.263936 (0.245573)	kp_loss: 7.739007 (8.423599)	siammask_loss: 7.768906 (8.510858)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:01,044-rk0-val_siamrcnn.py#277] Validation: [999/1899]	batch_time: 0.025041 (0.027236)	data_time: 0.000089 (0.001124)	rpn_cls_loss: 0.000473 (0.001373)	rpn_loc_loss: 0.151644 (0.071743)	kp_hp_loss: 1.611967 (1.601159)	kp_hm_hp_loss: 6.530157 (6.574887)	kp_hp_offset_loss: 0.258399 (0.245588)	kp_loss: 8.400522 (8.421626)	siammask_loss: 8.582967 (8.509101)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:02,743-rk0-val_siamrcnn.py#277] Validation: [1009/1899]	batch_time: 0.024904 (0.027215)	data_time: 0.000089 (0.001115)	rpn_cls_loss: 0.000109 (0.001361)	rpn_loc_loss: 0.029739 (0.071449)	kp_hp_loss: 1.139802 (1.600814)	kp_hm_hp_loss: 6.316086 (6.572689)	kp_hp_offset_loss: 0.260780 (0.245596)	kp_loss: 7.716667 (8.419090)	siammask_loss: 7.752463 (8.506202)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:04,462-rk0-val_siamrcnn.py#277] Validation: [1019/1899]	batch_time: 0.024882 (0.027194)	data_time: 0.000091 (0.001105)	rpn_cls_loss: 0.000191 (0.001351)	rpn_loc_loss: 0.102200 (0.071484)	kp_hp_loss: 1.250399 (1.600524)	kp_hm_hp_loss: 5.759700 (6.571796)	kp_hp_offset_loss: 0.217006 (0.245588)	kp_loss: 7.227105 (8.417900)	siammask_loss: 7.349935 (8.505043)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:06,119-rk0-val_siamrcnn.py#277] Validation: [1029/1899]	batch_time: 0.024824 (0.027174)	data_time: 0.000090 (0.001096)	rpn_cls_loss: 0.000162 (0.001339)	rpn_loc_loss: 0.035052 (0.071390)	kp_hp_loss: 1.149799 (1.598591)	kp_hm_hp_loss: 6.071329 (6.573974)	kp_hp_offset_loss: 0.272051 (0.245689)	kp_loss: 7.493180 (8.418246)	siammask_loss: 7.535404 (8.505264)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:07,776-rk0-val_siamrcnn.py#277] Validation: [1039/1899]	batch_time: 0.024810 (0.027156)	data_time: 0.000090 (0.001087)	rpn_cls_loss: 0.000213 (0.001329)	rpn_loc_loss: 0.052201 (0.071332)	kp_hp_loss: 2.619373 (1.598411)	kp_hm_hp_loss: 6.194752 (6.574102)	kp_hp_offset_loss: 0.209345 (0.245521)	kp_loss: 9.023471 (8.418025)	siammask_loss: 9.086325 (8.504964)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:09,456-rk0-val_siamrcnn.py#277] Validation: [1049/1899]	batch_time: 0.024864 (0.027137)	data_time: 0.000089 (0.001078)	rpn_cls_loss: 0.000090 (0.001318)	rpn_loc_loss: 0.064513 (0.071281)	kp_hp_loss: 1.952639 (1.597958)	kp_hm_hp_loss: 7.124903 (6.574800)	kp_hp_offset_loss: 0.279156 (0.245608)	kp_loss: 9.356698 (8.418357)	siammask_loss: 9.434204 (8.505224)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:11,074-rk0-val_siamrcnn.py#277] Validation: [1059/1899]	batch_time: 0.024940 (0.027117)	data_time: 0.000088 (0.001070)	rpn_cls_loss: 0.000081 (0.001309)	rpn_loc_loss: 0.090040 (0.071173)	kp_hp_loss: 1.556085 (1.598766)	kp_hm_hp_loss: 6.693369 (6.574828)	kp_hp_offset_loss: 0.215738 (0.245672)	kp_loss: 8.465192 (8.419256)	siammask_loss: 8.573321 (8.505987)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-14 18:18:12,748-rk0-val_siamrcnn.py#277] Validation: [1069/1899]	batch_time: 0.025094 (0.027102)	data_time: 0.000089 (0.001062)	rpn_cls_loss: 0.000140 (0.001301)	rpn_loc_loss: 0.104304 (0.071373)	kp_hp_loss: 1.021773 (1.598953)	kp_hm_hp_loss: 6.244599 (6.573517)	kp_hp_offset_loss: 0.233539 (0.245782)	kp_loss: 7.499911 (8.418243)	siammask_loss: 7.625216 (8.505205)	kp_avg_acc: 0.000000 (0.000058)
[2019-08-14 18:18:14,387-rk0-val_siamrcnn.py#277] Validation: [1079/1899]	batch_time: 0.024900 (0.027083)	data_time: 0.000100 (0.001053)	rpn_cls_loss: 0.000154 (0.001297)	rpn_loc_loss: 0.031832 (0.071239)	kp_hp_loss: 1.126112 (1.599288)	kp_hm_hp_loss: 6.177648 (6.573236)	kp_hp_offset_loss: 0.257508 (0.245942)	kp_loss: 7.561268 (8.418458)	siammask_loss: 7.599621 (8.505255)	kp_avg_acc: 0.000000 (0.000058)
[2019-08-14 18:18:16,128-rk0-val_siamrcnn.py#277] Validation: [1089/1899]	batch_time: 0.024943 (0.027064)	data_time: 0.000087 (0.001045)	rpn_cls_loss: 0.000192 (0.001287)	rpn_loc_loss: 0.093380 (0.071266)	kp_hp_loss: 2.080717 (1.601823)	kp_hm_hp_loss: 6.420903 (6.571737)	kp_hp_offset_loss: 0.228704 (0.245865)	kp_loss: 8.730325 (8.419417)	siammask_loss: 8.842572 (8.506237)	kp_avg_acc: 0.000000 (0.000057)
[2019-08-14 18:18:17,823-rk0-val_siamrcnn.py#277] Validation: [1099/1899]	batch_time: 0.024940 (0.027048)	data_time: 0.000090 (0.001037)	rpn_cls_loss: 0.000319 (0.001283)	rpn_loc_loss: 0.019510 (0.071139)	kp_hp_loss: 1.649905 (1.601396)	kp_hm_hp_loss: 7.050215 (6.571689)	kp_hp_offset_loss: 0.271957 (0.245811)	kp_loss: 8.972077 (8.418888)	siammask_loss: 8.995808 (8.505552)	kp_avg_acc: 0.000000 (0.000057)
[2019-08-14 18:18:19,481-rk0-val_siamrcnn.py#277] Validation: [1109/1899]	batch_time: 0.024986 (0.027032)	data_time: 0.000092 (0.001029)	rpn_cls_loss: 0.000112 (0.001272)	rpn_loc_loss: 0.027935 (0.070935)	kp_hp_loss: 1.240282 (1.600743)	kp_hm_hp_loss: 6.234203 (6.570674)	kp_hp_offset_loss: 0.227860 (0.245756)	kp_loss: 7.702344 (8.417164)	siammask_loss: 7.735978 (8.503572)	kp_avg_acc: 0.000000 (0.000056)
[2019-08-14 18:18:21,516-rk0-val_siamrcnn.py#277] Validation: [1119/1899]	batch_time: 0.025034 (0.027015)	data_time: 0.000092 (0.001021)	rpn_cls_loss: 0.000207 (0.001263)	rpn_loc_loss: 0.024657 (0.070754)	kp_hp_loss: 1.181239 (1.599066)	kp_hm_hp_loss: 6.554604 (6.569947)	kp_hp_offset_loss: 0.272053 (0.245740)	kp_loss: 8.007896 (8.414744)	siammask_loss: 8.037692 (8.500926)	kp_avg_acc: 0.000000 (0.000056)
[2019-08-14 18:18:23,164-rk0-val_siamrcnn.py#277] Validation: [1129/1899]	batch_time: 0.025011 (0.026998)	data_time: 0.000090 (0.001014)	rpn_cls_loss: 0.000167 (0.001253)	rpn_loc_loss: 0.109729 (0.070793)	kp_hp_loss: 1.653867 (1.598443)	kp_hm_hp_loss: 6.813760 (6.569857)	kp_hp_offset_loss: 0.278526 (0.245748)	kp_loss: 8.746154 (8.414039)	siammask_loss: 8.877996 (8.500259)	kp_avg_acc: 0.000000 (0.000055)
[2019-08-14 18:18:24,831-rk0-val_siamrcnn.py#277] Validation: [1139/1899]	batch_time: 0.024921 (0.026982)	data_time: 0.000093 (0.001006)	rpn_cls_loss: 0.000190 (0.001244)	rpn_loc_loss: 0.090676 (0.070764)	kp_hp_loss: 1.508937 (1.597994)	kp_hm_hp_loss: 6.685549 (6.570552)	kp_hp_offset_loss: 0.248328 (0.245819)	kp_loss: 8.442815 (8.414356)	siammask_loss: 8.551817 (8.500531)	kp_avg_acc: 0.000000 (0.000055)
[2019-08-14 18:18:26,466-rk0-val_siamrcnn.py#277] Validation: [1149/1899]	batch_time: 0.024910 (0.026966)	data_time: 0.000088 (0.000999)	rpn_cls_loss: 0.000123 (0.001235)	rpn_loc_loss: 0.014366 (0.070777)	kp_hp_loss: 2.017127 (1.599579)	kp_hm_hp_loss: 6.579963 (6.571403)	kp_hp_offset_loss: 0.231944 (0.245864)	kp_loss: 8.829034 (8.416837)	siammask_loss: 8.846396 (8.503019)	kp_avg_acc: 0.000000 (0.000054)
[2019-08-14 18:18:28,539-rk0-val_siamrcnn.py#277] Validation: [1159/1899]	batch_time: 0.024899 (0.026949)	data_time: 0.000095 (0.000992)	rpn_cls_loss: 0.000091 (0.001226)	rpn_loc_loss: 0.094339 (0.070661)	kp_hp_loss: 1.549856 (1.599373)	kp_hm_hp_loss: 6.434643 (6.570934)	kp_hp_offset_loss: 0.282033 (0.245801)	kp_loss: 8.266532 (8.416099)	siammask_loss: 8.379830 (8.502134)	kp_avg_acc: 0.000000 (0.000054)
[2019-08-14 18:18:30,307-rk0-val_siamrcnn.py#277] Validation: [1169/1899]	batch_time: 0.025148 (0.026937)	data_time: 0.000093 (0.000985)	rpn_cls_loss: 0.000139 (0.001220)	rpn_loc_loss: 0.108809 (0.070708)	kp_hp_loss: 1.210739 (1.600125)	kp_hm_hp_loss: 6.861620 (6.572078)	kp_hp_offset_loss: 0.288766 (0.245895)	kp_loss: 8.361125 (8.418090)	siammask_loss: 8.491835 (8.504175)	kp_avg_acc: 0.000000 (0.000053)
[2019-08-14 18:18:31,953-rk0-val_siamrcnn.py#277] Validation: [1179/1899]	batch_time: 0.024951 (0.026922)	data_time: 0.000089 (0.000978)	rpn_cls_loss: 0.000210 (0.001212)	rpn_loc_loss: 0.024414 (0.070623)	kp_hp_loss: 1.113614 (1.601595)	kp_hm_hp_loss: 6.145694 (6.571289)	kp_hp_offset_loss: 0.259511 (0.245941)	kp_loss: 7.518819 (8.418817)	siammask_loss: 7.548326 (8.504792)	kp_avg_acc: 0.000000 (0.000053)
[2019-08-14 18:18:33,581-rk0-val_siamrcnn.py#277] Validation: [1189/1899]	batch_time: 0.025258 (0.026906)	data_time: 0.000091 (0.000971)	rpn_cls_loss: 0.000101 (0.001204)	rpn_loc_loss: 0.029657 (0.070715)	kp_hp_loss: 1.563957 (1.604746)	kp_hm_hp_loss: 6.512726 (6.571465)	kp_hp_offset_loss: 0.239684 (0.246033)	kp_loss: 8.316367 (8.422236)	siammask_loss: 8.352057 (8.508312)	kp_avg_acc: 0.000000 (0.000053)
[2019-08-14 18:18:35,230-rk0-val_siamrcnn.py#277] Validation: [1199/1899]	batch_time: 0.025016 (0.026890)	data_time: 0.000090 (0.000964)	rpn_cls_loss: 0.000183 (0.001199)	rpn_loc_loss: 0.221031 (0.070809)	kp_hp_loss: 1.534423 (1.604406)	kp_hm_hp_loss: 6.832202 (6.572205)	kp_hp_offset_loss: 0.281998 (0.246128)	kp_loss: 8.648623 (8.422732)	siammask_loss: 8.914043 (8.508916)	kp_avg_acc: 0.000000 (0.000052)
[2019-08-14 18:18:36,893-rk0-val_siamrcnn.py#277] Validation: [1209/1899]	batch_time: 0.024971 (0.026877)	data_time: 0.000088 (0.000958)	rpn_cls_loss: 0.000184 (0.001191)	rpn_loc_loss: 0.022662 (0.070677)	kp_hp_loss: 1.611098 (1.604297)	kp_hm_hp_loss: 6.602893 (6.573888)	kp_hp_offset_loss: 0.253045 (0.245943)	kp_loss: 8.467036 (8.424122)	siammask_loss: 8.494414 (8.510140)	kp_avg_acc: 0.000000 (0.000052)
[2019-08-14 18:18:38,573-rk0-val_siamrcnn.py#277] Validation: [1219/1899]	batch_time: 0.024855 (0.026862)	data_time: 0.000086 (0.000951)	rpn_cls_loss: 0.000558 (0.001184)	rpn_loc_loss: 0.197067 (0.070638)	kp_hp_loss: 1.728820 (1.604370)	kp_hm_hp_loss: 6.295415 (6.574064)	kp_hp_offset_loss: 0.245293 (0.245895)	kp_loss: 8.269528 (8.424323)	siammask_loss: 8.506567 (8.510287)	kp_avg_acc: 0.000000 (0.000051)
[2019-08-14 18:18:40,191-rk0-val_siamrcnn.py#277] Validation: [1229/1899]	batch_time: 0.024960 (0.026847)	data_time: 0.000091 (0.000945)	rpn_cls_loss: 0.000194 (0.001178)	rpn_loc_loss: 0.106096 (0.070560)	kp_hp_loss: 1.878674 (1.605169)	kp_hm_hp_loss: 6.052551 (6.572382)	kp_hp_offset_loss: 0.284934 (0.245935)	kp_loss: 8.216159 (8.423476)	siammask_loss: 8.343667 (8.509342)	kp_avg_acc: 0.000000 (0.000051)
[2019-08-14 18:18:41,908-rk0-val_siamrcnn.py#277] Validation: [1239/1899]	batch_time: 0.028864 (0.026835)	data_time: 0.000107 (0.000939)	rpn_cls_loss: 0.000136 (0.001170)	rpn_loc_loss: 0.029109 (0.070597)	kp_hp_loss: 1.035975 (1.606847)	kp_hm_hp_loss: 6.373364 (6.571805)	kp_hp_offset_loss: 0.263003 (0.245999)	kp_loss: 7.672342 (8.424641)	siammask_loss: 7.707409 (8.510543)	kp_avg_acc: 0.000000 (0.000050)
[2019-08-14 18:18:43,601-rk0-val_siamrcnn.py#277] Validation: [1249/1899]	batch_time: 0.024909 (0.026822)	data_time: 0.000088 (0.000933)	rpn_cls_loss: 0.000193 (0.001166)	rpn_loc_loss: 0.037004 (0.070663)	kp_hp_loss: 0.913097 (1.606759)	kp_hm_hp_loss: 6.220702 (6.571266)	kp_hp_offset_loss: 0.206402 (0.245950)	kp_loss: 7.340200 (8.423966)	siammask_loss: 7.384799 (8.509943)	kp_avg_acc: 0.000000 (0.000050)
[2019-08-14 18:18:45,252-rk0-val_siamrcnn.py#277] Validation: [1259/1899]	batch_time: 0.024945 (0.026808)	data_time: 0.000093 (0.000926)	rpn_cls_loss: 0.000160 (0.001161)	rpn_loc_loss: 0.026392 (0.070851)	kp_hp_loss: 1.256324 (1.608815)	kp_hm_hp_loss: 6.972167 (6.571332)	kp_hp_offset_loss: 0.273030 (0.245959)	kp_loss: 8.501522 (8.426098)	siammask_loss: 8.533352 (8.512295)	kp_avg_acc: 0.000000 (0.000050)
[2019-08-14 18:18:46,913-rk0-val_siamrcnn.py#277] Validation: [1269/1899]	batch_time: 0.024919 (0.026796)	data_time: 0.000091 (0.000921)	rpn_cls_loss: 0.000187 (0.001155)	rpn_loc_loss: 0.207652 (0.071023)	kp_hp_loss: 3.490428 (1.611013)	kp_hm_hp_loss: 5.965779 (6.572073)	kp_hp_offset_loss: 0.299853 (0.246063)	kp_loss: 9.756061 (8.429141)	siammask_loss: 10.005429 (8.515539)	kp_avg_acc: 0.000000 (0.000049)
[2019-08-14 18:18:48,589-rk0-val_siamrcnn.py#277] Validation: [1279/1899]	batch_time: 0.024910 (0.026785)	data_time: 0.000093 (0.000915)	rpn_cls_loss: 0.000189 (0.001147)	rpn_loc_loss: 0.043272 (0.070898)	kp_hp_loss: 1.707749 (1.610001)	kp_hm_hp_loss: 6.876485 (6.573406)	kp_hp_offset_loss: 0.249185 (0.246061)	kp_loss: 8.833419 (8.429458)	siammask_loss: 8.885534 (8.515698)	kp_avg_acc: 0.000000 (0.000049)
[2019-08-14 18:18:50,234-rk0-val_siamrcnn.py#277] Validation: [1289/1899]	batch_time: 0.025087 (0.026773)	data_time: 0.000088 (0.000909)	rpn_cls_loss: 0.000342 (0.001140)	rpn_loc_loss: 0.086797 (0.070908)	kp_hp_loss: 2.000765 (1.608874)	kp_hm_hp_loss: 6.410701 (6.573160)	kp_hp_offset_loss: 0.226236 (0.245975)	kp_loss: 8.637703 (8.427999)	siammask_loss: 8.742201 (8.514244)	kp_avg_acc: 0.000000 (0.000048)
[2019-08-14 18:18:51,924-rk0-val_siamrcnn.py#277] Validation: [1299/1899]	batch_time: 0.024822 (0.026759)	data_time: 0.000089 (0.000903)	rpn_cls_loss: 0.000140 (0.001134)	rpn_loc_loss: 0.029352 (0.070930)	kp_hp_loss: 1.224053 (1.608830)	kp_hm_hp_loss: 7.420185 (6.573262)	kp_hp_offset_loss: 0.237851 (0.245946)	kp_loss: 8.882090 (8.428029)	siammask_loss: 8.917451 (8.514293)	kp_avg_acc: 0.000000 (0.000048)
[2019-08-14 18:18:53,776-rk0-val_siamrcnn.py#277] Validation: [1309/1899]	batch_time: 0.024927 (0.026749)	data_time: 0.000079 (0.000898)	rpn_cls_loss: 0.000149 (0.001127)	rpn_loc_loss: 0.021743 (0.070949)	kp_hp_loss: 1.223982 (1.607755)	kp_hm_hp_loss: 6.039589 (6.573139)	kp_hp_offset_loss: 0.207245 (0.245879)	kp_loss: 7.470816 (8.426765)	siammask_loss: 7.497056 (8.513044)	kp_avg_acc: 0.000000 (0.000048)
[2019-08-14 18:18:55,410-rk0-val_siamrcnn.py#277] Validation: [1319/1899]	batch_time: 0.024920 (0.026736)	data_time: 0.000088 (0.000892)	rpn_cls_loss: 0.000190 (0.001121)	rpn_loc_loss: 0.010654 (0.071207)	kp_hp_loss: 1.250825 (1.609979)	kp_hm_hp_loss: 6.814892 (6.573389)	kp_hp_offset_loss: 0.195310 (0.245878)	kp_loss: 8.261026 (8.429237)	siammask_loss: 8.274001 (8.515820)	kp_avg_acc: 0.000000 (0.000047)
[2019-08-14 18:18:57,100-rk0-val_siamrcnn.py#277] Validation: [1329/1899]	batch_time: 0.024894 (0.026725)	data_time: 0.000088 (0.000886)	rpn_cls_loss: 0.000241 (0.001114)	rpn_loc_loss: 0.018247 (0.071148)	kp_hp_loss: 1.606756 (1.609431)	kp_hm_hp_loss: 7.177105 (6.573751)	kp_hp_offset_loss: 0.262266 (0.245859)	kp_loss: 9.046127 (8.429033)	siammask_loss: 9.068265 (8.515538)	kp_avg_acc: 0.000000 (0.000047)
[2019-08-14 18:18:58,738-rk0-val_siamrcnn.py#277] Validation: [1339/1899]	batch_time: 0.024985 (0.026713)	data_time: 0.000089 (0.000881)	rpn_cls_loss: 0.000211 (0.001108)	rpn_loc_loss: 0.058131 (0.071156)	kp_hp_loss: 1.730921 (1.610357)	kp_hm_hp_loss: 6.845910 (6.573088)	kp_hp_offset_loss: 0.242024 (0.245925)	kp_loss: 8.818854 (8.429365)	siammask_loss: 8.888823 (8.515873)	kp_avg_acc: 0.000000 (0.000047)
[2019-08-14 18:19:00,387-rk0-val_siamrcnn.py#277] Validation: [1349/1899]	batch_time: 0.024856 (0.026700)	data_time: 0.000087 (0.000876)	rpn_cls_loss: 0.000128 (0.001101)	rpn_loc_loss: 0.016925 (0.070887)	kp_hp_loss: 1.211441 (1.609984)	kp_hm_hp_loss: 7.080610 (6.573895)	kp_hp_offset_loss: 0.251704 (0.246091)	kp_loss: 8.543755 (8.429964)	siammask_loss: 8.564193 (8.516142)	kp_avg_acc: 0.000000 (0.000046)
[2019-08-14 18:19:02,044-rk0-val_siamrcnn.py#277] Validation: [1359/1899]	batch_time: 0.024812 (0.026687)	data_time: 0.000087 (0.000871)	rpn_cls_loss: 0.000234 (0.001094)	rpn_loc_loss: 0.084262 (0.070818)	kp_hp_loss: 1.016173 (1.608238)	kp_hm_hp_loss: 6.044625 (6.572360)	kp_hp_offset_loss: 0.218107 (0.246041)	kp_loss: 7.278905 (8.426634)	siammask_loss: 7.380253 (8.512722)	kp_avg_acc: 0.000000 (0.000046)
[2019-08-14 18:19:03,700-rk0-val_siamrcnn.py#277] Validation: [1369/1899]	batch_time: 0.025022 (0.026675)	data_time: 0.000090 (0.000865)	rpn_cls_loss: 0.000192 (0.001088)	rpn_loc_loss: 0.125151 (0.070706)	kp_hp_loss: 1.971211 (1.607136)	kp_hm_hp_loss: 6.952034 (6.572991)	kp_hp_offset_loss: 0.270844 (0.246069)	kp_loss: 9.194090 (8.426190)	siammask_loss: 9.344464 (8.512138)	kp_avg_acc: 0.000000 (0.000046)
[2019-08-14 18:19:05,424-rk0-val_siamrcnn.py#277] Validation: [1379/1899]	batch_time: 0.027047 (0.026667)	data_time: 0.000100 (0.000860)	rpn_cls_loss: 0.001335 (0.001098)	rpn_loc_loss: 0.190374 (0.070739)	kp_hp_loss: 2.298096 (1.607099)	kp_hm_hp_loss: 5.946272 (6.572690)	kp_hp_offset_loss: 0.223858 (0.246083)	kp_loss: 8.468226 (8.425864)	siammask_loss: 8.698009 (8.511863)	kp_avg_acc: 0.000000 (0.000045)
[2019-08-14 18:19:07,121-rk0-val_siamrcnn.py#277] Validation: [1389/1899]	batch_time: 0.025064 (0.026657)	data_time: 0.000090 (0.000855)	rpn_cls_loss: 0.000186 (0.001092)	rpn_loc_loss: 0.146045 (0.070771)	kp_hp_loss: 1.751929 (1.607691)	kp_hm_hp_loss: 6.354851 (6.571800)	kp_hp_offset_loss: 0.265113 (0.246108)	kp_loss: 8.371893 (8.425591)	siammask_loss: 8.547333 (8.511623)	kp_avg_acc: 0.000000 (0.000045)
[2019-08-14 18:19:09,371-rk0-val_siamrcnn.py#277] Validation: [1399/1899]	batch_time: 0.024891 (0.026646)	data_time: 0.000090 (0.000850)	rpn_cls_loss: 0.000189 (0.001093)	rpn_loc_loss: 0.022350 (0.070763)	kp_hp_loss: 1.618976 (1.607359)	kp_hm_hp_loss: 6.557355 (6.571823)	kp_hp_offset_loss: 0.255313 (0.246169)	kp_loss: 8.431643 (8.425343)	siammask_loss: 8.458652 (8.511366)	kp_avg_acc: 0.000000 (0.000045)
[2019-08-14 18:19:11,490-rk0-val_siamrcnn.py#277] Validation: [1409/1899]	batch_time: 0.024950 (0.026636)	data_time: 0.000086 (0.000846)	rpn_cls_loss: 0.000133 (0.001089)	rpn_loc_loss: 0.072080 (0.070673)	kp_hp_loss: 1.209514 (1.608059)	kp_hm_hp_loss: 6.400187 (6.571324)	kp_hp_offset_loss: 0.265030 (0.246271)	kp_loss: 7.874730 (8.425643)	siammask_loss: 7.961359 (8.511554)	kp_avg_acc: 0.000000 (0.000044)
[2019-08-14 18:19:13,130-rk0-val_siamrcnn.py#277] Validation: [1419/1899]	batch_time: 0.024901 (0.026625)	data_time: 0.000090 (0.000841)	rpn_cls_loss: 0.000460 (0.001083)	rpn_loc_loss: 0.078733 (0.070517)	kp_hp_loss: 2.687930 (1.607799)	kp_hm_hp_loss: 6.175941 (6.571380)	kp_hp_offset_loss: 0.222650 (0.246159)	kp_loss: 9.086521 (8.425328)	siammask_loss: 9.181460 (8.511046)	kp_avg_acc: 0.000000 (0.000044)
[2019-08-14 18:19:14,761-rk0-val_siamrcnn.py#277] Validation: [1429/1899]	batch_time: 0.024928 (0.026616)	data_time: 0.000090 (0.000836)	rpn_cls_loss: 0.001288 (0.001081)	rpn_loc_loss: 0.039150 (0.070539)	kp_hp_loss: 2.283727 (1.608652)	kp_hm_hp_loss: 6.780962 (6.571174)	kp_hp_offset_loss: 0.288237 (0.246273)	kp_loss: 9.352927 (8.426089)	siammask_loss: 9.401196 (8.511830)	kp_avg_acc: 0.000000 (0.000044)
[2019-08-14 18:19:16,445-rk0-val_siamrcnn.py#277] Validation: [1439/1899]	batch_time: 0.024944 (0.026605)	data_time: 0.000090 (0.000831)	rpn_cls_loss: 0.000272 (0.001074)	rpn_loc_loss: 0.052298 (0.070480)	kp_hp_loss: 1.476742 (1.607965)	kp_hm_hp_loss: 6.956460 (6.572155)	kp_hp_offset_loss: 0.257540 (0.246285)	kp_loss: 8.690743 (8.426397)	siammask_loss: 8.753773 (8.512061)	kp_avg_acc: 0.000000 (0.000043)
[2019-08-14 18:19:18,267-rk0-val_siamrcnn.py#277] Validation: [1449/1899]	batch_time: 0.024913 (0.026594)	data_time: 0.000091 (0.000827)	rpn_cls_loss: 0.000334 (0.001094)	rpn_loc_loss: 0.079449 (0.070729)	kp_hp_loss: 1.036139 (1.610318)	kp_hm_hp_loss: 6.359413 (6.574331)	kp_hp_offset_loss: 0.236057 (0.246433)	kp_loss: 7.631608 (8.431072)	siammask_loss: 7.727281 (8.517053)	kp_avg_acc: 0.000000 (0.000043)
[2019-08-14 18:19:20,012-rk0-val_siamrcnn.py#277] Validation: [1459/1899]	batch_time: 0.024879 (0.026584)	data_time: 0.000095 (0.000822)	rpn_cls_loss: 0.000149 (0.001087)	rpn_loc_loss: 0.219010 (0.070960)	kp_hp_loss: 1.465801 (1.610217)	kp_hm_hp_loss: 6.951156 (6.575254)	kp_hp_offset_loss: 0.258499 (0.246415)	kp_loss: 8.675456 (8.431875)	siammask_loss: 8.938417 (8.518129)	kp_avg_acc: 0.000000 (0.000043)
[2019-08-14 18:19:21,676-rk0-val_siamrcnn.py#277] Validation: [1469/1899]	batch_time: 0.024969 (0.026574)	data_time: 0.000089 (0.000818)	rpn_cls_loss: 0.000193 (0.001082)	rpn_loc_loss: 0.018129 (0.070798)	kp_hp_loss: 1.543330 (1.609017)	kp_hm_hp_loss: 6.537323 (6.574459)	kp_hp_offset_loss: 0.252917 (0.246459)	kp_loss: 8.333570 (8.429925)	siammask_loss: 8.355517 (8.515978)	kp_avg_acc: 0.000000 (0.000043)
[2019-08-14 18:19:23,315-rk0-val_siamrcnn.py#277] Validation: [1479/1899]	batch_time: 0.024873 (0.026565)	data_time: 0.000088 (0.000814)	rpn_cls_loss: 0.000202 (0.001076)	rpn_loc_loss: 0.040951 (0.070722)	kp_hp_loss: 1.435965 (1.608191)	kp_hm_hp_loss: 6.573692 (6.573656)	kp_hp_offset_loss: 0.233184 (0.246531)	kp_loss: 8.242842 (8.428368)	siammask_loss: 8.292185 (8.514325)	kp_avg_acc: 0.000000 (0.000042)
[2019-08-14 18:19:25,022-rk0-val_siamrcnn.py#277] Validation: [1489/1899]	batch_time: 0.025173 (0.026555)	data_time: 0.000089 (0.000809)	rpn_cls_loss: 0.001733 (0.001071)	rpn_loc_loss: 0.081010 (0.071171)	kp_hp_loss: 2.173975 (1.609354)	kp_hm_hp_loss: 6.414825 (6.574491)	kp_hp_offset_loss: 0.249664 (0.246555)	kp_loss: 8.838465 (8.430391)	siammask_loss: 8.937410 (8.516880)	kp_avg_acc: 0.000000 (0.000042)
[2019-08-14 18:19:26,748-rk0-val_siamrcnn.py#277] Validation: [1499/1899]	batch_time: 0.024891 (0.026545)	data_time: 0.000089 (0.000805)	rpn_cls_loss: 0.000188 (0.001066)	rpn_loc_loss: 0.035929 (0.071137)	kp_hp_loss: 1.494691 (1.608160)	kp_hm_hp_loss: 7.090837 (6.574702)	kp_hp_offset_loss: 0.264054 (0.246633)	kp_loss: 8.849582 (8.429486)	siammask_loss: 8.892885 (8.515930)	kp_avg_acc: 0.000000 (0.000042)
[2019-08-14 18:19:28,839-rk0-val_siamrcnn.py#277] Validation: [1509/1899]	batch_time: 0.025015 (0.026536)	data_time: 0.000090 (0.000801)	rpn_cls_loss: 0.000154 (0.001060)	rpn_loc_loss: 0.056294 (0.071080)	kp_hp_loss: 1.896043 (1.607208)	kp_hm_hp_loss: 5.978024 (6.574584)	kp_hp_offset_loss: 0.225686 (0.246578)	kp_loss: 8.099751 (8.428362)	siammask_loss: 8.167458 (8.514730)	kp_avg_acc: 0.000000 (0.000041)
[2019-08-14 18:19:30,505-rk0-val_siamrcnn.py#277] Validation: [1519/1899]	batch_time: 0.024956 (0.026526)	data_time: 0.000093 (0.000797)	rpn_cls_loss: 0.000215 (0.001056)	rpn_loc_loss: 0.019830 (0.070929)	kp_hp_loss: 1.314230 (1.606837)	kp_hm_hp_loss: 6.169834 (6.574212)	kp_hp_offset_loss: 0.234408 (0.246515)	kp_loss: 7.718471 (8.427556)	siammask_loss: 7.742481 (8.513738)	kp_avg_acc: 0.000000 (0.000041)
[2019-08-14 18:19:32,178-rk0-val_siamrcnn.py#277] Validation: [1529/1899]	batch_time: 0.024911 (0.026516)	data_time: 0.000092 (0.000793)	rpn_cls_loss: 0.000186 (0.001052)	rpn_loc_loss: 0.169142 (0.070880)	kp_hp_loss: 1.583884 (1.606041)	kp_hm_hp_loss: 6.995440 (6.574181)	kp_hp_offset_loss: 0.268928 (0.246499)	kp_loss: 8.848253 (8.426714)	siammask_loss: 9.051410 (8.512834)	kp_avg_acc: 0.000000 (0.000041)
[2019-08-14 18:19:33,864-rk0-val_siamrcnn.py#277] Validation: [1539/1899]	batch_time: 0.024968 (0.026506)	data_time: 0.000088 (0.000788)	rpn_cls_loss: 0.000193 (0.001048)	rpn_loc_loss: 0.055544 (0.070759)	kp_hp_loss: 1.908108 (1.605095)	kp_hm_hp_loss: 6.229791 (6.574997)	kp_hp_offset_loss: 0.286398 (0.246516)	kp_loss: 8.424297 (8.426602)	siammask_loss: 8.491143 (8.512572)	kp_avg_acc: 0.000000 (0.000041)
[2019-08-14 18:19:35,519-rk0-val_siamrcnn.py#277] Validation: [1549/1899]	batch_time: 0.024840 (0.026497)	data_time: 0.000090 (0.000784)	rpn_cls_loss: 0.000161 (0.001045)	rpn_loc_loss: 0.027440 (0.070880)	kp_hp_loss: 1.215583 (1.605536)	kp_hm_hp_loss: 6.346171 (6.574691)	kp_hp_offset_loss: 0.271822 (0.246582)	kp_loss: 7.833577 (8.426801)	siammask_loss: 7.866665 (8.512914)	kp_avg_acc: 0.000000 (0.000040)
[2019-08-14 18:19:37,157-rk0-val_siamrcnn.py#277] Validation: [1559/1899]	batch_time: 0.024996 (0.026487)	data_time: 0.000087 (0.000780)	rpn_cls_loss: 0.000366 (0.001039)	rpn_loc_loss: 0.054249 (0.070793)	kp_hp_loss: 1.758053 (1.605601)	kp_hm_hp_loss: 6.480228 (6.576738)	kp_hp_offset_loss: 0.256041 (0.246597)	kp_loss: 8.494322 (8.428930)	siammask_loss: 8.559786 (8.514933)	kp_avg_acc: 0.000000 (0.000040)
[2019-08-14 18:19:39,633-rk0-val_siamrcnn.py#277] Validation: [1569/1899]	batch_time: 0.024855 (0.026478)	data_time: 0.000086 (0.000777)	rpn_cls_loss: 0.000194 (0.001041)	rpn_loc_loss: 0.056554 (0.070682)	kp_hp_loss: 1.590158 (1.605614)	kp_hm_hp_loss: 6.681056 (6.575927)	kp_hp_offset_loss: 0.248781 (0.246600)	kp_loss: 8.519995 (8.428134)	siammask_loss: 8.588054 (8.514005)	kp_avg_acc: 0.000000 (0.000040)
[2019-08-14 18:19:41,387-rk0-val_siamrcnn.py#277] Validation: [1579/1899]	batch_time: 0.025153 (0.026472)	data_time: 0.000090 (0.000773)	rpn_cls_loss: 0.016872 (0.001046)	rpn_loc_loss: 0.027547 (0.070682)	kp_hp_loss: 1.555222 (1.605284)	kp_hm_hp_loss: 7.287071 (6.575543)	kp_hp_offset_loss: 0.236126 (0.246520)	kp_loss: 9.078420 (8.427341)	siammask_loss: 9.128348 (8.513217)	kp_avg_acc: 0.000000 (0.000040)
[2019-08-14 18:19:43,045-rk0-val_siamrcnn.py#277] Validation: [1589/1899]	batch_time: 0.024912 (0.026463)	data_time: 0.000098 (0.000769)	rpn_cls_loss: 0.000129 (0.001043)	rpn_loc_loss: 0.057115 (0.070720)	kp_hp_loss: 1.430124 (1.604276)	kp_hm_hp_loss: 6.377386 (6.574245)	kp_hp_offset_loss: 0.239800 (0.246450)	kp_loss: 8.047310 (8.424966)	siammask_loss: 8.115976 (8.510886)	kp_avg_acc: 0.000000 (0.000039)
[2019-08-14 18:19:44,867-rk0-val_siamrcnn.py#277] Validation: [1599/1899]	batch_time: 0.025086 (0.026454)	data_time: 0.000098 (0.000765)	rpn_cls_loss: 0.000151 (0.001038)	rpn_loc_loss: 0.105748 (0.070653)	kp_hp_loss: 1.324341 (1.606183)	kp_hm_hp_loss: 6.681627 (6.575087)	kp_hp_offset_loss: 0.281556 (0.246443)	kp_loss: 8.287524 (8.427709)	siammask_loss: 8.414573 (8.513544)	kp_avg_acc: 0.000000 (0.000039)
[2019-08-14 18:19:46,570-rk0-val_siamrcnn.py#277] Validation: [1609/1899]	batch_time: 0.024840 (0.026446)	data_time: 0.000082 (0.000761)	rpn_cls_loss: 0.000164 (0.001035)	rpn_loc_loss: 0.031096 (0.070696)	kp_hp_loss: 1.448623 (1.606337)	kp_hm_hp_loss: 7.098504 (6.575724)	kp_hp_offset_loss: 0.257873 (0.246448)	kp_loss: 8.805000 (8.428505)	siammask_loss: 8.842479 (8.514388)	kp_avg_acc: 0.000000 (0.000039)
[2019-08-14 18:19:48,281-rk0-val_siamrcnn.py#277] Validation: [1619/1899]	batch_time: 0.024951 (0.026437)	data_time: 0.000090 (0.000758)	rpn_cls_loss: 0.000323 (0.001049)	rpn_loc_loss: 0.037113 (0.070677)	kp_hp_loss: 1.498109 (1.607202)	kp_hm_hp_loss: 6.344807 (6.575695)	kp_hp_offset_loss: 0.274557 (0.246456)	kp_loss: 8.117472 (8.429351)	siammask_loss: 8.162331 (8.515225)	kp_avg_acc: 0.000000 (0.000039)
[2019-08-14 18:19:49,973-rk0-val_siamrcnn.py#277] Validation: [1629/1899]	batch_time: 0.024878 (0.026429)	data_time: 0.000090 (0.000754)	rpn_cls_loss: 0.000114 (0.001044)	rpn_loc_loss: 0.110819 (0.070639)	kp_hp_loss: 1.702442 (1.608417)	kp_hm_hp_loss: 6.608477 (6.575227)	kp_hp_offset_loss: 0.258368 (0.246521)	kp_loss: 8.569286 (8.430162)	siammask_loss: 8.702383 (8.515986)	kp_avg_acc: 0.000000 (0.000038)
[2019-08-14 18:19:51,674-rk0-val_siamrcnn.py#277] Validation: [1639/1899]	batch_time: 0.024974 (0.026422)	data_time: 0.000092 (0.000751)	rpn_cls_loss: 0.000235 (0.001039)	rpn_loc_loss: 0.141156 (0.070621)	kp_hp_loss: 1.796421 (1.608759)	kp_hm_hp_loss: 6.203229 (6.575290)	kp_hp_offset_loss: 0.227402 (0.246509)	kp_loss: 8.227052 (8.430556)	siammask_loss: 8.396674 (8.516352)	kp_avg_acc: 0.000000 (0.000038)
[2019-08-14 18:19:53,463-rk0-val_siamrcnn.py#277] Validation: [1649/1899]	batch_time: 0.025039 (0.026418)	data_time: 0.000090 (0.000747)	rpn_cls_loss: 0.001017 (0.001036)	rpn_loc_loss: 0.035943 (0.070507)	kp_hp_loss: 1.655017 (1.608817)	kp_hm_hp_loss: 6.561019 (6.576845)	kp_hp_offset_loss: 0.257033 (0.246516)	kp_loss: 8.473068 (8.432179)	siammask_loss: 8.517218 (8.517835)	kp_avg_acc: 0.000000 (0.000038)
[2019-08-14 18:19:55,139-rk0-val_siamrcnn.py#277] Validation: [1659/1899]	batch_time: 0.024971 (0.026409)	data_time: 0.000093 (0.000744)	rpn_cls_loss: 0.000109 (0.001031)	rpn_loc_loss: 0.056633 (0.070427)	kp_hp_loss: 1.532654 (1.609786)	kp_hm_hp_loss: 6.513682 (6.576775)	kp_hp_offset_loss: 0.209895 (0.246505)	kp_loss: 8.256231 (8.433067)	siammask_loss: 8.324300 (8.518623)	kp_avg_acc: 0.000000 (0.000038)
[2019-08-14 18:19:56,776-rk0-val_siamrcnn.py#277] Validation: [1669/1899]	batch_time: 0.024904 (0.026401)	data_time: 0.000091 (0.000740)	rpn_cls_loss: 0.000164 (0.001028)	rpn_loc_loss: 0.024678 (0.070282)	kp_hp_loss: 1.093649 (1.608996)	kp_hm_hp_loss: 6.657993 (6.575852)	kp_hp_offset_loss: 0.261628 (0.246519)	kp_loss: 8.013270 (8.431368)	siammask_loss: 8.043048 (8.516746)	kp_avg_acc: 0.000000 (0.000037)
[2019-08-14 18:19:58,441-rk0-val_siamrcnn.py#277] Validation: [1679/1899]	batch_time: 0.024973 (0.026394)	data_time: 0.000095 (0.000737)	rpn_cls_loss: 0.000199 (0.001023)	rpn_loc_loss: 0.038523 (0.070115)	kp_hp_loss: 1.245732 (1.609721)	kp_hm_hp_loss: 6.623227 (6.574717)	kp_hp_offset_loss: 0.187272 (0.246493)	kp_loss: 8.056231 (8.430931)	siammask_loss: 8.102656 (8.516102)	kp_avg_acc: 0.000000 (0.000037)
[2019-08-14 18:20:00,079-rk0-val_siamrcnn.py#277] Validation: [1689/1899]	batch_time: 0.025102 (0.026387)	data_time: 0.000091 (0.000733)	rpn_cls_loss: 0.003280 (0.001020)	rpn_loc_loss: 0.038512 (0.070014)	kp_hp_loss: 1.822285 (1.610272)	kp_hm_hp_loss: 6.386406 (6.575097)	kp_hp_offset_loss: 0.213972 (0.246438)	kp_loss: 8.422664 (8.431806)	siammask_loss: 8.472158 (8.516854)	kp_avg_acc: 0.000000 (0.000037)
[2019-08-14 18:20:01,756-rk0-val_siamrcnn.py#277] Validation: [1699/1899]	batch_time: 0.024929 (0.026379)	data_time: 0.000087 (0.000730)	rpn_cls_loss: 0.000127 (0.001015)	rpn_loc_loss: 0.050483 (0.069917)	kp_hp_loss: 2.206376 (1.610301)	kp_hm_hp_loss: 6.555716 (6.574439)	kp_hp_offset_loss: 0.303272 (0.246518)	kp_loss: 9.065363 (8.431260)	siammask_loss: 9.126069 (8.516186)	kp_avg_acc: 0.000000 (0.000037)
[2019-08-14 18:20:04,175-rk0-val_siamrcnn.py#277] Validation: [1709/1899]	batch_time: 0.024944 (0.026373)	data_time: 0.000094 (0.000727)	rpn_cls_loss: 0.000217 (0.001010)	rpn_loc_loss: 0.114729 (0.069933)	kp_hp_loss: 1.531890 (1.611015)	kp_hm_hp_loss: 6.341806 (6.575310)	kp_hp_offset_loss: 0.263441 (0.246435)	kp_loss: 8.137137 (8.432761)	siammask_loss: 8.275029 (8.517702)	kp_avg_acc: 0.000000 (0.000037)
[2019-08-14 18:20:05,816-rk0-val_siamrcnn.py#277] Validation: [1719/1899]	batch_time: 0.025006 (0.026365)	data_time: 0.000089 (0.000724)	rpn_cls_loss: 0.000111 (0.001007)	rpn_loc_loss: 0.172857 (0.070084)	kp_hp_loss: 2.863206 (1.612310)	kp_hm_hp_loss: 6.071446 (6.574731)	kp_hp_offset_loss: 0.243184 (0.246367)	kp_loss: 9.177836 (8.433409)	siammask_loss: 9.385376 (8.518527)	kp_avg_acc: 0.000000 (0.000036)
[2019-08-14 18:20:07,494-rk0-val_siamrcnn.py#277] Validation: [1729/1899]	batch_time: 0.025546 (0.026358)	data_time: 0.000093 (0.000720)	rpn_cls_loss: 0.000217 (0.001002)	rpn_loc_loss: 0.134706 (0.070105)	kp_hp_loss: 1.260773 (1.612934)	kp_hm_hp_loss: 7.004232 (6.575314)	kp_hp_offset_loss: 0.223767 (0.246354)	kp_loss: 8.488771 (8.434605)	siammask_loss: 8.650636 (8.519743)	kp_avg_acc: 0.000000 (0.000036)
[2019-08-14 18:20:09,137-rk0-val_siamrcnn.py#277] Validation: [1739/1899]	batch_time: 0.024913 (0.026350)	data_time: 0.000090 (0.000717)	rpn_cls_loss: 0.000173 (0.000997)	rpn_loc_loss: 0.018793 (0.069999)	kp_hp_loss: 1.024102 (1.612000)	kp_hm_hp_loss: 6.351173 (6.574565)	kp_hp_offset_loss: 0.222527 (0.246290)	kp_loss: 7.597803 (8.432857)	siammask_loss: 7.620527 (8.517864)	kp_avg_acc: 0.000000 (0.000036)
[2019-08-14 18:20:10,789-rk0-val_siamrcnn.py#277] Validation: [1749/1899]	batch_time: 0.024862 (0.026343)	data_time: 0.000089 (0.000714)	rpn_cls_loss: 0.000144 (0.000993)	rpn_loc_loss: 0.090754 (0.070027)	kp_hp_loss: 2.139788 (1.613445)	kp_hm_hp_loss: 6.697016 (6.575438)	kp_hp_offset_loss: 0.256005 (0.246265)	kp_loss: 9.092809 (8.435149)	siammask_loss: 9.201859 (8.520184)	kp_avg_acc: 0.000000 (0.000036)
[2019-08-14 18:20:12,458-rk0-val_siamrcnn.py#277] Validation: [1759/1899]	batch_time: 0.024901 (0.026336)	data_time: 0.000089 (0.000711)	rpn_cls_loss: 0.000147 (0.000988)	rpn_loc_loss: 0.071308 (0.069892)	kp_hp_loss: 1.628201 (1.613421)	kp_hm_hp_loss: 7.208690 (6.575834)	kp_hp_offset_loss: 0.277840 (0.246261)	kp_loss: 9.114730 (8.435516)	siammask_loss: 9.200446 (8.520385)	kp_avg_acc: 0.000000 (0.000036)
[2019-08-14 18:20:14,119-rk0-val_siamrcnn.py#277] Validation: [1769/1899]	batch_time: 0.025050 (0.026332)	data_time: 0.000093 (0.000708)	rpn_cls_loss: 0.000134 (0.000984)	rpn_loc_loss: 0.091511 (0.069841)	kp_hp_loss: 1.765977 (1.613433)	kp_hm_hp_loss: 6.257679 (6.576391)	kp_hp_offset_loss: 0.230975 (0.246244)	kp_loss: 8.254631 (8.436068)	siammask_loss: 8.364578 (8.520871)	kp_avg_acc: 0.000000 (0.000035)
[2019-08-14 18:20:15,744-rk0-val_siamrcnn.py#277] Validation: [1779/1899]	batch_time: 0.024961 (0.026324)	data_time: 0.000089 (0.000705)	rpn_cls_loss: 0.003422 (0.000983)	rpn_loc_loss: 0.054424 (0.069723)	kp_hp_loss: 1.405789 (1.612359)	kp_hm_hp_loss: 6.956180 (6.576450)	kp_hp_offset_loss: 0.279768 (0.246178)	kp_loss: 8.641736 (8.434986)	siammask_loss: 8.710467 (8.519646)	kp_avg_acc: 0.000000 (0.000035)
[2019-08-14 18:20:17,750-rk0-val_siamrcnn.py#277] Validation: [1789/1899]	batch_time: 0.024916 (0.026319)	data_time: 0.000088 (0.000702)	rpn_cls_loss: 0.000206 (0.000979)	rpn_loc_loss: 0.072060 (0.069856)	kp_hp_loss: 1.990137 (1.612405)	kp_hm_hp_loss: 6.670413 (6.576113)	kp_hp_offset_loss: 0.203361 (0.246143)	kp_loss: 8.863911 (8.434659)	siammask_loss: 8.950588 (8.519476)	kp_avg_acc: 0.000000 (0.000035)
[2019-08-14 18:20:19,474-rk0-val_siamrcnn.py#277] Validation: [1799/1899]	batch_time: 0.024913 (0.026313)	data_time: 0.000087 (0.000699)	rpn_cls_loss: 0.000164 (0.000975)	rpn_loc_loss: 0.066388 (0.069914)	kp_hp_loss: 1.022987 (1.610904)	kp_hm_hp_loss: 6.298128 (6.575545)	kp_hp_offset_loss: 0.228929 (0.246102)	kp_loss: 7.550044 (8.432550)	siammask_loss: 7.629873 (8.517432)	kp_avg_acc: 0.000000 (0.000035)
[2019-08-14 18:20:21,118-rk0-val_siamrcnn.py#277] Validation: [1809/1899]	batch_time: 0.024903 (0.026307)	data_time: 0.000090 (0.000696)	rpn_cls_loss: 0.000100 (0.000975)	rpn_loc_loss: 0.070338 (0.069861)	kp_hp_loss: 1.205048 (1.612124)	kp_hm_hp_loss: 6.073492 (6.575316)	kp_hp_offset_loss: 0.219219 (0.246141)	kp_loss: 7.497758 (8.433579)	siammask_loss: 7.582263 (8.518396)	kp_avg_acc: 0.000000 (0.000035)
[2019-08-14 18:20:22,800-rk0-val_siamrcnn.py#277] Validation: [1819/1899]	batch_time: 0.024953 (0.026300)	data_time: 0.000090 (0.000693)	rpn_cls_loss: 0.000263 (0.000974)	rpn_loc_loss: 0.048685 (0.069850)	kp_hp_loss: 1.724961 (1.611956)	kp_hm_hp_loss: 6.714693 (6.575636)	kp_hp_offset_loss: 0.288301 (0.246181)	kp_loss: 8.727954 (8.433771)	siammask_loss: 8.786639 (8.518575)	kp_avg_acc: 0.000000 (0.000034)
[2019-08-14 18:20:24,470-rk0-val_siamrcnn.py#277] Validation: [1829/1899]	batch_time: 0.024977 (0.026294)	data_time: 0.000099 (0.000690)	rpn_cls_loss: 0.000128 (0.000970)	rpn_loc_loss: 0.050512 (0.069776)	kp_hp_loss: 1.542913 (1.612125)	kp_hm_hp_loss: 6.214221 (6.575483)	kp_hp_offset_loss: 0.206374 (0.246115)	kp_loss: 7.963508 (8.433723)	siammask_loss: 8.024251 (8.518432)	kp_avg_acc: 0.000000 (0.000034)
[2019-08-14 18:20:26,187-rk0-val_siamrcnn.py#277] Validation: [1839/1899]	batch_time: 0.024949 (0.026287)	data_time: 0.000098 (0.000687)	rpn_cls_loss: 0.000120 (0.000965)	rpn_loc_loss: 0.016417 (0.069675)	kp_hp_loss: 1.178765 (1.612659)	kp_hm_hp_loss: 6.591321 (6.574557)	kp_hp_offset_loss: 0.277687 (0.246150)	kp_loss: 8.047773 (8.433366)	siammask_loss: 8.067594 (8.517950)	kp_avg_acc: 0.000000 (0.000034)
[2019-08-14 18:20:27,797-rk0-val_siamrcnn.py#277] Validation: [1849/1899]	batch_time: 0.024853 (0.026280)	data_time: 0.000078 (0.000684)	rpn_cls_loss: 0.000141 (0.000964)	rpn_loc_loss: 0.033314 (0.069738)	kp_hp_loss: 1.752115 (1.614675)	kp_hm_hp_loss: 6.317082 (6.574618)	kp_hp_offset_loss: 0.273068 (0.246100)	kp_loss: 8.342264 (8.435392)	siammask_loss: 8.382382 (8.520051)	kp_avg_acc: 0.000000 (0.000034)
[2019-08-14 18:20:29,523-rk0-val_siamrcnn.py#277] Validation: [1859/1899]	batch_time: 0.024869 (0.026274)	data_time: 0.000092 (0.000681)	rpn_cls_loss: 0.000168 (0.000960)	rpn_loc_loss: 0.155825 (0.069973)	kp_hp_loss: 1.917365 (1.616182)	kp_hm_hp_loss: 6.700562 (6.574472)	kp_hp_offset_loss: 0.190148 (0.246108)	kp_loss: 8.808074 (8.436760)	siammask_loss: 8.995232 (8.521697)	kp_avg_acc: 0.000000 (0.000034)
[2019-08-14 18:20:31,149-rk0-val_siamrcnn.py#277] Validation: [1869/1899]	batch_time: 0.024855 (0.026268)	data_time: 0.000091 (0.000679)	rpn_cls_loss: 0.000158 (0.000956)	rpn_loc_loss: 0.027664 (0.069921)	kp_hp_loss: 1.124893 (1.615848)	kp_hm_hp_loss: 6.003613 (6.575044)	kp_hp_offset_loss: 0.262139 (0.246159)	kp_loss: 7.390644 (8.437048)	siammask_loss: 7.423998 (8.521919)	kp_avg_acc: 0.000000 (0.000033)
[2019-08-14 18:20:33,035-rk0-val_siamrcnn.py#277] Validation: [1879/1899]	batch_time: 0.024957 (0.026261)	data_time: 0.000089 (0.000676)	rpn_cls_loss: 0.000203 (0.000952)	rpn_loc_loss: 0.021067 (0.069931)	kp_hp_loss: 1.264146 (1.616497)	kp_hm_hp_loss: 6.644528 (6.575406)	kp_hp_offset_loss: 0.280791 (0.246265)	kp_loss: 8.189465 (8.438165)	siammask_loss: 8.214948 (8.523044)	kp_avg_acc: 0.000000 (0.000033)
[2019-08-14 18:20:34,773-rk0-val_siamrcnn.py#277] Validation: [1889/1899]	batch_time: 0.025524 (0.026257)	data_time: 0.000104 (0.000673)	rpn_cls_loss: 0.000733 (0.000948)	rpn_loc_loss: 0.193731 (0.069990)	kp_hp_loss: 0.842850 (1.615416)	kp_hm_hp_loss: 6.643208 (6.575955)	kp_hp_offset_loss: 0.235813 (0.246204)	kp_loss: 7.721871 (8.437571)	siammask_loss: 7.955081 (8.522517)	kp_avg_acc: 0.000000 (0.000033)
