[2019-08-11 16:53:45,007-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-11 16:53:45,125-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-11 16:53:45,127-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-11 16:53:45,127-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-11 16:53:45,161-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-11 16:53:48,362-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-11 16:53:48,397-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-11 16:53:48,463-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,464-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-11 16:53:48,466-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-11 16:53:48,533-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,533-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-11 16:53:48,534-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-11 16:53:48,535-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-11 16:53:48,686-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-11 16:53:48,688-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-11 16:53:48,691-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,691-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-11 16:53:48,691-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-11 16:53:48,694-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-11 16:53:48,695-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-11 16:53:48,695-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-11 16:54:02,237-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-11 16:54:02,959-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-11 16:54:02,961-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked'}
[2019-08-11 16:54:02,962-rk0-load_helper.py# 14] missing keys:53
[2019-08-11 16:54:02,962-rk0-load_helper.py# 18] used keys:265
[2019-08-11 16:54:03,041-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-11 16:54:03,043-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-11 16:54:03,206-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-11 16:54:03,211-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-11 16:54:04,216-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-11 16:54:04,218-rk0-load_helper.py# 18] used keys:438
[2019-08-11 16:54:04,361-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-11 16:54:10,379-rk0-val_siamrcnn.py#268] Validation: [9/1899]	batch_time: 0.122605 (0.480318)	data_time: 0.000105 (0.082775)	rpn_cls_loss: 0.000299 (0.000552)	rpn_loc_loss: 0.023440 (0.064378)	kp_hp_loss: 0.826769 (1.126935)	kp_hm_hp_loss: 0.692127 (1.154266)	kp_hp_offset_loss: 0.221064 (0.238177)	kp_loss: 1.739960 (2.519377)	siammask_loss: 1.768386 (2.597183)	kp_avg_acc: 0.769231 (0.670418)
[2019-08-11 16:54:13,057-rk0-val_siamrcnn.py#268] Validation: [19/1899]	batch_time: 0.118690 (0.300129)	data_time: 0.000079 (0.041494)	rpn_cls_loss: 0.000190 (0.000431)	rpn_loc_loss: 0.202197 (0.069948)	kp_hp_loss: 0.637088 (1.134469)	kp_hm_hp_loss: 0.647889 (1.134924)	kp_hp_offset_loss: 0.236412 (0.236957)	kp_loss: 1.521389 (2.506349)	siammask_loss: 1.764215 (2.590717)	kp_avg_acc: 1.000000 (0.654243)
[2019-08-11 16:54:14,894-rk0-val_siamrcnn.py#268] Validation: [29/1899]	batch_time: 0.120921 (0.240740)	data_time: 0.000081 (0.027719)	rpn_cls_loss: 0.000150 (0.000535)	rpn_loc_loss: 0.091921 (0.068747)	kp_hp_loss: 1.067210 (0.972996)	kp_hm_hp_loss: 0.732790 (0.898239)	kp_hp_offset_loss: 0.280232 (0.234883)	kp_loss: 2.080233 (2.106119)	siammask_loss: 2.190688 (2.189150)	kp_avg_acc: 0.866667 (0.710843)
[2019-08-11 16:54:16,757-rk0-val_siamrcnn.py#268] Validation: [39/1899]	batch_time: 0.121434 (0.212219)	data_time: 0.000081 (0.020835)	rpn_cls_loss: 0.000143 (0.000696)	rpn_loc_loss: 0.040076 (0.064327)	kp_hp_loss: 0.732022 (0.949049)	kp_hm_hp_loss: 0.323760 (0.824627)	kp_hp_offset_loss: 0.214614 (0.237059)	kp_loss: 1.270395 (2.010735)	siammask_loss: 1.318629 (2.088623)	kp_avg_acc: 0.700000 (0.703349)
[2019-08-11 16:54:18,912-rk0-val_siamrcnn.py#268] Validation: [49/1899]	batch_time: 0.121749 (0.194018)	data_time: 0.000081 (0.016702)	rpn_cls_loss: 0.000185 (0.000619)	rpn_loc_loss: 0.037381 (0.063450)	kp_hp_loss: 1.470598 (0.929681)	kp_hm_hp_loss: 1.077496 (0.804330)	kp_hp_offset_loss: 0.191720 (0.237769)	kp_loss: 2.739814 (1.971780)	siammask_loss: 2.784857 (2.048538)	kp_avg_acc: 0.466667 (0.708581)
[2019-08-11 16:54:20,762-rk0-val_siamrcnn.py#268] Validation: [59/1899]	batch_time: 0.119792 (0.181858)	data_time: 0.000087 (0.013949)	rpn_cls_loss: 0.000119 (0.000579)	rpn_loc_loss: 0.093470 (0.064219)	kp_hp_loss: 0.744684 (0.996667)	kp_hm_hp_loss: 0.208839 (0.825873)	kp_hp_offset_loss: 0.186285 (0.237453)	kp_loss: 1.139809 (2.059993)	siammask_loss: 1.252092 (2.137636)	kp_avg_acc: 0.857143 (0.679865)
[2019-08-11 16:54:22,592-rk0-val_siamrcnn.py#268] Validation: [69/1899]	batch_time: 0.119731 (0.173105)	data_time: 0.000096 (0.011981)	rpn_cls_loss: 0.000159 (0.000549)	rpn_loc_loss: 0.051401 (0.061847)	kp_hp_loss: 0.430786 (0.956237)	kp_hm_hp_loss: 0.238211 (0.775393)	kp_hp_offset_loss: 0.196379 (0.233927)	kp_loss: 0.865376 (1.965557)	siammask_loss: 0.927216 (2.040322)	kp_avg_acc: 0.769231 (0.697665)
[2019-08-11 16:54:24,400-rk0-val_siamrcnn.py#268] Validation: [79/1899]	batch_time: 0.120030 (0.166639)	data_time: 0.000088 (0.010504)	rpn_cls_loss: 0.000140 (0.000508)	rpn_loc_loss: 0.020059 (0.064984)	kp_hp_loss: 0.899677 (0.963541)	kp_hm_hp_loss: 1.532452 (0.811185)	kp_hp_offset_loss: 0.180744 (0.232886)	kp_loss: 2.612873 (2.007613)	siammask_loss: 2.637084 (2.086101)	kp_avg_acc: 0.733333 (0.693702)
[2019-08-11 16:54:26,219-rk0-val_siamrcnn.py#268] Validation: [89/1899]	batch_time: 0.120263 (0.161600)	data_time: 0.000084 (0.009356)	rpn_cls_loss: 0.000116 (0.000487)	rpn_loc_loss: 0.021493 (0.067199)	kp_hp_loss: 1.454587 (0.959487)	kp_hm_hp_loss: 1.124995 (0.823628)	kp_hp_offset_loss: 0.254532 (0.233458)	kp_loss: 2.834113 (2.016572)	siammask_loss: 2.860021 (2.097697)	kp_avg_acc: 0.466667 (0.697954)
[2019-08-11 16:54:28,137-rk0-val_siamrcnn.py#268] Validation: [99/1899]	batch_time: 0.119411 (0.157540)	data_time: 0.000090 (0.008437)	rpn_cls_loss: 0.000370 (0.000465)	rpn_loc_loss: 0.140829 (0.067740)	kp_hp_loss: 0.783935 (0.950408)	kp_hm_hp_loss: 0.398002 (0.813960)	kp_hp_offset_loss: 0.276322 (0.232031)	kp_loss: 1.458259 (1.996399)	siammask_loss: 1.627625 (2.078152)	kp_avg_acc: 0.692308 (0.707418)
[2019-08-12 13:36:46,628-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:36:46,643-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:36:46,647-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:36:46,647-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:36:46,685-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:36:50,071-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:36:50,109-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:36:50,184-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,185-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:36:50,191-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:36:50,280-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,280-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:36:50,281-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:36:50,282-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:36:50,386-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:36:50,388-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:36:50,391-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,392-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:36:50,392-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:36:50,395-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:36:50,395-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:36:50,395-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:36:56,434-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:36:56,722-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:36:56,724-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked'}
[2019-08-12 13:36:56,724-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:36:56,724-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:36:56,802-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:36:56,804-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:36:56,947-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:36:56,951-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:36:58,495-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:36:58,497-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:36:58,667-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:40:04,400-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:40:04,402-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:40:04,406-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:40:04,407-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:40:04,412-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:40:07,472-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:40:07,511-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:40:07,580-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,581-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:40:07,587-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:40:07,656-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,657-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:40:07,657-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:40:07,659-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:40:07,755-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:40:07,757-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:40:07,760-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,761-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:40:07,761-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:40:07,764-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:40:07,764-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:40:07,765-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:40:13,137-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:40:13,450-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:40:13,452-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked'}
[2019-08-12 13:40:13,453-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:40:13,453-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:40:13,511-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:40:13,513-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:40:13,710-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:40:13,715-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:40:14,101-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:40:14,103-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:40:14,225-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:42:45,957-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:42:45,958-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:42:45,966-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:42:45,967-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:42:45,971-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:42:49,685-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:42:49,722-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:42:49,795-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,796-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:42:49,800-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:42:49,876-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,876-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:42:49,877-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:42:49,878-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:42:49,984-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:42:49,987-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:42:49,990-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,990-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:42:49,991-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:42:49,994-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:42:49,994-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:42:49,995-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:42:54,952-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:42:55,294-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:42:55,295-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked'}
[2019-08-12 13:42:55,296-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:42:55,296-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:42:55,404-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:42:55,406-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:42:55,568-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:42:55,573-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:42:56,028-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:42:56,031-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:42:56,197-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:45:23,730-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:45:23,732-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:45:23,736-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:45:23,737-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:45:23,740-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:45:27,143-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:45:27,177-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:45:27,244-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,244-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:45:27,247-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:45:27,313-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,314-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:45:27,314-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:45:27,316-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:45:27,410-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:45:27,412-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:45:27,415-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,415-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:45:27,416-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:45:27,419-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:45:27,419-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:45:27,419-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:45:32,809-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:45:33,154-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:45:33,156-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.2.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked'}
[2019-08-12 13:45:33,157-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:45:33,157-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:45:33,227-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:45:33,229-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:45:33,400-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:45:33,407-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:45:33,843-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:45:33,845-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:45:34,068-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:46:54,778-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:46:54,780-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:46:54,784-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:46:54,785-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:46:54,788-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:46:57,744-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:46:57,780-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:46:57,847-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:57,847-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:46:57,850-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:46:57,916-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:57,917-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:46:57,917-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:46:57,919-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:46:58,012-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:46:58,014-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:46:58,019-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:58,020-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:46:58,020-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:46:58,023-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:46:58,023-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:46:58,024-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:47:03,631-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:47:03,927-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:47:03,932-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked'}
[2019-08-12 13:47:03,933-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:47:03,933-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:47:03,993-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:47:03,995-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:47:04,134-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:47:04,138-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:47:04,490-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:47:04,493-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:47:04,618-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:48:22,771-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:48:22,773-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:48:22,778-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:48:22,779-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:48:22,784-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:48:25,840-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:48:25,877-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:48:25,942-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:25,943-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:48:25,946-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:48:26,011-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:26,012-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:48:26,012-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:48:26,014-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:48:26,111-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:48:26,113-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:48:26,116-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:26,117-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:48:26,117-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:48:26,120-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:48:26,121-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:48:26,121-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:48:31,141-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:48:31,414-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:48:31,416-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.2.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked'}
[2019-08-12 13:48:31,417-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:48:31,417-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:48:31,485-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:48:31,487-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:48:31,631-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:48:31,636-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:48:32,131-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:48:32,134-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:48:32,326-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:49:27,084-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 13:49:27,085-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 13:49:27,089-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 13:49:27,090-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 13:49:27,095-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 13:49:30,235-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 13:49:30,270-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 13:49:30,335-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,335-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:49:30,341-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 13:49:30,431-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,431-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 13:49:30,432-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 13:49:30,434-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 13:49:30,555-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 13:49:30,557-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 13:49:30,561-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,561-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:49:30,562-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 13:49:30,565-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 13:49:30,566-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 13:49:30,566-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 13:49:35,978-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 13:49:36,265-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:49:36,266-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked'}
[2019-08-12 13:49:36,267-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 13:49:36,267-rk0-load_helper.py# 18] used keys:265
[2019-08-12 13:49:36,332-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 13:49:36,333-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 13:49:36,467-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 13:49:36,471-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 13:49:36,897-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 13:49:36,899-rk0-load_helper.py# 18] used keys:438
[2019-08-12 13:49:37,072-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 13:49:42,262-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.134622 (0.411485)	data_time: 0.000142 (0.036034)	rpn_cls_loss: 0.000261 (0.000158)	rpn_loc_loss: 0.023668 (0.050986)	kp_hp_loss: 0.667292 (0.930651)	kp_hm_hp_loss: 6.815481 (6.885932)	kp_hp_offset_loss: 0.209148 (0.247384)	kp_loss: 7.691922 (8.063966)	siammask_loss: 7.720585 (8.125307)	kp_avg_acc: 0.000000 (0.016667)
[2019-08-12 13:49:44,510-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.156903 (0.281220)	data_time: 0.000526 (0.018170)	rpn_cls_loss: 0.000153 (0.000183)	rpn_loc_loss: 0.038461 (0.056939)	kp_hp_loss: 0.312371 (0.950944)	kp_hm_hp_loss: 7.301278 (6.693772)	kp_hp_offset_loss: 0.226856 (0.245220)	kp_loss: 7.840505 (7.889935)	siammask_loss: 7.886810 (7.958445)	kp_avg_acc: 0.000000 (0.017424)
[2019-08-12 13:49:46,810-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.146996 (0.238289)	data_time: 0.000158 (0.012225)	rpn_cls_loss: 0.000144 (0.000175)	rpn_loc_loss: 0.018719 (0.058711)	kp_hp_loss: 0.344952 (0.909912)	kp_hm_hp_loss: 7.565311 (6.689185)	kp_hp_offset_loss: 0.223120 (0.237305)	kp_loss: 8.133383 (7.836401)	siammask_loss: 8.155990 (7.907030)	kp_avg_acc: 0.000000 (0.027449)
[2019-08-12 13:49:49,274-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.140370 (0.219564)	data_time: 0.000275 (0.009254)	rpn_cls_loss: 0.000349 (0.000206)	rpn_loc_loss: 0.038944 (0.058510)	kp_hp_loss: 0.552428 (0.906791)	kp_hm_hp_loss: 7.089451 (6.681816)	kp_hp_offset_loss: 0.219190 (0.234277)	kp_loss: 7.861069 (7.822884)	siammask_loss: 7.908151 (7.893303)	kp_avg_acc: 0.000000 (0.027879)
[2019-08-12 13:49:51,166-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.133537 (0.201692)	data_time: 0.000185 (0.007452)	rpn_cls_loss: 0.000178 (0.000534)	rpn_loc_loss: 0.073556 (0.058274)	kp_hp_loss: 0.739448 (0.822965)	kp_hm_hp_loss: 6.855644 (6.723308)	kp_hp_offset_loss: 0.211611 (0.231962)	kp_loss: 7.806703 (7.778234)	siammask_loss: 7.895148 (7.848697)	kp_avg_acc: 0.000000 (0.022303)
[2019-08-12 13:49:53,074-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.126394 (0.189842)	data_time: 0.000113 (0.006247)	rpn_cls_loss: 0.000265 (0.000477)	rpn_loc_loss: 0.085295 (0.059199)	kp_hp_loss: 0.374828 (0.823296)	kp_hm_hp_loss: 5.820361 (6.645869)	kp_hp_offset_loss: 0.251314 (0.230562)	kp_loss: 6.446502 (7.699728)	siammask_loss: 6.549122 (7.771244)	kp_avg_acc: 0.250000 (0.032633)
[2019-08-12 13:49:54,974-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.146711 (0.180993)	data_time: 0.000118 (0.005385)	rpn_cls_loss: 0.000138 (0.000437)	rpn_loc_loss: 0.125050 (0.066049)	kp_hp_loss: 0.282809 (0.830431)	kp_hm_hp_loss: 6.382219 (6.652125)	kp_hp_offset_loss: 0.239987 (0.232348)	kp_loss: 6.905015 (7.714905)	siammask_loss: 7.055213 (7.794600)	kp_avg_acc: 0.000000 (0.032138)
[2019-08-12 13:49:56,839-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.122714 (0.174027)	data_time: 0.000117 (0.004740)	rpn_cls_loss: 0.000192 (0.000580)	rpn_loc_loss: 0.026532 (0.065329)	kp_hp_loss: 0.869308 (0.815093)	kp_hm_hp_loss: 6.661033 (6.700407)	kp_hp_offset_loss: 0.213396 (0.233614)	kp_loss: 7.743737 (7.749114)	siammask_loss: 7.775768 (7.828088)	kp_avg_acc: 0.111111 (0.029510)
[2019-08-12 13:49:59,542-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.183643 (0.172781)	data_time: 0.000211 (0.004246)	rpn_cls_loss: 0.000197 (0.000536)	rpn_loc_loss: 0.098478 (0.066921)	kp_hp_loss: 0.396269 (0.820743)	kp_hm_hp_loss: 6.528193 (6.657072)	kp_hp_offset_loss: 0.223122 (0.232856)	kp_loss: 7.147584 (7.710672)	siammask_loss: 7.265954 (7.791512)	kp_avg_acc: 0.000000 (0.029093)
[2019-08-12 13:50:01,953-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.151731 (0.171762)	data_time: 0.000236 (0.003854)	rpn_cls_loss: 0.000351 (0.000502)	rpn_loc_loss: 0.051207 (0.066812)	kp_hp_loss: 1.005280 (0.836540)	kp_hm_hp_loss: 6.491477 (6.663490)	kp_hp_offset_loss: 0.310025 (0.232481)	kp_loss: 7.806783 (7.732512)	siammask_loss: 7.868583 (7.813186)	kp_avg_acc: 0.000000 (0.029517)
[2019-08-12 14:01:01,432-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:01:01,434-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:01:01,439-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:01:01,439-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:01:01,495-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:01:04,679-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:01:04,714-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:01:04,783-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,784-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:01:04,786-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:01:04,854-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,854-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:01:04,855-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:01:04,856-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:01:04,953-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:01:04,955-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:01:04,958-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,958-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:01:04,958-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:01:04,961-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:01:04,962-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:01:04,962-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:01:11,069-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:01:11,378-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:01:11,380-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.1.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked'}
[2019-08-12 14:01:11,381-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:01:11,381-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:01:11,470-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:01:11,473-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:01:11,684-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:01:11,688-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:01:12,166-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:01:12,169-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:01:12,331-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:01:16,956-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.129150 (0.393254)	data_time: 0.000140 (0.043057)	rpn_cls_loss: 0.000215 (0.000174)	rpn_loc_loss: 0.119679 (0.066767)	kp_hp_loss: 0.507169 (0.836735)	kp_hm_hp_loss: 6.690080 (6.488668)	kp_hp_offset_loss: 0.285086 (0.257764)	kp_loss: 7.482335 (7.583167)	siammask_loss: 7.626164 (7.663460)	kp_avg_acc: 0.000000 (0.022500)
[2019-08-12 14:01:19,050-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.143045 (0.267315)	data_time: 0.000134 (0.021648)	rpn_cls_loss: 0.000218 (0.000227)	rpn_loc_loss: 0.022245 (0.082000)	kp_hp_loss: 0.698293 (0.832030)	kp_hm_hp_loss: 6.910457 (6.491615)	kp_hp_offset_loss: 0.236758 (0.245226)	kp_loss: 7.845508 (7.568871)	siammask_loss: 7.872420 (7.667497)	kp_avg_acc: 0.000000 (0.025139)
[2019-08-12 14:01:21,241-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.140259 (0.227386)	data_time: 0.000223 (0.014533)	rpn_cls_loss: 0.000182 (0.000447)	rpn_loc_loss: 0.036083 (0.076528)	kp_hp_loss: 0.990100 (0.842130)	kp_hm_hp_loss: 6.510998 (6.524550)	kp_hp_offset_loss: 0.295759 (0.241805)	kp_loss: 7.796857 (7.608487)	siammask_loss: 7.840339 (7.700767)	kp_avg_acc: 0.071429 (0.036204)
[2019-08-12 14:01:23,407-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.138824 (0.207263)	data_time: 0.000146 (0.010975)	rpn_cls_loss: 0.000723 (0.000398)	rpn_loc_loss: 0.028708 (0.071600)	kp_hp_loss: 0.811888 (0.816453)	kp_hm_hp_loss: 6.555377 (6.534530)	kp_hp_offset_loss: 0.207375 (0.237057)	kp_loss: 7.574639 (7.588041)	siammask_loss: 7.609811 (7.674358)	kp_avg_acc: 0.000000 (0.033403)
[2019-08-12 14:01:25,676-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.140897 (0.196438)	data_time: 0.000119 (0.008845)	rpn_cls_loss: 0.000108 (0.000360)	rpn_loc_loss: 0.036098 (0.065630)	kp_hp_loss: 0.420471 (0.777866)	kp_hm_hp_loss: 7.155550 (6.556276)	kp_hp_offset_loss: 0.181681 (0.232681)	kp_loss: 7.757701 (7.566824)	siammask_loss: 7.801127 (7.645940)	kp_avg_acc: 0.000000 (0.030722)
[2019-08-12 14:01:28,041-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.154849 (0.190112)	data_time: 0.000145 (0.007421)	rpn_cls_loss: 0.000150 (0.000330)	rpn_loc_loss: 0.037789 (0.067372)	kp_hp_loss: 0.536426 (0.755361)	kp_hm_hp_loss: 6.299927 (6.595760)	kp_hp_offset_loss: 0.231665 (0.231207)	kp_loss: 7.068019 (7.582327)	siammask_loss: 7.113516 (7.663503)	kp_avg_acc: 0.000000 (0.030299)
[2019-08-12 14:01:30,409-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.172999 (0.185791)	data_time: 0.000247 (0.006407)	rpn_cls_loss: 0.000294 (0.000314)	rpn_loc_loss: 0.021721 (0.066454)	kp_hp_loss: 0.673020 (0.733846)	kp_hm_hp_loss: 6.584874 (6.607452)	kp_hp_offset_loss: 0.205383 (0.229411)	kp_loss: 7.463276 (7.570707)	siammask_loss: 7.489635 (7.650767)	kp_avg_acc: 0.000000 (0.031979)
[2019-08-12 14:01:32,673-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.165428 (0.181733)	data_time: 0.000213 (0.005644)	rpn_cls_loss: 0.000504 (0.000364)	rpn_loc_loss: 0.074081 (0.067171)	kp_hp_loss: 0.791627 (0.781292)	kp_hm_hp_loss: 5.679031 (6.606155)	kp_hp_offset_loss: 0.198750 (0.230612)	kp_loss: 6.669409 (7.618056)	siammask_loss: 6.758811 (7.699026)	kp_avg_acc: 0.000000 (0.027982)
[2019-08-12 14:01:35,054-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.165355 (0.179778)	data_time: 0.000138 (0.005046)	rpn_cls_loss: 0.000169 (0.000354)	rpn_loc_loss: 0.066579 (0.066392)	kp_hp_loss: 3.907241 (0.781795)	kp_hm_hp_loss: 7.027899 (6.628749)	kp_hp_offset_loss: 0.309753 (0.230050)	kp_loss: 11.244893 (7.640593)	siammask_loss: 11.324957 (7.720619)	kp_avg_acc: 0.000000 (0.029040)
[2019-08-12 14:01:37,383-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.155081 (0.177521)	data_time: 0.000143 (0.004567)	rpn_cls_loss: 0.000113 (0.000339)	rpn_loc_loss: 0.023733 (0.064379)	kp_hp_loss: 0.311062 (0.766547)	kp_hm_hp_loss: 6.625135 (6.631339)	kp_hp_offset_loss: 0.230940 (0.230436)	kp_loss: 7.167138 (7.628319)	siammask_loss: 7.195730 (7.705915)	kp_avg_acc: 0.000000 (0.029231)
[2019-08-12 14:04:25,968-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:04:25,969-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:04:25,972-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:04:25,973-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:04:25,976-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:04:29,443-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:04:29,480-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:04:29,549-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,549-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:04:29,552-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:04:29,621-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,621-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:04:29,621-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:04:29,623-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:04:29,718-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:04:29,720-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:04:29,723-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,724-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:04:29,724-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:04:29,727-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:04:29,727-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:04:29,727-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:04:35,271-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:04:35,634-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:04:35,636-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked'}
[2019-08-12 14:04:35,637-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:04:35,637-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:04:35,712-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:04:35,714-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:04:35,871-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:04:35,876-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:04:36,270-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:04:36,272-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:04:36,463-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:05:49,472-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:05:49,473-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:05:49,476-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:05:49,476-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:05:49,478-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:05:52,601-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:05:52,635-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:05:52,703-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,704-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:05:52,706-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:05:52,771-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,771-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:05:52,772-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:05:52,773-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:05:52,870-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:05:52,872-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:05:52,875-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,875-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:05:52,876-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:05:52,879-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:05:52,879-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:05:52,879-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:05:57,803-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:05:58,113-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:05:58,115-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked'}
[2019-08-12 14:05:58,115-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:05:58,115-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:05:58,182-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:05:58,184-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:05:58,318-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:05:58,322-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:05:58,706-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:05:58,708-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:05:58,862-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:07:15,040-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:07:15,041-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:07:15,044-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:07:15,045-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:07:15,049-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:07:18,794-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:07:18,833-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:07:18,910-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:18,911-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:07:18,919-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:07:19,010-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:19,011-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:07:19,012-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:07:19,014-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:07:19,140-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:07:19,142-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:07:19,145-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:19,146-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:07:19,146-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:07:19,149-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:07:19,149-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:07:19,150-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:07:24,318-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:07:24,603-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:07:24,604-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked'}
[2019-08-12 14:07:24,605-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:07:24,605-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:07:24,680-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:07:24,682-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:07:24,831-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:07:24,834-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:07:25,235-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:07:25,238-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:07:25,454-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:07:30,087-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.188927 (0.383345)	data_time: 0.000153 (0.024649)	rpn_cls_loss: 0.000159 (0.000206)	rpn_loc_loss: 0.055509 (0.057570)	kp_hp_loss: 1.100339 (0.839253)	kp_hm_hp_loss: 7.858043 (9.590490)	kp_hp_offset_loss: 0.242547 (0.225397)	kp_loss: 9.200930 (10.655138)	siammask_loss: 9.267699 (10.724428)	kp_avg_acc: 0.000000 (0.040000)
[2019-08-12 14:07:32,479-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.181944 (0.273831)	data_time: 0.000244 (0.012460)	rpn_cls_loss: 0.000106 (0.000192)	rpn_loc_loss: 0.015024 (0.076810)	kp_hp_loss: 0.892544 (0.833463)	kp_hm_hp_loss: 11.785314 (9.992783)	kp_hp_offset_loss: 0.273516 (0.231547)	kp_loss: 12.951373 (11.057791)	siammask_loss: 12.969507 (11.150155)	kp_avg_acc: 0.000000 (0.020000)
[2019-08-12 14:07:34,817-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.159326 (0.236180)	data_time: 0.000521 (0.008406)	rpn_cls_loss: 0.000118 (0.000238)	rpn_loc_loss: 0.024499 (0.068199)	kp_hp_loss: 0.786760 (0.851981)	kp_hm_hp_loss: 12.497476 (10.267300)	kp_hp_offset_loss: 0.227563 (0.232462)	kp_loss: 13.511798 (11.351743)	siammask_loss: 13.541315 (11.433819)	kp_avg_acc: 0.000000 (0.030000)
[2019-08-12 14:07:37,478-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.180232 (0.222912)	data_time: 0.000153 (0.006394)	rpn_cls_loss: 0.000160 (0.000225)	rpn_loc_loss: 0.019064 (0.065635)	kp_hp_loss: 0.703402 (0.812089)	kp_hm_hp_loss: 9.131620 (9.979748)	kp_hp_offset_loss: 0.206763 (0.227062)	kp_loss: 10.041785 (11.018898)	siammask_loss: 10.064821 (11.097886)	kp_avg_acc: 0.000000 (0.035625)
[2019-08-12 14:07:39,772-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.153783 (0.210339)	data_time: 0.000357 (0.005176)	rpn_cls_loss: 0.000167 (0.000221)	rpn_loc_loss: 0.041174 (0.063967)	kp_hp_loss: 1.135532 (0.777494)	kp_hm_hp_loss: 6.417710 (9.726780)	kp_hp_offset_loss: 0.212669 (0.227276)	kp_loss: 7.765912 (10.731550)	siammask_loss: 7.815488 (10.808531)	kp_avg_acc: 0.000000 (0.046833)
[2019-08-12 14:07:41,970-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.151368 (0.200594)	data_time: 0.000145 (0.004351)	rpn_cls_loss: 0.000357 (0.000355)	rpn_loc_loss: 0.056239 (0.065178)	kp_hp_loss: 0.462204 (0.788466)	kp_hm_hp_loss: 7.445250 (9.726135)	kp_hp_offset_loss: 0.221989 (0.225532)	kp_loss: 8.129443 (10.740135)	siammask_loss: 8.197288 (10.818701)	kp_avg_acc: 0.000000 (0.041409)
[2019-08-12 14:07:44,311-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.149406 (0.194996)	data_time: 0.000148 (0.003766)	rpn_cls_loss: 0.000261 (0.000354)	rpn_loc_loss: 0.026469 (0.062735)	kp_hp_loss: 0.342050 (0.768014)	kp_hm_hp_loss: 10.278155 (9.838043)	kp_hp_offset_loss: 0.203248 (0.225227)	kp_loss: 10.823453 (10.831284)	siammask_loss: 10.855477 (10.906919)	kp_avg_acc: 0.000000 (0.037534)
[2019-08-12 14:07:46,436-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.135650 (0.188910)	data_time: 0.000148 (0.003327)	rpn_cls_loss: 0.000225 (0.009067)	rpn_loc_loss: 0.029745 (0.063766)	kp_hp_loss: 1.687516 (0.798235)	kp_hm_hp_loss: 9.953407 (9.880465)	kp_hp_offset_loss: 0.221813 (0.226012)	kp_loss: 11.862737 (10.904713)	siammask_loss: 11.898656 (10.990298)	kp_avg_acc: 0.000000 (0.038467)
[2019-08-12 14:07:48,696-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.145629 (0.184914)	data_time: 0.000149 (0.002983)	rpn_cls_loss: 0.000169 (0.008091)	rpn_loc_loss: 0.132915 (0.063569)	kp_hp_loss: 0.830725 (0.799763)	kp_hm_hp_loss: 11.391438 (9.755046)	kp_hp_offset_loss: 0.226884 (0.226387)	kp_loss: 12.449046 (10.781196)	siammask_loss: 12.608714 (10.865570)	kp_avg_acc: 0.000000 (0.038391)
[2019-08-12 14:07:51,111-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.139032 (0.183023)	data_time: 0.000246 (0.002714)	rpn_cls_loss: 0.000365 (0.007302)	rpn_loc_loss: 0.049535 (0.062579)	kp_hp_loss: 4.209217 (0.866772)	kp_hm_hp_loss: 11.105695 (9.677545)	kp_hp_offset_loss: 0.306553 (0.227401)	kp_loss: 15.621464 (10.771718)	siammask_loss: 15.681271 (10.854115)	kp_avg_acc: 0.000000 (0.035802)
[2019-08-12 14:09:27,898-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:09:27,899-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:09:27,904-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:09:27,904-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:09:27,909-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:09:31,366-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:09:31,402-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:09:31,473-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,474-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:09:31,479-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:09:31,617-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,618-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:09:31,619-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:09:31,621-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:09:31,748-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:09:31,751-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:09:31,754-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,754-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:09:31,755-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:09:31,758-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:09:31,759-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:09:31,759-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:09:36,832-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:09:37,129-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:09:37,131-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked'}
[2019-08-12 14:09:37,131-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:09:37,132-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:09:37,190-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:09:37,192-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:09:37,360-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:09:37,365-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:09:37,777-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:09:37,779-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:09:37,914-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:09:42,169-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.117141 (0.360232)	data_time: 0.000100 (0.031009)	rpn_cls_loss: 0.000118 (0.000365)	rpn_loc_loss: 0.124013 (0.110965)	kp_hp_loss: 0.891969 (0.768553)	kp_hm_hp_loss: 13.070885 (8.949048)	kp_hp_offset_loss: 0.251443 (0.231424)	kp_loss: 14.214297 (9.949025)	siammask_loss: 14.363232 (10.082549)	kp_avg_acc: 0.000000 (0.010000)
[2019-08-12 14:09:44,116-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.131966 (0.246487)	data_time: 0.000130 (0.015613)	rpn_cls_loss: 0.000133 (0.000521)	rpn_loc_loss: 0.014924 (0.085656)	kp_hp_loss: 0.458021 (0.697133)	kp_hm_hp_loss: 10.677878 (9.411996)	kp_hp_offset_loss: 0.174753 (0.221697)	kp_loss: 11.310652 (10.330827)	siammask_loss: 11.328693 (10.434135)	kp_avg_acc: 0.000000 (0.005000)
[2019-08-12 14:09:46,076-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.150754 (0.209241)	data_time: 0.000180 (0.010485)	rpn_cls_loss: 0.000172 (0.000461)	rpn_loc_loss: 0.038345 (0.081204)	kp_hp_loss: 0.430448 (0.766210)	kp_hm_hp_loss: 13.482200 (9.565829)	kp_hp_offset_loss: 0.185476 (0.230167)	kp_loss: 14.098123 (10.562207)	siammask_loss: 14.144309 (10.660112)	kp_avg_acc: 0.000000 (0.013585)
[2019-08-12 14:09:48,248-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.149300 (0.194400)	data_time: 0.000190 (0.007931)	rpn_cls_loss: 0.000803 (0.000466)	rpn_loc_loss: 0.167237 (0.080078)	kp_hp_loss: 1.222521 (0.782667)	kp_hm_hp_loss: 10.070531 (9.474611)	kp_hp_offset_loss: 0.255592 (0.230542)	kp_loss: 11.548643 (10.487820)	siammask_loss: 11.750131 (10.584379)	kp_avg_acc: 0.000000 (0.010188)
[2019-08-12 14:09:50,263-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.127604 (0.183060)	data_time: 0.000185 (0.006401)	rpn_cls_loss: 0.001295 (0.000458)	rpn_loc_loss: 0.200284 (0.076812)	kp_hp_loss: 1.194516 (0.792416)	kp_hm_hp_loss: 7.095715 (9.407834)	kp_hp_offset_loss: 0.295447 (0.235435)	kp_loss: 8.585678 (10.435687)	siammask_loss: 8.827314 (10.528318)	kp_avg_acc: 0.000000 (0.012913)
[2019-08-12 14:09:52,255-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.177784 (0.175371)	data_time: 0.000148 (0.005383)	rpn_cls_loss: 0.000315 (0.000810)	rpn_loc_loss: 0.045708 (0.079684)	kp_hp_loss: 1.196329 (0.768816)	kp_hm_hp_loss: 7.191578 (9.515332)	kp_hp_offset_loss: 0.244145 (0.235002)	kp_loss: 8.632051 (10.519150)	siammask_loss: 8.687216 (10.615578)	kp_avg_acc: 0.000000 (0.012149)
[2019-08-12 14:09:54,327-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.124171 (0.170420)	data_time: 0.000115 (0.004650)	rpn_cls_loss: 0.000137 (0.000719)	rpn_loc_loss: 0.064819 (0.075139)	kp_hp_loss: 0.809833 (0.780132)	kp_hm_hp_loss: 7.587210 (9.458205)	kp_hp_offset_loss: 0.300019 (0.234852)	kp_loss: 8.697062 (10.473189)	siammask_loss: 8.774981 (10.564073)	kp_avg_acc: 0.125000 (0.015057)
[2019-08-12 14:09:56,347-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.130849 (0.166731)	data_time: 0.000119 (0.004095)	rpn_cls_loss: 0.000191 (0.000661)	rpn_loc_loss: 0.123640 (0.075746)	kp_hp_loss: 1.196373 (0.805918)	kp_hm_hp_loss: 8.064327 (9.472444)	kp_hp_offset_loss: 0.212198 (0.235043)	kp_loss: 9.472898 (10.513404)	siammask_loss: 9.621458 (10.604960)	kp_avg_acc: 0.125000 (0.016820)
[2019-08-12 14:09:58,328-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.126915 (0.163612)	data_time: 0.000125 (0.003665)	rpn_cls_loss: 0.000159 (0.000614)	rpn_loc_loss: 0.163146 (0.077954)	kp_hp_loss: 2.300967 (0.812264)	kp_hm_hp_loss: 16.376863 (9.565017)	kp_hp_offset_loss: 0.261743 (0.235896)	kp_loss: 18.939573 (10.613175)	siammask_loss: 19.135508 (10.707332)	kp_avg_acc: 0.000000 (0.016063)
[2019-08-12 14:10:00,214-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.127049 (0.160271)	data_time: 0.000121 (0.003333)	rpn_cls_loss: 0.000155 (0.000572)	rpn_loc_loss: 0.033320 (0.077245)	kp_hp_loss: 0.431506 (0.802876)	kp_hm_hp_loss: 11.240989 (9.594614)	kp_hp_offset_loss: 0.233378 (0.234933)	kp_loss: 11.905872 (10.632421)	siammask_loss: 11.946012 (10.725686)	kp_avg_acc: 0.000000 (0.015706)
[2019-08-12 14:32:22,911-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:32:22,911-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:32:22,932-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:32:22,932-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:32:22,977-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:32:26,326-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:32:26,361-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:32:26,432-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,433-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:32:26,438-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:32:26,504-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,505-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:32:26,505-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:32:26,518-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:32:26,679-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:32:26,681-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:32:26,685-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,685-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:32:26,686-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:32:26,689-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:32:26,690-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:32:26,690-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:32:35,939-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:32:36,634-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:32:36,635-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked'}
[2019-08-12 14:32:36,636-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:32:36,636-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:32:36,732-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:32:36,734-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:32:36,887-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:32:36,892-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:32:38,381-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:32:38,383-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:32:38,562-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:32:43,881-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.169114 (0.422306)	data_time: 0.000111 (0.038846)	rpn_cls_loss: 0.000319 (0.000337)	rpn_loc_loss: 0.027635 (0.070965)	kp_hp_loss: 0.625517 (0.649985)	kp_hm_hp_loss: 5.133065 (13.042642)	kp_hp_offset_loss: 0.236516 (0.232704)	kp_loss: 5.995099 (13.925331)	siammask_loss: 6.028580 (14.010826)	kp_avg_acc: 0.000000 (0.031618)
[2019-08-12 14:32:46,362-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.153467 (0.289520)	data_time: 0.000189 (0.019600)	rpn_cls_loss: 0.000151 (0.000399)	rpn_loc_loss: 0.027629 (0.066377)	kp_hp_loss: 0.539008 (0.727821)	kp_hm_hp_loss: 24.755070 (13.332822)	kp_hp_offset_loss: 0.220698 (0.235033)	kp_loss: 25.514778 (14.295676)	siammask_loss: 25.548084 (14.375726)	kp_avg_acc: 0.083333 (0.026763)
[2019-08-12 14:32:48,712-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.129028 (0.246709)	data_time: 0.000131 (0.013230)	rpn_cls_loss: 0.000122 (0.000361)	rpn_loc_loss: 0.045164 (0.063963)	kp_hp_loss: 0.461897 (0.894337)	kp_hm_hp_loss: 21.320295 (14.029061)	kp_hp_offset_loss: 0.236497 (0.235170)	kp_loss: 22.018690 (15.158569)	siammask_loss: 22.073009 (15.235685)	kp_avg_acc: 0.000000 (0.030223)
[2019-08-12 14:32:50,840-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.131775 (0.220243)	data_time: 0.000147 (0.009983)	rpn_cls_loss: 0.000339 (0.000337)	rpn_loc_loss: 0.067374 (0.062391)	kp_hp_loss: 0.466157 (0.929780)	kp_hm_hp_loss: 7.680381 (12.940039)	kp_hp_offset_loss: 0.256892 (0.236438)	kp_loss: 8.403429 (14.106259)	siammask_loss: 8.484617 (14.181463)	kp_avg_acc: 0.000000 (0.028946)
[2019-08-12 14:32:52,942-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.160609 (0.203896)	data_time: 0.000151 (0.008037)	rpn_cls_loss: 0.000153 (0.000321)	rpn_loc_loss: 0.074056 (0.058782)	kp_hp_loss: 0.421253 (0.872024)	kp_hm_hp_loss: 32.611488 (13.536644)	kp_hp_offset_loss: 0.256015 (0.232852)	kp_loss: 33.288757 (14.641522)	siammask_loss: 33.377777 (14.712379)	kp_avg_acc: 0.000000 (0.023157)
[2019-08-12 14:32:55,058-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.130535 (0.193259)	data_time: 0.000113 (0.006742)	rpn_cls_loss: 0.000676 (0.000308)	rpn_loc_loss: 0.065473 (0.063676)	kp_hp_loss: 1.093461 (0.859601)	kp_hm_hp_loss: 12.757201 (13.652008)	kp_hp_offset_loss: 0.261905 (0.233837)	kp_loss: 14.112567 (14.745449)	siammask_loss: 14.191810 (14.822167)	kp_avg_acc: 0.000000 (0.020687)
[2019-08-12 14:32:57,125-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.134247 (0.185727)	data_time: 0.000182 (0.005837)	rpn_cls_loss: 0.000145 (0.000288)	rpn_loc_loss: 0.021884 (0.059737)	kp_hp_loss: 0.353530 (0.812792)	kp_hm_hp_loss: 8.069126 (14.169268)	kp_hp_offset_loss: 0.184754 (0.233324)	kp_loss: 8.607410 (15.215384)	siammask_loss: 8.633816 (15.287356)	kp_avg_acc: 0.000000 (0.019577)
[2019-08-12 14:32:59,149-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.130190 (0.179296)	data_time: 0.000127 (0.005139)	rpn_cls_loss: 0.000135 (0.000277)	rpn_loc_loss: 0.023568 (0.059331)	kp_hp_loss: 0.601431 (0.798953)	kp_hm_hp_loss: 11.706159 (14.134956)	kp_hp_offset_loss: 0.254747 (0.233359)	kp_loss: 12.562337 (15.167270)	siammask_loss: 12.590753 (15.238744)	kp_avg_acc: 0.066667 (0.019689)
[2019-08-12 14:33:01,255-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.134490 (0.174572)	data_time: 0.000159 (0.004594)	rpn_cls_loss: 0.000117 (0.000313)	rpn_loc_loss: 0.117441 (0.062642)	kp_hp_loss: 0.331079 (0.803856)	kp_hm_hp_loss: 22.445728 (14.512008)	kp_hp_offset_loss: 0.214952 (0.231385)	kp_loss: 22.991760 (15.547249)	siammask_loss: 23.132807 (15.622733)	kp_avg_acc: 0.000000 (0.017501)
[2019-08-12 14:33:03,312-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.148305 (0.170814)	data_time: 0.000160 (0.004157)	rpn_cls_loss: 0.000146 (0.000312)	rpn_loc_loss: 0.055976 (0.063184)	kp_hp_loss: 0.464933 (0.792206)	kp_hm_hp_loss: 19.823624 (14.872546)	kp_hp_offset_loss: 0.205271 (0.231169)	kp_loss: 20.493828 (15.895920)	siammask_loss: 20.561146 (15.972053)	kp_avg_acc: 0.000000 (0.016418)
[2019-08-12 14:35:51,270-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:35:51,271-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:35:51,273-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:35:51,273-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:35:51,275-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:35:54,588-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:35:54,628-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:35:54,754-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:54,755-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:35:54,770-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:35:54,876-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:54,877-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:35:54,878-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:35:54,880-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:35:55,010-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:35:55,012-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:35:55,015-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:55,016-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:35:55,016-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:35:55,020-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:35:55,020-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:35:55,020-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:36:00,353-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:36:00,636-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:36:00,638-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'bn1.num_batches_tracked'}
[2019-08-12 14:36:00,638-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:36:00,638-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:36:00,705-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:36:00,706-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:36:00,860-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:36:00,865-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:36:01,256-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:36:01,258-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:36:01,396-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:36:05,604-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.125811 (0.357316)	data_time: 0.000099 (0.027036)	rpn_cls_loss: 0.000143 (0.000207)	rpn_loc_loss: 0.017091 (0.069160)	kp_hp_loss: 0.447770 (0.734637)	kp_hm_hp_loss: 61.065361 (60.978326)	kp_hp_offset_loss: 0.177164 (0.233631)	kp_loss: 61.690292 (61.946588)	siammask_loss: 61.710945 (62.029792)	kp_avg_acc: 0.083333 (0.021908)
[2019-08-12 14:36:08,024-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.166338 (0.259529)	data_time: 0.000216 (0.013656)	rpn_cls_loss: 0.000140 (0.000256)	rpn_loc_loss: 0.051800 (0.069225)	kp_hp_loss: 1.337814 (0.886072)	kp_hm_hp_loss: 81.244919 (73.327240)	kp_hp_offset_loss: 0.210810 (0.236754)	kp_loss: 82.793541 (74.450067)	siammask_loss: 82.855843 (74.533389)	kp_avg_acc: 0.000000 (0.027679)
[2019-08-12 14:36:10,662-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.171254 (0.232600)	data_time: 0.000210 (0.009216)	rpn_cls_loss: 0.000148 (0.000357)	rpn_loc_loss: 0.128946 (0.064118)	kp_hp_loss: 0.549597 (0.789230)	kp_hm_hp_loss: 62.344337 (71.769661)	kp_hp_offset_loss: 0.219354 (0.236457)	kp_loss: 63.113289 (72.795353)	siammask_loss: 63.268173 (72.872647)	kp_avg_acc: 0.000000 (0.027239)
[2019-08-12 14:36:13,161-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.151081 (0.217157)	data_time: 0.000268 (0.006992)	rpn_cls_loss: 0.005456 (0.000458)	rpn_loc_loss: 0.099699 (0.064519)	kp_hp_loss: 3.929884 (1.004964)	kp_hm_hp_loss: 50.220337 (73.369482)	kp_hp_offset_loss: 0.281520 (0.240841)	kp_loss: 54.431740 (74.615283)	siammask_loss: 54.556835 (74.693168)	kp_avg_acc: 0.000000 (0.022352)
[2019-08-12 14:36:15,386-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.147874 (0.203856)	data_time: 0.000190 (0.005658)	rpn_cls_loss: 0.000115 (0.000397)	rpn_loc_loss: 0.019988 (0.063110)	kp_hp_loss: 0.946356 (0.994215)	kp_hm_hp_loss: 35.442238 (72.459038)	kp_hp_offset_loss: 0.229704 (0.239828)	kp_loss: 36.618294 (73.693096)	siammask_loss: 36.642395 (73.769219)	kp_avg_acc: 0.062500 (0.020798)
[2019-08-12 14:36:17,472-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.155485 (0.194076)	data_time: 0.000126 (0.004774)	rpn_cls_loss: 0.000206 (0.000358)	rpn_loc_loss: 0.054761 (0.059257)	kp_hp_loss: 0.616086 (0.953775)	kp_hm_hp_loss: 57.201054 (74.422298)	kp_hp_offset_loss: 0.273374 (0.238547)	kp_loss: 58.090511 (75.614624)	siammask_loss: 58.156429 (75.686092)	kp_avg_acc: 0.100000 (0.021392)
[2019-08-12 14:36:19,590-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.169641 (0.187154)	data_time: 0.000208 (0.004132)	rpn_cls_loss: 0.000177 (0.000340)	rpn_loc_loss: 0.050702 (0.060172)	kp_hp_loss: 0.519239 (0.956152)	kp_hm_hp_loss: 52.238316 (76.894545)	kp_hp_offset_loss: 0.226098 (0.241102)	kp_loss: 52.983654 (78.091804)	siammask_loss: 53.044674 (78.164345)	kp_avg_acc: 0.000000 (0.021133)
[2019-08-12 14:36:21,771-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.185459 (0.182401)	data_time: 0.000233 (0.003657)	rpn_cls_loss: 0.000314 (0.000695)	rpn_loc_loss: 0.045747 (0.063351)	kp_hp_loss: 0.275611 (0.945044)	kp_hm_hp_loss: 70.712433 (74.774194)	kp_hp_offset_loss: 0.186637 (0.240165)	kp_loss: 71.174683 (75.959399)	siammask_loss: 71.229897 (76.036111)	kp_avg_acc: 0.000000 (0.020315)
[2019-08-12 14:36:23,888-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.148149 (0.178109)	data_time: 0.000177 (0.003287)	rpn_cls_loss: 0.000143 (0.000647)	rpn_loc_loss: 0.026389 (0.067276)	kp_hp_loss: 0.485446 (0.956812)	kp_hm_hp_loss: 149.999695 (74.325939)	kp_hp_offset_loss: 0.183817 (0.239978)	kp_loss: 150.668961 (75.522738)	siammask_loss: 150.700775 (75.604102)	kp_avg_acc: 0.000000 (0.018058)
[2019-08-12 14:36:25,917-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.124821 (0.174259)	data_time: 0.000150 (0.002984)	rpn_cls_loss: 0.000144 (0.000601)	rpn_loc_loss: 0.185899 (0.067622)	kp_hp_loss: 1.492047 (0.934715)	kp_hm_hp_loss: 95.583885 (77.185220)	kp_hp_offset_loss: 0.239256 (0.238506)	kp_loss: 97.315193 (78.358462)	siammask_loss: 97.538414 (78.440189)	kp_avg_acc: 0.000000 (0.017633)
[2019-08-12 14:39:16,126-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 14:39:16,127-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 14:39:16,130-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 14:39:16,130-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 14:39:16,133-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 14:39:19,600-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 14:39:19,640-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 14:39:19,714-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,714-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:39:19,718-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 14:39:19,791-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,791-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 14:39:19,792-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 14:39:19,793-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 14:39:19,902-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 14:39:19,905-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 14:39:19,908-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,908-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:39:19,909-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 14:39:19,912-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 14:39:19,912-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 14:39:19,912-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 14:39:24,836-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 14:39:25,133-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:39:25,135-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked'}
[2019-08-12 14:39:25,136-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 14:39:25,136-rk0-load_helper.py# 18] used keys:265
[2019-08-12 14:39:25,213-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 14:39:25,214-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 14:39:25,385-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 14:39:25,390-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 14:39:25,833-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 14:39:25,836-rk0-load_helper.py# 18] used keys:438
[2019-08-12 14:39:26,049-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 14:39:30,710-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.148979 (0.392712)	data_time: 0.000109 (0.029354)	rpn_cls_loss: 0.000860 (0.000267)	rpn_loc_loss: 0.028193 (0.044336)	kp_hp_loss: 0.682969 (0.928293)	kp_hm_hp_loss: 51.042809 (65.515283)	kp_hp_offset_loss: 0.221731 (0.250613)	kp_loss: 51.947510 (66.694189)	siammask_loss: 51.982201 (66.747665)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 14:39:33,151-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.142670 (0.279563)	data_time: 0.000112 (0.014814)	rpn_cls_loss: 0.000154 (0.000225)	rpn_loc_loss: 0.053840 (0.049481)	kp_hp_loss: 0.845491 (0.735652)	kp_hm_hp_loss: 102.231987 (75.929993)	kp_hp_offset_loss: 0.252890 (0.241140)	kp_loss: 103.330368 (76.906793)	siammask_loss: 103.395126 (76.966404)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 14:39:35,449-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.214779 (0.240711)	data_time: 0.000248 (0.009966)	rpn_cls_loss: 0.000160 (0.001318)	rpn_loc_loss: 0.052562 (0.069241)	kp_hp_loss: 0.641035 (0.796025)	kp_hm_hp_loss: 92.381302 (71.448120)	kp_hp_offset_loss: 0.272428 (0.246700)	kp_loss: 93.294769 (72.490853)	siammask_loss: 93.358002 (72.575262)	kp_avg_acc: 0.000000 (0.006845)
[2019-08-12 14:39:37,811-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.143431 (0.220709)	data_time: 0.000158 (0.007551)	rpn_cls_loss: 0.000218 (0.001104)	rpn_loc_loss: 0.115566 (0.071835)	kp_hp_loss: 0.585958 (0.798182)	kp_hm_hp_loss: 147.208023 (74.446759)	kp_hp_offset_loss: 0.245460 (0.242731)	kp_loss: 148.039429 (75.487683)	siammask_loss: 148.178329 (75.574983)	kp_avg_acc: 0.071429 (0.013899)
[2019-08-12 14:39:40,140-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.168773 (0.208230)	data_time: 0.000131 (0.006093)	rpn_cls_loss: 0.000130 (0.000942)	rpn_loc_loss: 0.090684 (0.075979)	kp_hp_loss: 0.560500 (0.813630)	kp_hm_hp_loss: 159.357590 (73.410005)	kp_hp_offset_loss: 0.242427 (0.240390)	kp_loss: 160.160522 (74.464033)	siammask_loss: 160.269470 (74.556143)	kp_avg_acc: 0.000000 (0.014036)
[2019-08-12 14:39:42,347-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.146800 (0.198393)	data_time: 0.000168 (0.005118)	rpn_cls_loss: 0.000174 (0.000847)	rpn_loc_loss: 0.019167 (0.072023)	kp_hp_loss: 0.796254 (0.842250)	kp_hm_hp_loss: 100.165184 (72.844539)	kp_hp_offset_loss: 0.234907 (0.239465)	kp_loss: 101.196350 (73.926253)	siammask_loss: 101.219528 (74.013526)	kp_avg_acc: 0.000000 (0.015364)
[2019-08-12 14:39:44,592-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.178159 (0.191921)	data_time: 0.000168 (0.004425)	rpn_cls_loss: 0.000151 (0.000793)	rpn_loc_loss: 0.023670 (0.068451)	kp_hp_loss: 0.920017 (0.835756)	kp_hm_hp_loss: 108.952988 (73.083573)	kp_hp_offset_loss: 0.232306 (0.236395)	kp_loss: 110.105309 (74.155727)	siammask_loss: 110.133865 (74.238660)	kp_avg_acc: 0.000000 (0.015361)
[2019-08-12 14:39:46,844-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.131888 (0.187213)	data_time: 0.000176 (0.003906)	rpn_cls_loss: 0.000204 (0.000746)	rpn_loc_loss: 0.060030 (0.069989)	kp_hp_loss: 0.843508 (0.857212)	kp_hm_hp_loss: 35.198883 (70.978027)	kp_hp_offset_loss: 0.194342 (0.234675)	kp_loss: 36.236736 (72.069928)	siammask_loss: 36.308975 (72.154658)	kp_avg_acc: 0.000000 (0.013441)
[2019-08-12 14:39:49,183-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.148181 (0.184427)	data_time: 0.000168 (0.003503)	rpn_cls_loss: 0.000215 (0.000696)	rpn_loc_loss: 0.025916 (0.069717)	kp_hp_loss: 0.348734 (0.845732)	kp_hm_hp_loss: 124.045517 (71.424691)	kp_hp_offset_loss: 0.224113 (0.232273)	kp_loss: 124.618362 (72.502702)	siammask_loss: 124.649673 (72.587062)	kp_avg_acc: 0.058824 (0.013456)
[2019-08-12 14:39:51,489-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.138464 (0.181654)	data_time: 0.000138 (0.003179)	rpn_cls_loss: 0.000145 (0.000652)	rpn_loc_loss: 0.037287 (0.070575)	kp_hp_loss: 0.549369 (0.814994)	kp_hm_hp_loss: 125.077934 (73.264907)	kp_hp_offset_loss: 0.184184 (0.231172)	kp_loss: 125.811485 (74.311079)	siammask_loss: 125.856377 (74.396429)	kp_avg_acc: 0.000000 (0.012777)
[2019-08-12 15:01:25,550-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:01:25,559-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:01:25,562-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:01:25,562-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:01:25,566-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:01:28,936-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:01:28,974-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:01:29,060-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,061-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:01:29,066-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:01:29,144-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,144-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:01:29,145-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:01:29,147-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:01:29,269-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:01:29,271-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:01:29,274-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,274-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:01:29,275-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:01:29,277-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:01:29,278-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:01:29,278-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:01:34,212-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:01:34,522-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:01:34,523-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked'}
[2019-08-12 15:01:34,524-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:01:34,524-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:01:34,627-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:01:34,629-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:01:34,768-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:01:34,772-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:01:35,657-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:01:35,660-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:01:35,850-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:02:46,349-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:02:46,351-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:02:46,355-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:02:46,356-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:02:46,360-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:02:50,217-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:02:50,253-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:02:50,321-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,322-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:02:50,325-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:02:50,392-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,392-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:02:50,393-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:02:50,394-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:02:50,504-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:02:50,507-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:02:50,511-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,511-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:02:50,512-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:02:50,515-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:02:50,515-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:02:50,516-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:02:55,967-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:02:56,297-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:02:56,299-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked'}
[2019-08-12 15:02:56,299-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:02:56,300-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:02:56,367-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:02:56,369-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:02:56,529-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:02:56,533-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:02:57,050-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:02:57,053-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:02:57,244-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:03:02,204-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.140748 (0.400230)	data_time: 0.000166 (0.033980)	rpn_cls_loss: 0.000135 (0.000414)	rpn_loc_loss: 0.036662 (0.072379)	kp_hp_loss: 1.120600 (0.727918)	kp_hm_hp_loss: 54.676426 (82.483771)	kp_hp_offset_loss: 0.244146 (0.228625)	kp_loss: 56.041172 (83.440314)	siammask_loss: 56.085300 (83.527580)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 15:03:04,552-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.195757 (0.278082)	data_time: 0.000327 (0.017119)	rpn_cls_loss: 0.000119 (0.000302)	rpn_loc_loss: 0.032399 (0.065742)	kp_hp_loss: 0.628878 (0.813165)	kp_hm_hp_loss: 47.534119 (86.463098)	kp_hp_offset_loss: 0.256188 (0.231964)	kp_loss: 48.419186 (87.508215)	siammask_loss: 48.458183 (87.587413)	kp_avg_acc: 0.000000 (0.014792)
[2019-08-12 15:03:06,790-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.145156 (0.236453)	data_time: 0.000170 (0.011513)	rpn_cls_loss: 0.000381 (0.000333)	rpn_loc_loss: 0.114128 (0.063372)	kp_hp_loss: 0.833840 (0.760005)	kp_hm_hp_loss: 49.536846 (76.465381)	kp_hp_offset_loss: 0.251942 (0.230062)	kp_loss: 50.622627 (77.455436)	siammask_loss: 50.759960 (77.531820)	kp_avg_acc: 0.000000 (0.011944)
[2019-08-12 15:03:09,228-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.203085 (0.220548)	data_time: 0.000129 (0.008710)	rpn_cls_loss: 0.000181 (0.000295)	rpn_loc_loss: 0.023021 (0.062194)	kp_hp_loss: 1.741398 (0.765822)	kp_hm_hp_loss: 55.263466 (77.426666)	kp_hp_offset_loss: 0.199686 (0.230807)	kp_loss: 57.204548 (78.423273)	siammask_loss: 57.232353 (78.498208)	kp_avg_acc: 0.000000 (0.008958)
[2019-08-12 15:03:11,601-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.190102 (0.209358)	data_time: 0.000279 (0.007029)	rpn_cls_loss: 0.000275 (0.000350)	rpn_loc_loss: 0.041609 (0.070875)	kp_hp_loss: 2.388414 (0.839615)	kp_hm_hp_loss: 9.124386 (73.074136)	kp_hp_offset_loss: 0.317616 (0.234504)	kp_loss: 11.830416 (74.148237)	siammask_loss: 11.880621 (74.233648)	kp_avg_acc: 0.000000 (0.008500)
[2019-08-12 15:03:13,885-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.158451 (0.200227)	data_time: 0.000178 (0.005907)	rpn_cls_loss: 0.000656 (0.000351)	rpn_loc_loss: 0.039425 (0.069162)	kp_hp_loss: 0.888245 (0.838594)	kp_hm_hp_loss: 99.020035 (74.251107)	kp_hp_offset_loss: 0.253529 (0.235384)	kp_loss: 100.161812 (75.325065)	siammask_loss: 100.209778 (75.408423)	kp_avg_acc: 0.142857 (0.011857)
[2019-08-12 15:03:16,187-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.207536 (0.194475)	data_time: 0.000319 (0.005119)	rpn_cls_loss: 0.000208 (0.000498)	rpn_loc_loss: 0.043102 (0.067916)	kp_hp_loss: 0.600574 (0.870211)	kp_hm_hp_loss: 95.531624 (73.551074)	kp_hp_offset_loss: 0.220351 (0.239796)	kp_loss: 96.352547 (74.661063)	siammask_loss: 96.404480 (74.743076)	kp_avg_acc: 0.000000 (0.010164)
[2019-08-12 15:03:18,580-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.147676 (0.190740)	data_time: 0.000164 (0.004510)	rpn_cls_loss: 0.000148 (0.000462)	rpn_loc_loss: 0.048467 (0.066083)	kp_hp_loss: 0.284044 (0.854711)	kp_hm_hp_loss: 77.699448 (72.035577)	kp_hp_offset_loss: 0.192702 (0.236481)	kp_loss: 78.176193 (73.126746)	siammask_loss: 78.234497 (73.206530)	kp_avg_acc: 0.000000 (0.008893)
[2019-08-12 15:03:21,105-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.196226 (0.188362)	data_time: 0.000187 (0.004044)	rpn_cls_loss: 0.000299 (0.000437)	rpn_loc_loss: 0.063851 (0.066377)	kp_hp_loss: 0.280619 (0.826641)	kp_hm_hp_loss: 92.215988 (72.427805)	kp_hp_offset_loss: 0.204205 (0.235428)	kp_loss: 92.700813 (73.489855)	siammask_loss: 92.777733 (73.569969)	kp_avg_acc: 0.066667 (0.011060)
[2019-08-12 15:03:23,315-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.184535 (0.184891)	data_time: 0.000125 (0.003671)	rpn_cls_loss: 0.000165 (0.001521)	rpn_loc_loss: 0.043864 (0.065312)	kp_hp_loss: 0.393502 (0.856777)	kp_hm_hp_loss: 51.297249 (71.732139)	kp_hp_offset_loss: 0.226748 (0.234106)	kp_loss: 51.917500 (72.823003)	siammask_loss: 51.970303 (72.902923)	kp_avg_acc: 0.066667 (0.010620)
[2019-08-12 15:08:00,128-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:08:00,129-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:08:00,132-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:08:00,133-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:08:00,135-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:08:03,335-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:08:03,372-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:08:03,441-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,442-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:08:03,445-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:08:03,517-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,517-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:08:03,518-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:08:03,519-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:08:03,616-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:08:03,618-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:08:03,621-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,622-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:08:03,622-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:08:03,625-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:08:03,626-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:08:03,626-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:08:08,675-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:08:08,968-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:08:08,969-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked'}
[2019-08-12 15:08:08,970-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:08:08,970-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:08:09,038-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:08:09,040-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:08:09,175-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:08:09,179-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:08:09,515-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:08:09,519-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:08:09,714-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:08:14,539-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.170939 (0.400629)	data_time: 0.000144 (0.032960)	rpn_cls_loss: 0.000138 (0.002093)	rpn_loc_loss: 0.114451 (0.080689)	kp_hp_loss: 0.602804 (0.692243)	kp_hm_hp_loss: 37.737934 (84.371509)	kp_hp_offset_loss: 0.197565 (0.228222)	kp_loss: 38.538303 (85.291974)	siammask_loss: 38.675781 (85.390891)	kp_avg_acc: 0.000000 (0.006250)
[2019-08-12 15:08:17,278-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.161916 (0.294274)	data_time: 0.000300 (0.016659)	rpn_cls_loss: 0.000226 (0.001218)	rpn_loc_loss: 0.099335 (0.065501)	kp_hp_loss: 0.395643 (0.714342)	kp_hm_hp_loss: 47.036896 (74.971045)	kp_hp_offset_loss: 0.196698 (0.229372)	kp_loss: 47.629234 (75.914764)	siammask_loss: 47.748661 (75.994587)	kp_avg_acc: 0.076923 (0.031159)
[2019-08-12 15:08:19,740-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.167890 (0.251950)	data_time: 0.000138 (0.011211)	rpn_cls_loss: 0.000126 (0.000958)	rpn_loc_loss: 0.103054 (0.075180)	kp_hp_loss: 0.611658 (0.775913)	kp_hm_hp_loss: 28.417427 (78.601571)	kp_hp_offset_loss: 0.207917 (0.227449)	kp_loss: 29.237001 (79.604940)	siammask_loss: 29.360792 (79.696114)	kp_avg_acc: 0.000000 (0.022734)
[2019-08-12 15:08:22,471-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.200694 (0.236111)	data_time: 0.000214 (0.008495)	rpn_cls_loss: 0.000196 (0.000971)	rpn_loc_loss: 0.037147 (0.073552)	kp_hp_loss: 0.585749 (0.762823)	kp_hm_hp_loss: 64.429489 (82.798016)	kp_hp_offset_loss: 0.255297 (0.229845)	kp_loss: 65.270531 (83.790686)	siammask_loss: 65.315300 (83.879927)	kp_avg_acc: 0.000000 (0.022426)
[2019-08-12 15:08:25,069-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.169225 (0.224446)	data_time: 0.000249 (0.006870)	rpn_cls_loss: 0.013958 (0.001458)	rpn_loc_loss: 0.107788 (0.086745)	kp_hp_loss: 0.410050 (0.802919)	kp_hm_hp_loss: 59.156910 (77.596875)	kp_hp_offset_loss: 0.184358 (0.229888)	kp_loss: 59.751316 (78.629678)	siammask_loss: 59.894619 (78.735234)	kp_avg_acc: 0.076923 (0.020729)
[2019-08-12 15:08:27,446-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.181938 (0.214769)	data_time: 0.000214 (0.005770)	rpn_cls_loss: 0.000142 (0.001260)	rpn_loc_loss: 0.025086 (0.084627)	kp_hp_loss: 0.856028 (0.786112)	kp_hm_hp_loss: 80.952202 (81.318270)	kp_hp_offset_loss: 0.144654 (0.227905)	kp_loss: 81.952881 (82.332292)	siammask_loss: 81.983124 (82.435096)	kp_avg_acc: 0.000000 (0.019980)
[2019-08-12 15:08:29,886-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.168771 (0.208098)	data_time: 0.000163 (0.004982)	rpn_cls_loss: 0.000108 (0.001103)	rpn_loc_loss: 0.091770 (0.081300)	kp_hp_loss: 0.677464 (0.775696)	kp_hm_hp_loss: 54.161659 (81.343129)	kp_hp_offset_loss: 0.269445 (0.227280)	kp_loss: 55.108570 (82.346108)	siammask_loss: 55.218800 (82.444760)	kp_avg_acc: 0.000000 (0.018911)
[2019-08-12 15:08:32,213-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.138283 (0.202227)	data_time: 0.000134 (0.004400)	rpn_cls_loss: 0.000156 (0.000990)	rpn_loc_loss: 0.066921 (0.078249)	kp_hp_loss: 0.310825 (0.776900)	kp_hm_hp_loss: 79.874130 (80.066376)	kp_hp_offset_loss: 0.210273 (0.226052)	kp_loss: 80.395226 (81.069336)	siammask_loss: 80.475685 (81.164216)	kp_avg_acc: 0.000000 (0.017684)
[2019-08-12 15:08:34,165-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.131681 (0.194661)	data_time: 0.000143 (0.003949)	rpn_cls_loss: 0.000165 (0.000910)	rpn_loc_loss: 0.061836 (0.080246)	kp_hp_loss: 0.508553 (0.766435)	kp_hm_hp_loss: 60.162086 (78.192768)	kp_hp_offset_loss: 0.215275 (0.227542)	kp_loss: 60.885914 (79.186746)	siammask_loss: 60.960281 (79.283945)	kp_avg_acc: 0.000000 (0.019305)
[2019-08-12 15:08:36,041-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.131359 (0.188100)	data_time: 0.000105 (0.003575)	rpn_cls_loss: 0.000621 (0.001065)	rpn_loc_loss: 0.171905 (0.084002)	kp_hp_loss: 1.220737 (0.786281)	kp_hm_hp_loss: 62.967522 (77.896777)	kp_hp_offset_loss: 0.256254 (0.228801)	kp_loss: 64.444511 (78.911860)	siammask_loss: 64.651421 (79.013723)	kp_avg_acc: 0.000000 (0.018208)
[2019-08-12 15:21:56,016-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:21:56,017-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:21:56,022-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:21:56,023-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:21:56,027-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:21:59,607-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:21:59,647-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:21:59,725-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,725-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:21:59,731-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:21:59,808-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,809-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:21:59,810-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:21:59,811-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:21:59,932-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:21:59,934-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:21:59,937-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,937-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:21:59,938-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:21:59,941-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:21:59,941-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:21:59,941-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:22:05,269-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:22:05,569-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:05,571-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked'}
[2019-08-12 15:22:05,572-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:22:05,572-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:22:05,670-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:22:05,672-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:22:05,814-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:22:05,818-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:22:06,304-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:06,307-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:22:06,488-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:22:39,345-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:22:39,346-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:22:39,349-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:22:39,350-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:22:39,353-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:22:42,476-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:22:42,514-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:22:42,591-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,592-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:22:42,599-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:22:42,673-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,673-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:22:42,674-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:22:42,675-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:22:42,775-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:22:42,777-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:22:42,780-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,780-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:22:42,781-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:22:42,784-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:22:42,784-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:22:42,784-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:22:47,811-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:22:48,155-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:48,157-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked'}
[2019-08-12 15:22:48,157-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:22:48,157-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:22:48,258-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:22:48,260-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:22:48,404-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:22:48,408-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:22:48,916-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:22:48,919-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:22:49,159-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:23:22,834-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:23:22,835-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:23:22,838-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:23:22,839-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:23:22,842-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:23:26,102-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:23:26,138-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:23:26,205-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,206-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:23:26,208-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:23:26,276-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,277-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:23:26,277-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:23:26,279-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:23:26,373-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:23:26,375-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:23:26,378-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,379-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:23:26,379-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:23:26,382-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:23:26,382-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:23:26,383-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:23:31,683-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:23:32,029-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:23:32,031-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked'}
[2019-08-12 15:23:32,031-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:23:32,032-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:23:32,096-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:23:32,097-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:23:32,240-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:23:32,244-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:23:32,773-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:23:32,776-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:23:32,914-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:24:54,723-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:24:54,724-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:24:54,729-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:24:54,729-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:24:54,732-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:24:57,792-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:24:57,827-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:24:57,893-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:57,893-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:24:57,897-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:24:57,962-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:57,962-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:24:57,962-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:24:57,965-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:24:58,058-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:24:58,060-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:24:58,063-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:58,063-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:24:58,063-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:24:58,066-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:24:58,067-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:24:58,067-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:25:03,378-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:25:03,690-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:25:03,692-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked'}
[2019-08-12 15:25:03,693-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:25:03,693-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:25:03,781-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:25:03,783-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:25:03,945-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:25:03,950-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:25:04,392-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:25:04,394-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:25:04,574-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:25:09,230-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.121947 (0.394677)	data_time: 0.000093 (0.045129)	rpn_cls_loss: 0.000097 (0.001773)	rpn_loc_loss: 0.016023 (0.104702)	kp_hp_loss: 1.545159 (0.900409)	kp_hm_hp_loss: 8.402755 (10.659587)	kp_hp_offset_loss: 0.252228 (0.241730)	kp_loss: 10.200142 (11.801727)	siammask_loss: 10.219466 (11.929143)	kp_avg_acc: 0.000000 (0.005882)
[2019-08-12 15:25:11,351-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.153216 (0.270405)	data_time: 0.000215 (0.022683)	rpn_cls_loss: 0.000187 (0.000976)	rpn_loc_loss: 0.015274 (0.089393)	kp_hp_loss: 0.709229 (0.843649)	kp_hm_hp_loss: 11.115392 (11.227892)	kp_hp_offset_loss: 0.222155 (0.231842)	kp_loss: 12.046775 (12.303384)	siammask_loss: 12.065291 (12.411630)	kp_avg_acc: 0.000000 (0.006513)
[2019-08-12 15:25:13,557-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.158599 (0.231021)	data_time: 0.000259 (0.015224)	rpn_cls_loss: 0.000147 (0.000742)	rpn_loc_loss: 0.055960 (0.085319)	kp_hp_loss: 2.042840 (0.900450)	kp_hm_hp_loss: 9.028353 (11.443478)	kp_hp_offset_loss: 0.256560 (0.228324)	kp_loss: 11.327751 (12.572253)	siammask_loss: 11.395050 (12.675379)	kp_avg_acc: 0.000000 (0.006564)
[2019-08-12 15:25:15,713-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.163761 (0.210437)	data_time: 0.000136 (0.011491)	rpn_cls_loss: 0.000487 (0.000649)	rpn_loc_loss: 0.089464 (0.084901)	kp_hp_loss: 0.747005 (0.958973)	kp_hm_hp_loss: 16.499548 (11.737118)	kp_hp_offset_loss: 0.238866 (0.233254)	kp_loss: 17.485418 (12.929346)	siammask_loss: 17.593262 (13.031875)	kp_avg_acc: 0.000000 (0.012196)
[2019-08-12 15:25:17,884-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.171017 (0.198351)	data_time: 0.000167 (0.009243)	rpn_cls_loss: 0.000154 (0.000597)	rpn_loc_loss: 0.030194 (0.079283)	kp_hp_loss: 0.720440 (0.927783)	kp_hm_hp_loss: 13.423498 (11.681866)	kp_hp_offset_loss: 0.243821 (0.232588)	kp_loss: 14.387759 (12.842235)	siammask_loss: 14.424146 (12.937973)	kp_avg_acc: 0.000000 (0.011185)
[2019-08-12 15:25:19,996-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.126632 (0.189152)	data_time: 0.000127 (0.007754)	rpn_cls_loss: 0.002080 (0.000556)	rpn_loc_loss: 0.061759 (0.076226)	kp_hp_loss: 1.085974 (0.898151)	kp_hm_hp_loss: 8.162753 (11.799210)	kp_hp_offset_loss: 0.245059 (0.233758)	kp_loss: 9.493787 (12.931116)	siammask_loss: 9.569978 (13.023145)	kp_avg_acc: 0.000000 (0.010836)
[2019-08-12 15:25:22,130-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.141999 (0.183274)	data_time: 0.000133 (0.006685)	rpn_cls_loss: 0.000188 (0.000528)	rpn_loc_loss: 0.118341 (0.078330)	kp_hp_loss: 0.557124 (0.896884)	kp_hm_hp_loss: 11.726764 (11.939983)	kp_hp_offset_loss: 0.217857 (0.234115)	kp_loss: 12.501745 (13.070979)	siammask_loss: 12.643942 (13.165505)	kp_avg_acc: 0.000000 (0.009288)
[2019-08-12 15:25:24,391-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.140330 (0.179673)	data_time: 0.000113 (0.005889)	rpn_cls_loss: 0.000156 (0.000554)	rpn_loc_loss: 0.041330 (0.080180)	kp_hp_loss: 0.423752 (0.912232)	kp_hm_hp_loss: 12.467154 (11.740289)	kp_hp_offset_loss: 0.226278 (0.235163)	kp_loss: 13.117184 (12.887682)	siammask_loss: 13.166936 (12.984454)	kp_avg_acc: 0.000000 (0.009089)
[2019-08-12 15:25:26,660-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.143534 (0.177116)	data_time: 0.000140 (0.005289)	rpn_cls_loss: 0.000181 (0.000524)	rpn_loc_loss: 0.024455 (0.077730)	kp_hp_loss: 0.526730 (0.895965)	kp_hm_hp_loss: 17.129875 (11.943647)	kp_hp_offset_loss: 0.256643 (0.234397)	kp_loss: 17.913248 (13.074004)	siammask_loss: 17.942774 (13.167809)	kp_avg_acc: 0.000000 (0.011597)
[2019-08-12 15:25:29,105-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.195187 (0.176120)	data_time: 0.000345 (0.004795)	rpn_cls_loss: 0.000086 (0.000496)	rpn_loc_loss: 0.106074 (0.076584)	kp_hp_loss: 1.020174 (0.884013)	kp_hm_hp_loss: 11.593436 (11.909957)	kp_hp_offset_loss: 0.260519 (0.236057)	kp_loss: 12.874129 (13.030022)	siammask_loss: 13.001504 (13.122424)	kp_avg_acc: 0.000000 (0.011729)
[2019-08-12 15:46:02,337-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:46:02,338-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:46:02,356-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:46:02,357-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:46:02,442-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:46:06,597-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:46:06,640-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:46:06,727-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:06,727-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:06,741-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:46:06,824-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:06,825-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:06,826-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:46:06,855-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:46:07,027-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:46:07,029-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:46:07,032-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:07,033-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:07,033-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:46:07,036-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:07,037-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:07,037-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:46:13,283-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:46:13,937-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:46:13,938-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked'}
[2019-08-12 15:46:13,939-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:46:13,939-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:46:14,011-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:46:14,013-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:46:14,148-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:46:14,151-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:46:15,076-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:46:15,079-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:46:15,201-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:46:35,270-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:46:35,271-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:46:35,275-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:46:35,276-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:46:35,280-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:46:38,348-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:46:38,384-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:46:38,451-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,451-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:38,454-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:46:38,522-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,522-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:38,523-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:46:38,524-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:46:38,618-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:46:38,620-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:46:38,624-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,624-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:38,624-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:46:38,627-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:38,628-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:46:38,628-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:46:56,708-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:46:56,709-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:46:56,712-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:46:56,712-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:46:56,717-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:46:59,879-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:46:59,914-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:46:59,981-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:46:59,982-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:46:59,984-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:47:00,050-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:00,051-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:47:00,051-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:47:00,053-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:47:00,165-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:47:00,168-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:47:00,173-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:00,173-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:00,174-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:47:00,178-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:00,178-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:00,178-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:47:05,341-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:47:05,652-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:05,654-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked'}
[2019-08-12 15:47:05,654-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:47:05,655-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:47:05,714-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:47:05,716-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:47:05,858-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:47:05,862-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:47:06,261-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:06,264-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:47:06,398-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:47:38,391-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:47:38,392-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:47:38,396-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:47:38,397-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:47:38,402-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:47:41,905-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:47:41,953-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:47:42,041-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,042-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:47:42,047-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:47:42,142-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,142-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:47:42,143-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:47:42,145-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:47:42,275-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:47:42,277-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:47:42,280-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,281-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:42,281-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:47:42,285-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:47:42,285-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:47:42,285-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:47:47,551-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:47:47,892-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:47,894-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked'}
[2019-08-12 15:47:47,894-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:47:47,895-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:47:47,975-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:47:47,977-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:47:48,120-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:47:48,124-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:47:48,628-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:47:48,633-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:47:48,867-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:49:12,714-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:49:12,715-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:49:12,718-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:49:12,718-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:49:12,720-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:49:16,258-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:49:16,319-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:49:16,419-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,440-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:49:16,447-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:49:16,533-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,537-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:49:16,542-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:49:16,550-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:49:16,665-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:49:16,668-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:49:16,671-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,671-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:49:16,671-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:49:16,675-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:49:16,675-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:49:16,675-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:49:23,646-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:49:23,988-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:49:23,990-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.2.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked'}
[2019-08-12 15:49:23,990-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:49:23,991-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:49:24,092-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:49:24,094-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:49:24,234-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:49:24,297-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:49:26,537-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:49:26,540-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:49:26,782-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:55:39,563-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:55:39,564-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:55:39,566-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:55:39,567-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:55:39,569-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:55:42,430-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:55:42,465-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:55:42,532-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,533-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:55:42,535-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:55:42,601-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,601-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:55:42,602-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:55:42,616-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:55:42,709-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:55:42,711-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:55:42,714-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,715-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:55:42,715-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:55:42,718-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:55:42,718-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:55:42,719-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:55:48,134-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:55:48,489-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:55:48,491-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'bn1.num_batches_tracked'}
[2019-08-12 15:55:48,491-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:55:48,492-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:55:48,566-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:55:48,568-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:55:48,723-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:55:48,727-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:55:49,126-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:55:49,129-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:55:49,267-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:56:52,010-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:56:52,011-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:56:52,013-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:56:52,014-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:56:52,015-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:56:54,857-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:56:54,892-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:56:54,958-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:54,959-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:56:54,961-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:56:55,028-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:55,028-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:56:55,028-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:56:55,030-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:56:55,123-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:56:55,125-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:56:55,128-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:55,128-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:56:55,129-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:56:55,132-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:56:55,133-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:56:55,133-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:57:00,025-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:57:00,330-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:00,331-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked'}
[2019-08-12 15:57:00,332-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:57:00,332-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:57:00,404-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:57:00,405-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:57:00,560-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:57:00,565-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:57:00,971-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:00,973-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:57:01,112-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:57:49,333-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:57:49,334-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:57:49,336-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:57:49,337-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:57:49,339-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:57:52,172-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:57:52,207-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:57:52,274-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,274-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:57:52,277-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:57:52,343-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,344-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:57:52,344-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:57:52,346-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:57:52,439-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:57:52,441-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:57:52,446-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,447-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:57:52,447-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:57:52,450-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:57:52,450-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:57:52,451-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:57:57,406-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:57:57,749-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:57,751-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 15:57:57,751-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:57:57,752-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:57:57,821-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:57:57,822-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:57:57,976-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:57:57,980-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:57:58,375-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:57:58,378-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:57:58,514-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 15:59:16,043-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 15:59:16,044-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 15:59:16,046-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 15:59:16,046-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 15:59:16,048-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 15:59:18,894-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 15:59:18,928-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 15:59:18,993-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:18,994-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:59:18,996-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 15:59:19,061-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:19,061-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 15:59:19,061-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 15:59:19,063-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 15:59:19,155-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 15:59:19,157-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 15:59:19,160-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:19,161-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:59:19,161-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 15:59:19,164-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 15:59:19,164-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 15:59:19,164-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 15:59:24,226-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 15:59:24,575-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:59:24,576-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked'}
[2019-08-12 15:59:24,577-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 15:59:24,577-rk0-load_helper.py# 18] used keys:265
[2019-08-12 15:59:24,648-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 15:59:24,650-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 15:59:24,805-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 15:59:24,809-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 15:59:25,195-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 15:59:25,197-rk0-load_helper.py# 18] used keys:438
[2019-08-12 15:59:25,336-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:00:29,181-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:00:29,182-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:00:29,185-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:00:29,185-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:00:29,187-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:00:32,059-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:00:32,094-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:00:32,160-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,161-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:00:32,163-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:00:32,230-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,230-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:00:32,231-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:00:32,232-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:00:32,325-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:00:32,327-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:00:32,330-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,331-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:00:32,331-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:00:32,334-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:00:32,334-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:00:32,334-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:00:37,085-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:00:37,427-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:00:37,429-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 16:00:37,429-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:00:37,429-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:00:37,501-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:00:37,502-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:00:37,657-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:00:37,662-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:00:38,047-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:00:38,049-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:00:38,188-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:01:19,266-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:01:19,267-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:01:19,270-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:01:19,270-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:01:19,272-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:01:22,119-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:01:22,153-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:01:22,219-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,219-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:01:22,221-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:01:22,286-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,286-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:01:22,287-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:01:22,288-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:01:22,382-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:01:22,384-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:01:22,392-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,392-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:01:22,393-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:01:22,395-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:01:22,396-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:01:22,396-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:01:27,099-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:01:27,432-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:01:27,434-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked'}
[2019-08-12 16:01:27,435-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:01:27,435-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:01:27,505-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:01:27,506-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:01:27,661-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:01:27,666-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:01:28,059-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:01:28,061-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:01:28,199-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:03:29,870-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:03:29,871-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:03:29,873-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:03:29,874-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:03:29,875-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:03:32,723-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:03:32,758-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:03:32,822-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,823-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:03:32,825-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:03:32,890-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,890-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:03:32,891-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:03:32,892-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:03:32,985-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:03:32,987-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:03:32,990-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,991-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:03:32,991-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:03:32,994-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:03:32,994-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:03:32,995-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:03:37,771-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:03:38,114-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:03:38,116-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.2.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked'}
[2019-08-12 16:03:38,116-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:03:38,117-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:03:38,187-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:03:38,189-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:03:38,343-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:03:38,348-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:03:38,740-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:03:38,742-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:03:38,883-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:04:39,051-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:04:39,052-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:04:39,055-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:04:39,055-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:04:39,057-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:04:41,926-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:04:41,960-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:04:42,025-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,025-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:04:42,028-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:04:42,092-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,092-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:04:42,093-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:04:42,094-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:04:42,186-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:04:42,188-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:04:42,191-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,192-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:04:42,192-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:04:42,195-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:04:42,195-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:04:42,196-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:04:47,574-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:04:47,890-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:04:47,892-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked'}
[2019-08-12 16:04:47,893-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:04:47,893-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:04:47,967-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:04:47,968-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:04:48,125-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:04:48,130-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:04:48,510-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:04:48,513-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:04:48,651-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:07:32,608-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:07:32,609-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:07:32,611-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:07:32,611-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:07:32,613-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:07:35,449-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:07:35,485-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:07:35,551-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,552-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:07:35,555-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:07:35,621-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,622-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:07:35,622-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:07:35,623-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:07:35,716-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:07:35,718-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:07:35,721-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,722-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:07:35,722-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:07:35,725-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:07:35,725-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:07:35,726-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:07:40,556-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:07:40,895-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:07:40,897-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked'}
[2019-08-12 16:07:40,897-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:07:40,898-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:07:40,978-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:07:40,980-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:07:41,140-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:07:41,144-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:07:41,548-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:07:41,550-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:07:41,699-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:09:48,235-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:09:48,236-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:09:48,238-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:09:48,239-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:09:48,240-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:09:51,096-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:09:51,131-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:09:51,198-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,198-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:09:51,201-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:09:51,267-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,268-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:09:51,268-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:09:51,269-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:09:51,363-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:09:51,365-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:09:51,371-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,372-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:09:51,372-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:09:51,375-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:09:51,376-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:09:51,376-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:09:56,019-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:09:56,307-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:09:56,309-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 16:09:56,309-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:09:56,309-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:09:56,379-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:09:56,380-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:09:56,534-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:09:56,538-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:09:56,926-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:09:56,929-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:09:57,061-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:10:56,018-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:10:56,019-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:10:56,021-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:10:56,022-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:10:56,023-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:10:58,869-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:10:58,904-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:10:58,971-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:58,971-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:10:58,974-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:10:59,040-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:59,040-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:10:59,041-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:10:59,042-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:10:59,134-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:10:59,136-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:10:59,139-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:59,139-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:10:59,140-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:10:59,143-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:10:59,143-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:10:59,144-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:11:03,961-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:11:04,289-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:04,291-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked'}
[2019-08-12 16:11:04,292-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:11:04,292-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:11:04,363-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:11:04,365-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:11:04,521-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:11:04,525-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:11:04,915-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:04,917-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:11:05,058-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:11:48,625-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:11:48,626-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:11:48,628-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:11:48,628-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:11:48,630-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:11:51,473-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:11:51,508-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:11:51,574-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,575-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:11:51,577-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:11:51,643-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,644-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:11:51,644-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:11:51,645-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:11:51,739-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:11:51,741-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:11:51,744-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,744-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:11:51,745-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:11:51,748-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:11:51,748-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:11:51,748-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:11:56,420-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:11:56,748-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:56,750-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked'}
[2019-08-12 16:11:56,750-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:11:56,751-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:11:56,821-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:11:56,823-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:11:56,981-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:11:56,985-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:11:57,354-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:11:57,356-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:11:57,495-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:14:21,634-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:14:21,635-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:14:21,638-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:14:21,638-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:14:21,668-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:14:24,628-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:14:24,663-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:14:24,730-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,730-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:14:24,733-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:14:24,799-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,800-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:14:24,800-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:14:24,801-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:14:24,895-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:14:24,897-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:14:24,900-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,900-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:14:24,900-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:14:24,904-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:14:24,904-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:14:24,905-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:14:29,406-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:14:29,691-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:14:29,692-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.downsample.1.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked'}
[2019-08-12 16:14:29,693-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:14:29,693-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:14:29,764-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:14:29,765-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:14:29,931-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:14:29,935-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:14:30,311-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:14:30,314-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:14:30,450-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:15:16,109-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:15:16,110-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:15:16,112-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:15:16,112-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:15:16,114-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:15:18,935-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:15:18,970-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:15:19,036-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,037-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:15:19,039-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:15:19,120-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,120-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:15:19,121-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:15:19,122-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:15:19,215-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:15:19,217-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:15:19,220-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,220-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:15:19,220-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:15:19,223-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:15:19,224-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:15:19,224-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:15:23,699-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:15:24,004-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:15:24,006-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked'}
[2019-08-12 16:15:24,006-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:15:24,007-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:15:24,077-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:15:24,079-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:15:24,237-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:15:24,241-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:15:24,612-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:15:24,614-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:15:24,762-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:17:17,223-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:17:17,224-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:17:17,226-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:17:17,227-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:17:17,229-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:17:20,068-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:17:20,104-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:17:20,171-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,171-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:17:20,173-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:17:20,240-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,240-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:17:20,241-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:17:20,242-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:17:20,335-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:17:20,337-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:17:20,340-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,340-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:17:20,341-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:17:20,344-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:17:20,344-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:17:20,344-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:17:24,844-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:17:25,159-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:17:25,161-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked'}
[2019-08-12 16:17:25,161-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:17:25,162-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:17:25,233-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:17:25,235-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:17:25,390-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:17:25,395-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:17:25,792-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:17:25,794-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:17:25,935-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:18:45,978-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:18:45,978-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:18:45,981-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.01,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:18:45,981-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:18:45,983-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:18:48,831-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:18:48,867-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:18:48,934-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:48,935-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:18:48,937-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:18:49,004-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:49,004-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:18:49,004-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:18:49,006-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:18:49,098-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:18:49,100-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:18:49,103-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:49,103-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:18:49,104-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:18:49,107-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:18:49,108-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:18:49,108-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:18:53,706-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:18:54,038-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:18:54,039-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.2.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked'}
[2019-08-12 16:18:54,040-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:18:54,040-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:18:54,110-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:18:54,112-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:18:54,266-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:18:54,270-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:18:54,657-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:18:54,659-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:18:54,818-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:21:33,614-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:21:33,615-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:21:33,617-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:21:33,618-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:21:33,619-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:21:36,473-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:21:36,507-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:21:36,572-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,573-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:21:36,576-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:21:36,640-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,640-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:21:36,641-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:21:36,642-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:21:36,735-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:21:36,737-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:21:36,740-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,740-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:21:36,740-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:21:36,743-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:21:36,744-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:21:36,744-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:23:23,047-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:23:23,048-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:23:23,050-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:23:23,051-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:23:23,052-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:23:25,954-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:23:25,990-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:23:26,058-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,059-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:23:26,061-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:23:26,128-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,128-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:23:26,129-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:23:26,130-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:23:26,225-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:23:26,227-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:23:26,230-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,230-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:23:26,231-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:23:26,234-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:23:26,234-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:23:26,235-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:23:31,076-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:23:31,357-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:23:31,359-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.3.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked'}
[2019-08-12 16:23:31,359-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:23:31,359-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:23:31,430-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:23:31,432-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:23:31,586-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:23:31,590-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:23:32,032-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:23:32,034-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:23:32,172-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:23:37,467-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.045841 (0.342821)	data_time: 0.000313 (0.084665)	rpn_cls_loss: 0.000217 (0.000191)	rpn_loc_loss: 0.035426 (0.052584)	kp_hp_loss: 0.960834 (1.089588)	kp_hm_hp_loss: 13.866245 (12.546936)	kp_hp_offset_loss: 0.295507 (0.237282)	kp_loss: 15.122585 (13.873807)	siammask_loss: 15.165314 (13.937098)	kp_avg_acc: 0.000000 (0.004167)
[2019-08-12 16:23:39,035-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.038618 (0.191688)	data_time: 0.000096 (0.042424)	rpn_cls_loss: 0.000305 (0.000277)	rpn_loc_loss: 0.044541 (0.057875)	kp_hp_loss: 0.910426 (1.075199)	kp_hm_hp_loss: 10.194829 (12.216419)	kp_hp_offset_loss: 0.206408 (0.238275)	kp_loss: 11.311663 (13.529895)	siammask_loss: 11.365417 (13.599621)	kp_avg_acc: 0.083333 (0.015795)
[2019-08-12 16:23:40,601-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.038765 (0.141542)	data_time: 0.000103 (0.028338)	rpn_cls_loss: 0.000149 (0.000264)	rpn_loc_loss: 0.086712 (0.062121)	kp_hp_loss: 0.552977 (1.025259)	kp_hm_hp_loss: 12.308841 (12.326044)	kp_hp_offset_loss: 0.183645 (0.234851)	kp_loss: 13.045463 (13.586157)	siammask_loss: 13.149666 (13.660964)	kp_avg_acc: 0.058824 (0.023324)
[2019-08-12 16:23:41,894-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.038659 (0.116206)	data_time: 0.000103 (0.021296)	rpn_cls_loss: 0.000143 (0.000245)	rpn_loc_loss: 0.036991 (0.064067)	kp_hp_loss: 0.579290 (0.927301)	kp_hm_hp_loss: 14.941532 (12.832788)	kp_hp_offset_loss: 0.184776 (0.235225)	kp_loss: 15.705599 (13.995317)	siammask_loss: 15.750132 (14.072441)	kp_avg_acc: 0.000000 (0.020978)
[2019-08-12 16:23:43,523-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.038563 (0.101162)	data_time: 0.000081 (0.017074)	rpn_cls_loss: 0.000170 (0.000229)	rpn_loc_loss: 0.029155 (0.063505)	kp_hp_loss: 0.847469 (0.917918)	kp_hm_hp_loss: 10.810611 (12.638325)	kp_hp_offset_loss: 0.236964 (0.236463)	kp_loss: 11.895044 (13.792710)	siammask_loss: 11.930201 (13.869144)	kp_avg_acc: 0.000000 (0.019902)
[2019-08-12 16:23:45,174-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.041895 (0.091297)	data_time: 0.000080 (0.014261)	rpn_cls_loss: 0.000200 (0.000394)	rpn_loc_loss: 0.027336 (0.072173)	kp_hp_loss: 0.415967 (0.903253)	kp_hm_hp_loss: 12.816203 (12.709300)	kp_hp_offset_loss: 0.217860 (0.236692)	kp_loss: 13.450030 (13.849247)	siammask_loss: 13.483033 (13.936248)	kp_avg_acc: 0.000000 (0.018954)
[2019-08-12 16:23:46,642-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.042404 (0.084026)	data_time: 0.000080 (0.012248)	rpn_cls_loss: 0.000251 (0.000362)	rpn_loc_loss: 0.023163 (0.067451)	kp_hp_loss: 0.890947 (0.889011)	kp_hm_hp_loss: 11.622685 (12.836085)	kp_hp_offset_loss: 0.293537 (0.237478)	kp_loss: 12.807169 (13.962578)	siammask_loss: 12.835215 (14.043879)	kp_avg_acc: 0.000000 (0.020822)
[2019-08-12 16:23:48,461-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.046148 (0.078703)	data_time: 0.000095 (0.010738)	rpn_cls_loss: 0.000128 (0.000378)	rpn_loc_loss: 0.066848 (0.067847)	kp_hp_loss: 0.567369 (0.900905)	kp_hm_hp_loss: 11.720284 (12.765845)	kp_hp_offset_loss: 0.238576 (0.238705)	kp_loss: 12.526228 (13.905460)	siammask_loss: 12.606574 (13.987253)	kp_avg_acc: 0.000000 (0.019105)
[2019-08-12 16:23:49,967-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.038634 (0.074452)	data_time: 0.000088 (0.009564)	rpn_cls_loss: 0.000303 (0.000367)	rpn_loc_loss: 0.017673 (0.067168)	kp_hp_loss: 0.701123 (0.877543)	kp_hm_hp_loss: 12.308345 (12.657638)	kp_hp_offset_loss: 0.264181 (0.239191)	kp_loss: 13.273649 (13.774373)	siammask_loss: 13.295159 (13.855342)	kp_avg_acc: 0.000000 (0.019453)
[2019-08-12 16:23:52,728-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.038913 (0.071124)	data_time: 0.000116 (0.008626)	rpn_cls_loss: 0.000179 (0.000360)	rpn_loc_loss: 0.101718 (0.065936)	kp_hp_loss: 0.738353 (0.849333)	kp_hm_hp_loss: 13.685698 (12.563921)	kp_hp_offset_loss: 0.265692 (0.237377)	kp_loss: 14.689743 (13.650632)	siammask_loss: 14.811983 (13.730115)	kp_avg_acc: 0.000000 (0.018800)
[2019-08-12 16:41:56,949-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:41:56,950-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:41:56,952-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:41:56,952-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:41:57,006-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:41:59,967-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:42:00,003-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:42:00,069-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,070-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:42:00,072-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:42:00,161-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,161-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:42:00,162-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:42:00,163-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:42:00,256-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:42:00,258-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:42:00,261-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,261-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:42:00,262-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:42:00,265-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:42:00,265-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:42:00,265-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:42:06,080-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:42:06,394-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:42:06,395-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.3.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked'}
[2019-08-12 16:42:06,396-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:42:06,396-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:42:06,468-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:42:06,470-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:42:06,626-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:42:06,631-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:42:07,035-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:42:07,037-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:42:07,176-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:42:11,926-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.038357 (0.312928)	data_time: 0.000093 (0.059280)	rpn_cls_loss: 0.000199 (0.000255)	rpn_loc_loss: 0.016587 (0.062510)	kp_hp_loss: 1.572320 (2.646304)	kp_hm_hp_loss: 12.100088 (13.495801)	kp_hp_offset_loss: 0.234235 (0.263063)	kp_loss: 13.906643 (16.405167)	siammask_loss: 13.926746 (16.480433)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:13,954-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.037217 (0.181619)	data_time: 0.000087 (0.029723)	rpn_cls_loss: 0.000252 (0.000297)	rpn_loc_loss: 0.080600 (0.068906)	kp_hp_loss: 4.225136 (2.528386)	kp_hm_hp_loss: 1.688396 (11.568309)	kp_hp_offset_loss: 0.297855 (0.252539)	kp_loss: 6.211387 (14.349236)	siammask_loss: 6.308360 (14.432217)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:15,523-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.041799 (0.134026)	data_time: 0.000101 (0.019871)	rpn_cls_loss: 0.000368 (0.000258)	rpn_loc_loss: 0.041675 (0.063076)	kp_hp_loss: 4.103624 (2.608901)	kp_hm_hp_loss: 4.762013 (10.042361)	kp_hp_offset_loss: 0.309611 (0.254520)	kp_loss: 9.175248 (12.905782)	siammask_loss: 9.225627 (12.981729)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:17,133-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.042481 (0.110497)	data_time: 0.000212 (0.014946)	rpn_cls_loss: 0.001453 (0.000634)	rpn_loc_loss: 0.000000 (0.076171)	kp_hp_loss: 4.368427 (2.647400)	kp_hm_hp_loss: 33.690601 (10.652176)	kp_hp_offset_loss: 0.289060 (0.257592)	kp_loss: 38.348087 (13.557169)	siammask_loss: 38.349541 (13.649206)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:18,631-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.041957 (0.096224)	data_time: 0.000111 (0.011998)	rpn_cls_loss: 0.000148 (0.000541)	rpn_loc_loss: 0.013671 (0.074899)	kp_hp_loss: 1.519559 (2.632750)	kp_hm_hp_loss: 10.385964 (10.886084)	kp_hp_offset_loss: 0.261828 (0.257984)	kp_loss: 12.167351 (13.776818)	siammask_loss: 12.183904 (13.867238)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:20,915-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.161570 (0.088933)	data_time: 0.000126 (0.010031)	rpn_cls_loss: 0.000702 (0.000506)	rpn_loc_loss: 0.136987 (0.073284)	kp_hp_loss: 3.209130 (2.669277)	kp_hm_hp_loss: 47.504002 (11.398777)	kp_hp_offset_loss: 0.242864 (0.258057)	kp_loss: 50.955994 (14.326111)	siammask_loss: 51.121078 (14.414557)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:23,500-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.037985 (0.083489)	data_time: 0.000092 (0.008626)	rpn_cls_loss: 0.000229 (0.001036)	rpn_loc_loss: 0.052444 (0.076887)	kp_hp_loss: 5.805024 (2.724031)	kp_hm_hp_loss: 4.056291 (11.956485)	kp_hp_offset_loss: 0.265025 (0.256054)	kp_loss: 10.126340 (14.936569)	siammask_loss: 10.189502 (15.029869)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:25,141-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.038351 (0.077884)	data_time: 0.000085 (0.007568)	rpn_cls_loss: 0.000128 (0.000990)	rpn_loc_loss: 0.024057 (0.076809)	kp_hp_loss: 2.635266 (2.695992)	kp_hm_hp_loss: 20.473169 (12.628742)	kp_hp_offset_loss: 0.235012 (0.253833)	kp_loss: 23.343447 (15.578566)	siammask_loss: 23.372442 (15.671726)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:26,704-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.038125 (0.073510)	data_time: 0.000084 (0.006745)	rpn_cls_loss: 0.001602 (0.000924)	rpn_loc_loss: 0.162757 (0.079859)	kp_hp_loss: 2.219207 (2.716985)	kp_hm_hp_loss: 6.689900 (11.984539)	kp_hp_offset_loss: 0.243809 (0.253902)	kp_loss: 9.152917 (14.955425)	siammask_loss: 9.349828 (15.052180)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:42:28,507-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.039775 (0.070121)	data_time: 0.000082 (0.006087)	rpn_cls_loss: 0.000167 (0.000850)	rpn_loc_loss: 0.036625 (0.077114)	kp_hp_loss: 2.084182 (2.708215)	kp_hm_hp_loss: 15.231901 (12.196665)	kp_hp_offset_loss: 0.231683 (0.254729)	kp_loss: 17.547766 (15.159606)	siammask_loss: 17.591883 (15.252991)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:43:52,217-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:43:52,218-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:43:52,220-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:43:52,220-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:43:52,222-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:43:55,113-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:43:55,149-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:43:55,215-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,216-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:43:55,218-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:43:55,284-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,284-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:43:55,285-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:43:55,286-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:43:55,379-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:43:55,381-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:43:55,384-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,385-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:43:55,385-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:43:55,388-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:43:55,388-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:43:55,389-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:44:00,131-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:44:00,426-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:44:00,428-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked'}
[2019-08-12 16:44:00,428-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:44:00,428-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:44:00,500-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:44:00,502-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:44:00,639-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:44:00,643-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:44:01,033-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:44:01,035-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:44:01,168-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:44:04,577-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.038593 (0.268734)	data_time: 0.000096 (0.032381)	rpn_cls_loss: 0.000286 (0.000282)	rpn_loc_loss: 0.020254 (0.083946)	kp_hp_loss: 1.825029 (2.156980)	kp_hm_hp_loss: 3.100801 (5.143991)	kp_hp_offset_loss: 0.227217 (0.247520)	kp_loss: 5.153048 (7.548490)	siammask_loss: 5.177639 (7.649509)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:05,577-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.042124 (0.154377)	data_time: 0.000094 (0.016291)	rpn_cls_loss: 0.051104 (0.002788)	rpn_loc_loss: 0.534351 (0.091568)	kp_hp_loss: 1.541786 (2.130265)	kp_hm_hp_loss: 5.000666 (5.989731)	kp_hp_offset_loss: 0.228614 (0.241163)	kp_loss: 6.771066 (8.361159)	siammask_loss: 7.463391 (8.473829)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:06,569-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.037455 (0.116045)	data_time: 0.000085 (0.010920)	rpn_cls_loss: 0.000170 (0.002131)	rpn_loc_loss: 0.041071 (0.080991)	kp_hp_loss: 2.007964 (2.392360)	kp_hm_hp_loss: 0.680845 (6.643158)	kp_hp_offset_loss: 0.289658 (0.243053)	kp_loss: 2.978467 (9.278571)	siammask_loss: 3.027922 (9.377891)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:07,531-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.037516 (0.096586)	data_time: 0.000080 (0.008229)	rpn_cls_loss: 0.000175 (0.001700)	rpn_loc_loss: 0.050899 (0.078590)	kp_hp_loss: 3.518495 (2.418401)	kp_hm_hp_loss: 7.405460 (6.484499)	kp_hp_offset_loss: 0.178339 (0.244364)	kp_loss: 11.102294 (9.147265)	siammask_loss: 11.163548 (9.243272)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:08,491-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.038097 (0.084973)	data_time: 0.000157 (0.006614)	rpn_cls_loss: 0.000199 (0.001400)	rpn_loc_loss: 0.063911 (0.075052)	kp_hp_loss: 1.699629 (2.390616)	kp_hm_hp_loss: 5.183466 (6.461704)	kp_hp_offset_loss: 0.222737 (0.243725)	kp_loss: 7.105833 (9.096045)	siammask_loss: 7.182724 (9.187508)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:09,472-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.038266 (0.077262)	data_time: 0.000095 (0.005539)	rpn_cls_loss: 0.000224 (0.001253)	rpn_loc_loss: 0.047495 (0.077198)	kp_hp_loss: 1.814422 (2.309760)	kp_hm_hp_loss: 0.803877 (6.217119)	kp_hp_offset_loss: 0.246048 (0.245296)	kp_loss: 2.864347 (8.772175)	siammask_loss: 2.921566 (8.866066)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:10,473-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.038373 (0.071833)	data_time: 0.000091 (0.004774)	rpn_cls_loss: 0.000383 (0.001103)	rpn_loc_loss: 0.093217 (0.073015)	kp_hp_loss: 3.125312 (2.322117)	kp_hm_hp_loss: 4.292025 (6.243295)	kp_hp_offset_loss: 0.269195 (0.245349)	kp_loss: 7.686532 (8.810762)	siammask_loss: 7.798776 (8.899483)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:11,470-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.037627 (0.067755)	data_time: 0.000090 (0.004199)	rpn_cls_loss: 0.002843 (0.001020)	rpn_loc_loss: 0.048251 (0.072348)	kp_hp_loss: 1.846735 (2.310341)	kp_hm_hp_loss: 4.945458 (6.096478)	kp_hp_offset_loss: 0.214162 (0.245969)	kp_loss: 7.006355 (8.652789)	siammask_loss: 7.067099 (8.740627)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:12,448-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.037400 (0.064564)	data_time: 0.000090 (0.003751)	rpn_cls_loss: 0.000090 (0.000934)	rpn_loc_loss: 0.060754 (0.071970)	kp_hp_loss: 2.163992 (2.336227)	kp_hm_hp_loss: 19.177773 (6.085534)	kp_hp_offset_loss: 0.229111 (0.246615)	kp_loss: 21.570875 (8.668378)	siammask_loss: 21.643869 (8.755675)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:13,446-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.037658 (0.062067)	data_time: 0.000098 (0.003396)	rpn_cls_loss: 0.002068 (0.001024)	rpn_loc_loss: 0.067924 (0.069449)	kp_hp_loss: 3.522949 (2.361504)	kp_hm_hp_loss: 7.163404 (5.829415)	kp_hp_offset_loss: 0.242416 (0.246176)	kp_loss: 10.928767 (8.437097)	siammask_loss: 11.012344 (8.521460)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:44:52,060-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:44:52,061-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:44:52,063-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:44:52,064-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:44:52,066-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:44:54,926-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:44:54,964-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:44:55,031-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,031-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:44:55,034-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:44:55,123-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,124-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:44:55,124-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:44:55,125-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:44:55,219-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:44:55,221-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:44:55,224-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,224-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:44:55,225-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:44:55,228-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:44:55,228-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:44:55,228-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:45:00,250-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:45:00,572-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:45:00,573-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.1.bn1.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked'}
[2019-08-12 16:45:00,574-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:45:00,574-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:45:00,645-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:45:00,647-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:45:00,802-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:45:00,806-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:45:01,203-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:45:01,205-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:45:01,344-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:45:04,914-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.038648 (0.280942)	data_time: 0.000106 (0.035606)	rpn_cls_loss: 0.000129 (0.000178)	rpn_loc_loss: 0.026211 (0.063009)	kp_hp_loss: 1.939114 (1.868078)	kp_hm_hp_loss: 12.402015 (10.209191)	kp_hp_offset_loss: 0.208335 (0.251395)	kp_loss: 14.549463 (12.328663)	siammask_loss: 14.581045 (12.404453)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:05,948-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.038466 (0.160309)	data_time: 0.000104 (0.017895)	rpn_cls_loss: 0.000206 (0.000225)	rpn_loc_loss: 0.032595 (0.060288)	kp_hp_loss: 1.520609 (2.056936)	kp_hm_hp_loss: 9.298985 (8.836536)	kp_hp_offset_loss: 0.209000 (0.245142)	kp_loss: 11.028595 (11.138612)	siammask_loss: 11.067915 (11.211184)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:06,933-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.041231 (0.119775)	data_time: 0.000099 (0.012002)	rpn_cls_loss: 0.000149 (0.000226)	rpn_loc_loss: 0.047063 (0.066403)	kp_hp_loss: 1.800297 (2.014049)	kp_hm_hp_loss: 8.592783 (9.271257)	kp_hp_offset_loss: 0.263151 (0.251157)	kp_loss: 10.656230 (11.536459)	siammask_loss: 10.712855 (11.616372)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:07,913-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.038542 (0.099620)	data_time: 0.000081 (0.009042)	rpn_cls_loss: 0.000203 (0.000216)	rpn_loc_loss: 0.030823 (0.065386)	kp_hp_loss: 2.632777 (2.024886)	kp_hm_hp_loss: 7.959931 (8.939496)	kp_hp_offset_loss: 0.239265 (0.253953)	kp_loss: 10.831974 (11.218332)	siammask_loss: 10.869165 (11.297014)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:08,900-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.042074 (0.087622)	data_time: 0.000087 (0.007266)	rpn_cls_loss: 0.000339 (0.000226)	rpn_loc_loss: 0.053087 (0.063761)	kp_hp_loss: 1.930111 (2.009698)	kp_hm_hp_loss: 8.983751 (8.883228)	kp_hp_offset_loss: 0.307276 (0.255391)	kp_loss: 11.221138 (11.148313)	siammask_loss: 11.285182 (11.225054)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:09,942-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.056764 (0.079851)	data_time: 0.000139 (0.006083)	rpn_cls_loss: 0.000234 (0.000774)	rpn_loc_loss: 0.086050 (0.063779)	kp_hp_loss: 1.742515 (1.998234)	kp_hm_hp_loss: 6.460357 (8.748810)	kp_hp_offset_loss: 0.273864 (0.253320)	kp_loss: 8.476736 (11.000360)	siammask_loss: 8.580231 (11.077671)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:10,899-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.038211 (0.074029)	data_time: 0.000084 (0.005238)	rpn_cls_loss: 0.000153 (0.000699)	rpn_loc_loss: 0.083366 (0.063049)	kp_hp_loss: 1.201827 (1.991495)	kp_hm_hp_loss: 15.244018 (8.734784)	kp_hp_offset_loss: 0.209786 (0.253074)	kp_loss: 16.655630 (10.979351)	siammask_loss: 16.755823 (11.055710)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:11,904-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.038969 (0.069815)	data_time: 0.000084 (0.004608)	rpn_cls_loss: 0.000176 (0.000644)	rpn_loc_loss: 0.029622 (0.064486)	kp_hp_loss: 1.950254 (1.971025)	kp_hm_hp_loss: 7.692065 (8.723560)	kp_hp_offset_loss: 0.265974 (0.252691)	kp_loss: 9.908293 (10.947273)	siammask_loss: 9.944016 (11.025301)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:12,935-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.039254 (0.066548)	data_time: 0.000087 (0.004116)	rpn_cls_loss: 0.000131 (0.000601)	rpn_loc_loss: 0.085678 (0.065571)	kp_hp_loss: 2.088823 (1.983522)	kp_hm_hp_loss: 7.142957 (8.807599)	kp_hp_offset_loss: 0.259775 (0.249974)	kp_loss: 9.491554 (11.041092)	siammask_loss: 9.594500 (11.120380)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:45:13,928-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.038281 (0.063972)	data_time: 0.000081 (0.003726)	rpn_cls_loss: 0.000259 (0.000562)	rpn_loc_loss: 0.139443 (0.068122)	kp_hp_loss: 2.582417 (1.988174)	kp_hm_hp_loss: 11.306526 (8.761306)	kp_hp_offset_loss: 0.275236 (0.250139)	kp_loss: 14.164179 (10.999615)	siammask_loss: 14.331770 (11.081925)	kp_avg_acc: 0.000000 (0.000000)
[2019-08-12 16:50:55,927-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 16:50:55,928-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 16:50:55,930-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.0001,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.0001,
            "end_lr": 0.0001,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 16:50:55,931-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 16:50:55,932-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 16:50:58,778-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 16:50:58,813-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 16:50:58,880-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:58,880-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:50:58,883-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 16:50:58,949-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:58,950-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 16:50:58,950-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 16:50:58,951-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 16:50:59,045-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 16:50:59,048-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 16:50:59,051-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:59,051-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:50:59,051-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 16:50:59,054-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 16:50:59,055-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 16:50:59,055-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 16:51:03,598-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 16:51:03,897-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:51:03,898-rk0-load_helper.py# 13] [Warning] missing keys: {'layer4.1.bn1.num_batches_tracked', 'layer4.2.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer4.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer4.2.bn3.num_batches_tracked', 'layer4.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer4.0.bn2.num_batches_tracked', 'layer4.0.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer4.0.bn3.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer4.2.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer4.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked'}
[2019-08-12 16:51:03,899-rk0-load_helper.py# 14] missing keys:53
[2019-08-12 16:51:03,899-rk0-load_helper.py# 18] used keys:265
[2019-08-12 16:51:03,968-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 16:51:03,969-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 16:51:04,123-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer4): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(1024, 2048, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
            (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)
          (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (downsample_p4): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 16:51:04,127-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 16:51:04,519-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 16:51:04,521-rk0-load_helper.py# 18] used keys:438
[2019-08-12 16:51:04,655-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 16:51:08,077-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.039145 (0.271984)	data_time: 0.000097 (0.031041)	rpn_cls_loss: 0.000220 (0.000180)	rpn_loc_loss: 0.108612 (0.075784)	kp_hp_loss: 0.475620 (0.882458)	kp_hm_hp_loss: 12.500264 (11.388329)	kp_hp_offset_loss: 0.257121 (0.248028)	kp_loss: 13.233005 (12.518815)	siammask_loss: 13.363559 (12.609937)	kp_avg_acc: 0.083333 (0.041234)
[2019-08-12 16:51:09,073-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.038600 (0.156006)	data_time: 0.000083 (0.015606)	rpn_cls_loss: 0.000164 (0.000633)	rpn_loc_loss: 0.133484 (0.083529)	kp_hp_loss: 1.119128 (0.998913)	kp_hm_hp_loss: 12.892043 (11.456042)	kp_hp_offset_loss: 0.259272 (0.250168)	kp_loss: 14.270444 (12.705123)	siammask_loss: 14.430789 (12.805991)	kp_avg_acc: 0.071429 (0.030855)
[2019-08-12 16:51:10,062-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.038969 (0.116910)	data_time: 0.000077 (0.010458)	rpn_cls_loss: 0.000126 (0.000557)	rpn_loc_loss: 0.047047 (0.080332)	kp_hp_loss: 1.762854 (1.006903)	kp_hm_hp_loss: 8.292045 (11.362395)	kp_hp_offset_loss: 0.266628 (0.255992)	kp_loss: 10.321527 (12.625289)	siammask_loss: 10.378109 (12.722244)	kp_avg_acc: 0.000000 (0.029737)
[2019-08-12 16:51:11,042-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.040855 (0.097419)	data_time: 0.000089 (0.007883)	rpn_cls_loss: 0.000457 (0.000473)	rpn_loc_loss: 0.032891 (0.073483)	kp_hp_loss: 0.997315 (1.075029)	kp_hm_hp_loss: 9.630161 (11.164026)	kp_hp_offset_loss: 0.215859 (0.256428)	kp_loss: 10.843335 (12.495481)	siammask_loss: 10.883261 (12.584133)	kp_avg_acc: 0.062500 (0.039081)
[2019-08-12 16:51:12,029-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.040988 (0.085905)	data_time: 0.000571 (0.006349)	rpn_cls_loss: 0.000166 (0.000417)	rpn_loc_loss: 0.037626 (0.071050)	kp_hp_loss: 1.047285 (1.048783)	kp_hm_hp_loss: 15.564237 (11.325728)	kp_hp_offset_loss: 0.244941 (0.253857)	kp_loss: 16.856462 (12.628365)	siammask_loss: 16.901781 (12.714043)	kp_avg_acc: 0.000000 (0.032441)
[2019-08-12 16:51:13,018-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.040152 (0.078187)	data_time: 0.000093 (0.005317)	rpn_cls_loss: 0.000166 (0.000447)	rpn_loc_loss: 0.024918 (0.069723)	kp_hp_loss: 2.763786 (1.031455)	kp_hm_hp_loss: 7.882549 (11.373233)	kp_hp_offset_loss: 0.266345 (0.255027)	kp_loss: 10.912681 (12.659715)	siammask_loss: 10.942748 (12.743831)	kp_avg_acc: 0.000000 (0.027034)
[2019-08-12 16:51:14,002-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.038831 (0.072597)	data_time: 0.000079 (0.004580)	rpn_cls_loss: 0.000158 (0.000427)	rpn_loc_loss: 0.303112 (0.072622)	kp_hp_loss: 1.825956 (1.036541)	kp_hm_hp_loss: 9.533402 (11.464699)	kp_hp_offset_loss: 0.256289 (0.255535)	kp_loss: 11.615646 (12.756776)	siammask_loss: 11.979539 (12.844349)	kp_avg_acc: 0.000000 (0.027128)
[2019-08-12 16:51:14,997-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.042904 (0.068507)	data_time: 0.000087 (0.004028)	rpn_cls_loss: 0.000213 (0.000421)	rpn_loc_loss: 0.060708 (0.069859)	kp_hp_loss: 1.562089 (1.008999)	kp_hm_hp_loss: 8.679843 (11.648086)	kp_hp_offset_loss: 0.261486 (0.253164)	kp_loss: 10.503418 (12.910251)	siammask_loss: 10.576481 (12.994502)	kp_avg_acc: 0.000000 (0.026344)
[2019-08-12 16:51:15,991-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.041849 (0.065269)	data_time: 0.000211 (0.003600)	rpn_cls_loss: 0.000172 (0.000395)	rpn_loc_loss: 0.032306 (0.071736)	kp_hp_loss: 0.659157 (1.009302)	kp_hm_hp_loss: 13.034230 (11.674666)	kp_hp_offset_loss: 0.196967 (0.251875)	kp_loss: 13.890354 (12.935847)	siammask_loss: 13.929293 (13.022324)	kp_avg_acc: 0.000000 (0.024899)
[2019-08-12 16:51:16,985-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.045685 (0.062762)	data_time: 0.000096 (0.003259)	rpn_cls_loss: 0.000171 (0.000377)	rpn_loc_loss: 0.079990 (0.068387)	kp_hp_loss: 0.799973 (0.982744)	kp_hm_hp_loss: 11.542498 (11.616791)	kp_hp_offset_loss: 0.236873 (0.250021)	kp_loss: 12.579344 (12.849558)	siammask_loss: 12.675504 (12.932000)	kp_avg_acc: 0.000000 (0.027515)
[2019-08-12 17:41:05,307-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 17:41:05,315-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 17:41:05,360-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 17:41:05,360-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 17:41:05,362-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 17:41:09,098-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 17:41:09,142-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 17:41:09,222-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,223-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:41:09,227-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 17:41:09,334-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,335-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:41:09,336-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 17:41:09,337-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 17:41:09,531-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 17:41:09,533-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 17:41:09,537-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,537-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:41:09,538-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 17:41:09,541-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:41:09,541-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:41:09,542-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 17:41:16,613-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 17:41:17,556-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:41:17,557-rk0-load_helper.py# 13] [Warning] missing keys: {'layer3.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'bn1.num_batches_tracked'}
[2019-08-12 17:41:17,558-rk0-load_helper.py# 14] missing keys:43
[2019-08-12 17:41:17,558-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.0.bn2.running_mean', 'layer4.0.bn2.running_var', 'layer4.1.bn2.bias', 'layer4.2.bn1.weight', 'layer4.1.bn3.weight', 'layer4.0.bn1.weight', 'layer4.2.bn3.running_var', 'layer4.0.downsample.0.weight', 'layer4.2.conv1.weight', 'layer4.2.bn3.weight', 'layer4.0.downsample.1.weight', 'layer4.0.bn1.running_var', 'layer4.1.bn3.running_var', 'layer4.1.bn2.running_mean', 'layer4.0.conv1.weight', 'layer4.1.bn3.bias', 'layer4.2.bn2.running_var', 'layer4.1.conv3.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn2.weight', 'layer4.1.bn3.running_mean', 'layer4.2.bn3.bias', 'layer4.2.bn2.weight', 'layer4.0.downsample.1.bias', 'layer4.0.bn3.running_mean', 'layer4.2.bn1.running_var', 'layer4.0.downsample.1.running_mean', 'layer4.2.conv3.weight', 'layer4.0.bn3.bias', 'layer4.1.bn1.bias', 'layer4.0.conv2.weight', 'layer4.2.bn2.bias', 'layer4.2.conv2.weight', 'layer4.0.bn2.bias', 'layer4.1.conv2.weight', 'layer4.2.bn3.running_mean', 'layer4.0.bn3.weight', 'layer4.2.bn1.bias', 'layer4.0.conv3.weight', 'layer4.0.bn1.bias', 'layer4.2.bn2.running_mean', 'layer4.2.bn1.running_mean', 'layer4.1.bn2.running_var', 'layer4.1.bn1.running_var', 'layer4.1.bn1.running_mean', 'layer4.1.conv1.weight', 'layer4.1.bn1.weight', 'layer4.0.bn3.running_var', 'layer4.0.bn1.running_mean', 'layer4.0.bn2.weight'}
[2019-08-12 17:41:17,558-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-12 17:41:17,558-rk0-load_helper.py# 18] used keys:215
[2019-08-12 17:42:15,436-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 17:42:15,437-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 17:42:15,440-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 17:42:15,440-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 17:42:15,442-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 17:42:18,935-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 17:42:18,971-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 17:42:19,041-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,042-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:42:19,045-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 17:42:19,117-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,118-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:42:19,118-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 17:42:19,119-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 17:42:19,263-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 17:42:19,266-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 17:42:19,269-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,269-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:42:19,270-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 17:42:19,273-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:42:19,273-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:42:19,273-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 17:42:24,681-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 17:42:25,178-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:42:25,180-rk0-load_helper.py# 13] [Warning] missing keys: {'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.2.bn3.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked'}
[2019-08-12 17:42:25,180-rk0-load_helper.py# 14] missing keys:43
[2019-08-12 17:42:25,181-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn1.weight', 'layer4.2.bn1.bias', 'layer4.0.bn3.running_mean', 'layer4.0.downsample.0.weight', 'layer4.2.bn1.running_mean', 'layer4.2.bn3.weight', 'layer4.0.bn3.bias', 'layer4.0.downsample.1.running_mean', 'layer4.2.bn3.running_mean', 'layer4.1.conv1.weight', 'layer4.0.conv1.weight', 'layer4.2.bn2.running_mean', 'layer4.2.bn2.weight', 'layer4.2.bn2.running_var', 'layer4.0.downsample.1.bias', 'layer4.0.bn1.bias', 'layer4.0.bn2.weight', 'layer4.0.bn1.weight', 'layer4.1.bn3.weight', 'layer4.0.bn3.weight', 'layer4.1.bn3.running_mean', 'layer4.2.bn3.running_var', 'layer4.1.bn2.running_mean', 'layer4.0.bn1.running_var', 'layer4.1.bn2.bias', 'layer4.2.conv1.weight', 'layer4.2.conv2.weight', 'layer4.2.bn3.bias', 'layer4.0.conv3.weight', 'layer4.1.bn2.weight', 'layer4.0.bn2.bias', 'layer4.0.downsample.1.weight', 'layer4.0.bn3.running_var', 'layer4.2.bn1.weight', 'layer4.0.bn2.running_mean', 'layer4.0.bn2.running_var', 'layer4.2.conv3.weight', 'layer4.0.conv2.weight', 'layer4.2.bn2.bias', 'layer4.1.conv3.weight', 'layer4.1.bn3.running_var', 'layer4.1.bn1.bias', 'layer4.1.bn1.running_mean', 'layer4.1.bn3.bias', 'layer4.0.bn1.running_mean', 'layer4.1.conv2.weight', 'layer4.2.bn1.running_var', 'layer4.1.bn2.running_var', 'layer4.0.downsample.1.running_var', 'layer4.1.bn1.running_var'}
[2019-08-12 17:42:25,181-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-12 17:42:25,181-rk0-load_helper.py# 18] used keys:215
[2019-08-12 17:42:25,206-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 17:42:25,208-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 17:42:25,402-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 17:42:25,406-rk0-load_helper.py# 40] load pretrained model from ./snapshot/checkpoint_e99.pth
[2019-08-12 17:43:03,221-rk0-val_siamrcnn.py#145] 
PyTorch version: 0.4.1.post2
Is debug build: No
CUDA used to build PyTorch: 9.0.176

OS: CentOS Linux 7 (Core)
GCC version: (GCC) 4.8.5 20150623 (Red Hat 4.8.5-11)
CMake version: version 2.8.12.2

Python version: 3.6
Is CUDA available: Yes
CUDA runtime version: 9.0.176
GPU models and configuration: 
GPU 0: GeForce GTX 1080 Ti
GPU 1: GeForce GTX 1080 Ti
GPU 2: GeForce GTX 1080 Ti
GPU 3: GeForce GTX 1080 Ti
GPU 4: GeForce GTX 1080 Ti
GPU 5: GeForce GTX 1080 Ti

Nvidia driver version: 410.48
cuDNN version: Could not collect

Versions of relevant libraries:
[pip] Could not collect
[conda] pytorch                   0.4.1           py36_py35_py27__9.0.176_7.1.2_2    pytorch
[conda] torchvision               0.2.1                    py36_1    pytorch
        OpenCV (3.4.3)
[2019-08-12 17:43:03,223-rk0-val_siamrcnn.py#146] Namespace(arch='', batch=1, clip=10.0, config='config.json', debug=True, dense_hp=False, epochs=200, hm_hp=True, hm_hp_weight=1, hp_weight=1, log='logs/test_log.txt', log_dir='test_logs', lr=0.001, momentum=0.9, mse_loss=False, not_hm_hp=False, not_reg_bbox=False, not_reg_hp_offset=False, off_weight=1, output_size=56, pretrained='./snapshot_0811/checkpoint_e99.pth', print_freq=10, reg_bbox=True, reg_hp_offset=True, reg_loss='l1', resume='', save_dir='snapshot', save_freq=5, start_epoch=0, weight_decay=0.0001, workers=4)
[2019-08-12 17:43:03,227-rk0-val_siamrcnn.py#149] config 
{
    "network": {
        "arch": "Custom"
    },
    "hp": {
        "instance_size": 255,
        "base_size": 8
    },
    "lr": {
        "feature_lr_mult": 1.0,
        "rpn_lr_mult": 1.0,
        "mask_lr_mult": 1.0,
        "type": "log",
        "start_lr": 0.01,
        "end_lr": 1e-07,
        "warmup": {
            "start_lr": 0.001,
            "end_lr": 0.01,
            "type": "step",
            "step": 1,
            "epoch": 5
        }
    },
    "loss": {
        "weight": [
            1.0,
            1.2,
            1.0
        ],
        "reg": {
            "loss": "L1Loss"
        },
        "cls": {
            "split": true
        }
    },
    "train_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/train2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 4,
                "scale": 0.05
            },
            "search": {
                "shift": 0.0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0.15
        }
    },
    "val_datasets": {
        "datasets": {
            "coco": {
                "root": "../../data/coco/crop_pose",
                "anno": "../../data/coco/val2017_pose_siamfc.json",
                "frame_range": 1
            }
        },
        "template_size": 127,
        "search_size": 255,
        "base_size": 8,
        "size": 25,
        "RPN_NMS": 0.25,
        "augmentation": {
            "template": {
                "shift": 0,
                "scale": 0.0
            },
            "search": {
                "shift": 0,
                "scale": 0.0,
                "blur": 0.18
            },
            "neg": 0,
            "gray": 0
        }
    },
    "anchors": {
        "stride": 8,
        "ratios": [
            0.33,
            0.5,
            1,
            2,
            3
        ],
        "scales": [
            8
        ],
        "round_dight": 0
    },
    "mask": {},
    "clip": {
        "feature": 10.0,
        "rpn": 10.0,
        "split": false
    }
}
[2019-08-12 17:43:03,228-rk0-val_siamrcnn.py#113] build train dataset
[2019-08-12 17:43:03,230-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/train2017_pose_siamfc.json
[2019-08-12 17:43:06,661-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/train2017_pose_siamfc.json loaded.
[2019-08-12 17:43:06,699-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [45900/45900] path {}.{}.{}.jpg
[2019-08-12 17:43:06,769-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,769-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:43:06,773-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0.15,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 45900
}
[2019-08-12 17:43:06,844-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,845-rk0-siam_rcnn_dataset.py#750] dataset length 45900
[2019-08-12 17:43:06,845-rk0-val_siamrcnn.py#117] build val dataset
[2019-08-12 17:43:06,846-rk0-siam_rcnn_dataset.py# 38] loading ../../data/coco/val2017_pose_siamfc.json
[2019-08-12 17:43:06,956-rk0-siam_rcnn_dataset.py# 76] ../../data/coco/val2017_pose_siamfc.json loaded.
[2019-08-12 17:43:06,958-rk0-siam_rcnn_dataset.py#140] SubDataSet coco start-index 0 select [1899/1899] path {}.{}.{}.jpg
[2019-08-12 17:43:06,961-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,962-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:43:06,962-rk0-siam_rcnn_dataset.py#603] dataset informations: 
{
    "template": 127,
    "search": 255,
    "template_small": false,
    "gray": 0,
    "neg": 0,
    "inner_neg": 0,
    "crop_size": 0,
    "anchor_target": {
        "thr_high": 0.6,
        "thr_low": 0.3,
        "negative": 16,
        "rpn_batch": 64,
        "positive": 16
    },
    "num": 1899
}
[2019-08-12 17:43:06,965-rk0-siam_rcnn_dataset.py#749] shuffle done!
[2019-08-12 17:43:06,965-rk0-siam_rcnn_dataset.py#750] dataset length 1899
[2019-08-12 17:43:06,966-rk0-val_siamrcnn.py#128] build dataset done
[2019-08-12 17:43:12,334-rk0-load_helper.py# 40] load pretrained model from ../resnet.model
[2019-08-12 17:43:13,078-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:43:13,080-rk0-load_helper.py# 13] [Warning] missing keys: {'layer2.2.bn3.num_batches_tracked', 'layer2.0.downsample.1.num_batches_tracked', 'layer3.1.bn1.num_batches_tracked', 'layer2.2.bn2.num_batches_tracked', 'layer2.0.bn1.num_batches_tracked', 'layer3.4.bn1.num_batches_tracked', 'layer2.1.bn1.num_batches_tracked', 'layer2.1.bn2.num_batches_tracked', 'layer1.1.bn1.num_batches_tracked', 'layer3.1.bn2.num_batches_tracked', 'layer3.2.bn3.num_batches_tracked', 'layer3.2.bn1.num_batches_tracked', 'layer2.3.bn2.num_batches_tracked', 'layer3.0.downsample.1.num_batches_tracked', 'layer2.3.bn1.num_batches_tracked', 'layer3.5.bn2.num_batches_tracked', 'layer3.5.bn1.num_batches_tracked', 'layer3.0.bn2.num_batches_tracked', 'layer1.2.bn1.num_batches_tracked', 'layer3.2.bn2.num_batches_tracked', 'bn1.num_batches_tracked', 'layer2.0.bn3.num_batches_tracked', 'layer2.0.bn2.num_batches_tracked', 'layer1.1.bn2.num_batches_tracked', 'layer3.4.bn3.num_batches_tracked', 'layer1.0.bn1.num_batches_tracked', 'layer3.3.bn2.num_batches_tracked', 'layer3.5.bn3.num_batches_tracked', 'layer3.0.bn3.num_batches_tracked', 'layer3.3.bn3.num_batches_tracked', 'layer3.4.bn2.num_batches_tracked', 'layer3.1.bn3.num_batches_tracked', 'layer2.2.bn1.num_batches_tracked', 'layer2.1.bn3.num_batches_tracked', 'layer1.0.bn2.num_batches_tracked', 'layer1.0.downsample.1.num_batches_tracked', 'layer1.0.bn3.num_batches_tracked', 'layer3.0.bn1.num_batches_tracked', 'layer2.3.bn3.num_batches_tracked', 'layer1.2.bn3.num_batches_tracked', 'layer3.3.bn1.num_batches_tracked', 'layer1.2.bn2.num_batches_tracked', 'layer1.1.bn3.num_batches_tracked'}
[2019-08-12 17:43:13,080-rk0-load_helper.py# 14] missing keys:43
[2019-08-12 17:43:13,081-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'layer4.1.bn3.bias', 'layer4.0.bn3.weight', 'layer4.0.downsample.1.running_mean', 'layer4.1.bn1.weight', 'layer4.0.bn1.bias', 'layer4.0.bn2.weight', 'layer4.2.bn2.running_mean', 'layer4.2.bn1.weight', 'layer4.1.bn3.weight', 'layer4.2.bn3.running_mean', 'layer4.1.bn1.running_var', 'layer4.0.conv3.weight', 'layer4.2.bn3.bias', 'layer4.1.bn2.running_var', 'layer4.0.bn1.running_mean', 'layer4.2.conv1.weight', 'layer4.0.bn3.running_mean', 'layer4.2.conv3.weight', 'layer4.1.bn1.running_mean', 'layer4.0.downsample.1.bias', 'layer4.1.bn3.running_mean', 'layer4.1.bn3.running_var', 'layer4.0.bn2.bias', 'layer4.0.conv2.weight', 'layer4.1.conv3.weight', 'layer4.1.bn1.bias', 'layer4.2.conv2.weight', 'layer4.0.bn2.running_mean', 'layer4.2.bn2.running_var', 'layer4.1.bn2.weight', 'layer4.2.bn2.bias', 'layer4.0.bn1.weight', 'layer4.0.downsample.1.running_var', 'layer4.1.bn2.bias', 'layer4.1.conv2.weight', 'layer4.2.bn3.weight', 'layer4.0.downsample.0.weight', 'layer4.2.bn3.running_var', 'layer4.0.bn2.running_var', 'layer4.2.bn1.running_var', 'layer4.1.bn2.running_mean', 'layer4.0.downsample.1.weight', 'layer4.2.bn1.bias', 'layer4.0.bn3.running_var', 'layer4.0.conv1.weight', 'layer4.0.bn1.running_var', 'layer4.1.conv1.weight', 'layer4.2.bn1.running_mean', 'layer4.0.bn3.bias', 'layer4.2.bn2.weight'}
[2019-08-12 17:43:13,081-rk0-load_helper.py# 17] unused checkpoint keys:50
[2019-08-12 17:43:13,081-rk0-load_helper.py# 18] used keys:215
[2019-08-12 17:43:13,108-rk0-features.py# 66] Current training 0 layers:
	
[2019-08-12 17:43:13,112-rk0-features.py# 66] Current training 3 layers:
	
[2019-08-12 17:43:13,252-rk0-val_siamrcnn.py#162] Custom(
  (upSample): UpsamplingBilinear2d(size=[127, 127], mode=bilinear)
  (kp_criterion): PoseLoss(
    (crit_hm_hp): FocalLoss()
    (crit_kp): RegWeightedL1Loss()
    (crit_reg): RegL1Loss()
  )
  (features): ResDown(
    (features): ResNet(
      (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace)
      (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (layer1): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer2): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), bias=False)
            (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
      (layer3): Sequential(
        (0): Bottleneck(
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
          (downsample): Sequential(
            (0): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (1): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (2): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (3): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (4): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
        (5): Bottleneck(
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)
          (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu): ReLU(inplace)
        )
      )
    )
    (downsample): ResDownS(
      (downsample): Sequential(
        (0): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (rpn_model): UP(
    (cls): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 10, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (loc): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(256, 20, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (pose_corr): PoseCorr(
    (kp): DepthCorr(
      (conv_kernel): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (conv_search): Sequential(
        (0): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
      )
      (head): Sequential(
        (0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace)
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (kp_model): Center_pose_head(
    (deconv_layers_new): Sequential(
      (0): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): ReLU(inplace)
      (3): ConvTranspose2d(512, 512, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): ReLU(inplace)
      (6): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (8): ReLU(inplace)
      (9): ConvTranspose2d(256, 256, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (10): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (11): ReLU(inplace)
      (12): Conv2d(256, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (13): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (14): ReLU(inplace)
      (15): ConvTranspose2d(64, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1), bias=False)
      (16): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (17): ReLU(inplace)
    )
    (hps): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 34, kernel_size=(1, 1), stride=(1, 1))
    )
    (hm_hp): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 17, kernel_size=(1, 1), stride=(1, 1))
    )
    (hp_offset): Sequential(
      (0): Conv2d(64, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace)
      (2): Conv2d(256, 2, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
[2019-08-12 17:43:13,255-rk0-load_helper.py# 40] load pretrained model from ./snapshot_0811/checkpoint_e99.pth
[2019-08-12 17:43:16,568-rk0-load_helper.py# 25] remove prefix 'module.'
[2019-08-12 17:43:16,570-rk0-load_helper.py# 16] [Warning] unused_pretrained_keys: {'features.features.layer4.2.bn1.bias', 'features.features.layer4.1.bn3.running_var', 'features.features.layer4.0.bn2.running_mean', 'features.features.layer4.0.conv1.weight', 'features.features.layer4.2.bn2.num_batches_tracked', 'features.features.layer4.0.bn1.bias', 'features.features.layer4.0.downsample.1.weight', 'features.features.layer4.0.bn1.weight', 'features.features.layer4.1.bn3.running_mean', 'features.downsample_p4.downsample.1.running_var', 'features.downsample_p4.downsample.1.num_batches_tracked', 'features.features.layer4.0.bn3.weight', 'features.features.layer4.1.bn2.weight', 'features.features.layer4.2.bn2.running_mean', 'features.features.layer4.0.bn2.weight', 'features.features.layer4.0.downsample.1.running_mean', 'features.features.layer4.0.bn3.running_var', 'features.downsample_p4.downsample.0.weight', 'features.features.layer4.0.bn2.running_var', 'features.features.layer4.2.bn3.running_var', 'features.features.layer4.0.bn3.running_mean', 'features.features.layer4.2.bn1.num_batches_tracked', 'features.features.layer4.0.downsample.1.num_batches_tracked', 'features.features.layer4.2.conv2.weight', 'features.downsample_p4.downsample.1.running_mean', 'features.features.layer4.1.bn2.running_var', 'features.features.layer4.2.bn1.running_mean', 'features.downsample_p4.downsample.1.bias', 'features.features.layer4.2.bn1.weight', 'features.features.layer4.2.bn3.bias', 'features.features.layer4.2.bn3.num_batches_tracked', 'features.features.layer4.2.bn3.running_mean', 'features.features.layer4.1.bn1.running_var', 'features.features.layer4.2.bn3.weight', 'features.features.layer4.1.bn2.num_batches_tracked', 'features.features.layer4.2.conv3.weight', 'features.features.layer4.1.bn3.bias', 'features.features.layer4.0.downsample.0.weight', 'features.features.layer4.0.bn1.running_mean', 'features.features.layer4.0.conv3.weight', 'features.features.layer4.0.downsample.1.bias', 'features.features.layer4.1.bn1.bias', 'features.features.layer4.1.conv3.weight', 'features.features.layer4.0.bn3.bias', 'features.features.layer4.1.bn3.weight', 'features.features.layer4.1.bn1.weight', 'features.features.layer4.1.bn3.num_batches_tracked', 'features.features.layer4.0.bn1.num_batches_tracked', 'features.downsample_p4.downsample.1.weight', 'features.features.layer4.1.conv1.weight', 'features.features.layer4.2.bn2.weight', 'features.features.layer4.2.bn2.bias', 'features.features.layer4.0.downsample.1.running_var', 'features.features.layer4.1.conv2.weight', 'features.features.layer4.2.bn2.running_var', 'features.features.layer4.2.bn1.running_var', 'features.features.layer4.0.bn1.running_var', 'features.features.layer4.0.conv2.weight', 'features.features.layer4.0.bn2.num_batches_tracked', 'features.features.layer4.2.conv1.weight', 'features.features.layer4.0.bn2.bias', 'features.features.layer4.1.bn1.num_batches_tracked', 'features.features.layer4.1.bn1.running_mean', 'features.features.layer4.1.bn2.running_mean', 'features.features.layer4.1.bn2.bias', 'features.features.layer4.0.bn3.num_batches_tracked'}
[2019-08-12 17:43:16,571-rk0-load_helper.py# 17] unused checkpoint keys:66
[2019-08-12 17:43:16,571-rk0-load_helper.py# 18] used keys:372
[2019-08-12 17:43:16,814-rk0-val_siamrcnn.py#172] model prepare done
[2019-08-12 17:43:20,601-rk0-val_siamrcnn.py#269] Validation: [9/1899]	batch_time: 0.166659 (0.266763)	data_time: 0.000119 (0.042526)	rpn_cls_loss: 0.000252 (0.000199)	rpn_loc_loss: 0.028852 (0.058921)	kp_hp_loss: 1.218985 (0.898472)	kp_hm_hp_loss: 13.533193 (12.975972)	kp_hp_offset_loss: 0.241123 (0.235077)	kp_loss: 14.993301 (14.109521)	siammask_loss: 15.028175 (14.180427)	kp_avg_acc: 0.000000 (0.005882)
[2019-08-12 17:43:21,952-rk0-val_siamrcnn.py#269] Validation: [19/1899]	batch_time: 0.026447 (0.162485)	data_time: 0.000194 (0.021370)	rpn_cls_loss: 0.000168 (0.000209)	rpn_loc_loss: 0.059111 (0.057613)	kp_hp_loss: 0.437106 (0.863231)	kp_hm_hp_loss: 10.747042 (11.677890)	kp_hp_offset_loss: 0.221582 (0.227055)	kp_loss: 11.405729 (12.768176)	siammask_loss: 11.476830 (12.837521)	kp_avg_acc: 0.090909 (0.007487)
[2019-08-12 17:43:23,588-rk0-val_siamrcnn.py#269] Validation: [29/1899]	batch_time: 0.039674 (0.138490)	data_time: 0.000120 (0.014397)	rpn_cls_loss: 0.000181 (0.000206)	rpn_loc_loss: 0.107492 (0.063003)	kp_hp_loss: 0.904595 (0.844392)	kp_hm_hp_loss: 11.148574 (11.858203)	kp_hp_offset_loss: 0.212026 (0.223447)	kp_loss: 12.265195 (12.926045)	siammask_loss: 12.394366 (13.001854)	kp_avg_acc: 0.066667 (0.009297)
[2019-08-12 17:43:25,160-rk0-val_siamrcnn.py#269] Validation: [39/1899]	batch_time: 0.024521 (0.123082)	data_time: 0.000213 (0.010867)	rpn_cls_loss: 0.000194 (0.000199)	rpn_loc_loss: 0.043142 (0.062569)	kp_hp_loss: 1.164039 (0.824318)	kp_hm_hp_loss: 16.451653 (11.909670)	kp_hp_offset_loss: 0.205520 (0.224583)	kp_loss: 17.821213 (12.958574)	siammask_loss: 17.873177 (13.033854)	kp_avg_acc: 0.000000 (0.009914)
[2019-08-12 17:43:26,799-rk0-val_siamrcnn.py#269] Validation: [49/1899]	batch_time: 0.027072 (0.114080)	data_time: 0.000109 (0.008734)	rpn_cls_loss: 0.000146 (0.000256)	rpn_loc_loss: 0.047028 (0.066707)	kp_hp_loss: 0.874129 (0.824463)	kp_hm_hp_loss: 17.850994 (12.194917)	kp_hp_offset_loss: 0.191507 (0.228804)	kp_loss: 18.916630 (13.248185)	siammask_loss: 18.973209 (13.328488)	kp_avg_acc: 0.100000 (0.012609)
[2019-08-12 17:43:28,307-rk0-val_siamrcnn.py#269] Validation: [59/1899]	batch_time: 0.023068 (0.108008)	data_time: 0.000093 (0.007320)	rpn_cls_loss: 0.000126 (0.000244)	rpn_loc_loss: 0.017167 (0.065627)	kp_hp_loss: 0.861468 (0.803345)	kp_hm_hp_loss: 14.026247 (12.125487)	kp_hp_offset_loss: 0.184263 (0.228517)	kp_loss: 15.071979 (13.157349)	siammask_loss: 15.092705 (13.236344)	kp_avg_acc: 0.000000 (0.011619)
[2019-08-12 17:43:30,427-rk0-val_siamrcnn.py#269] Validation: [69/1899]	batch_time: 0.029630 (0.105724)	data_time: 0.000122 (0.006302)	rpn_cls_loss: 0.000196 (0.000235)	rpn_loc_loss: 0.059795 (0.070333)	kp_hp_loss: 0.978390 (0.791860)	kp_hm_hp_loss: 11.643416 (12.239126)	kp_hp_offset_loss: 0.279471 (0.230203)	kp_loss: 12.901278 (13.261191)	siammask_loss: 12.973228 (13.345824)	kp_avg_acc: 0.000000 (0.012010)
[2019-08-12 17:43:32,053-rk0-val_siamrcnn.py#269] Validation: [79/1899]	batch_time: 0.131943 (0.103641)	data_time: 0.000109 (0.005540)	rpn_cls_loss: 0.000160 (0.000263)	rpn_loc_loss: 0.047539 (0.074767)	kp_hp_loss: 0.759982 (0.806636)	kp_hm_hp_loss: 13.570487 (12.077972)	kp_hp_offset_loss: 0.186893 (0.229522)	kp_loss: 14.517363 (13.114131)	siammask_loss: 14.574569 (13.204113)	kp_avg_acc: 0.000000 (0.011471)
[2019-08-12 17:43:33,607-rk0-val_siamrcnn.py#269] Validation: [89/1899]	batch_time: 0.023650 (0.100812)	data_time: 0.000099 (0.004949)	rpn_cls_loss: 0.000108 (0.000257)	rpn_loc_loss: 0.115441 (0.078056)	kp_hp_loss: 0.384202 (0.797433)	kp_hm_hp_loss: 11.805127 (12.021050)	kp_hp_offset_loss: 0.227629 (0.229892)	kp_loss: 12.416959 (13.048376)	siammask_loss: 12.555596 (13.142299)	kp_avg_acc: 0.000000 (0.010196)
[2019-08-12 17:43:35,132-rk0-val_siamrcnn.py#269] Validation: [99/1899]	batch_time: 0.165104 (0.098621)	data_time: 0.000103 (0.004473)	rpn_cls_loss: 0.000226 (0.000289)	rpn_loc_loss: 0.110558 (0.077921)	kp_hp_loss: 0.337857 (0.790038)	kp_hm_hp_loss: 12.672770 (12.055612)	kp_hp_offset_loss: 0.193055 (0.229756)	kp_loss: 13.203681 (13.075405)	siammask_loss: 13.336577 (13.169199)	kp_avg_acc: 0.000000 (0.010954)
